########################################################################
# Welcome to GaryOS (gary-os)
########################################################################

"The one file that does it all."

Homepage: https://github.com/garybgenett/gary-os
Download: https://sourceforge.net/projects/gary-os

------------------------------------
- Contents
------------------------------------

  * Overview
    * Quick Start
    * Version History
  * Design
  * Details
    * Similar Projects
    * Tools
  * Use Cases
    * Forensics
    * Live Update
    * Installation
    * Windows Dual-Boot
    * Grub Rescue
    * PXE Boot

========================================================================
= Overview
========================================================================

GaryOS is an entire GNU/Linux system in a single bootable file.

While most boot/rescue systems use an ISO with SquashFS, GaryOS is
a single binary file consisting of a Linux kernel and a Funtoo/Gentoo
initramfs.  The file is generated using a customized Gentoo
configuration and the default Gentoo Genkernel configuration via the
Metro automated build tool.

There are currently no major projects which take this same approach on
this scale.  The result is a smaller boot/rescue file that is just as
comprehensive, yet easier to deploy and manage.

A list of the primary advantages:
  * Complete Funtoo/Gentoo system, with toolchain
  * Entire system resides in memory; does not require media after boot
  * Deployment flexibility; can be seamlessly used anywhere a Linux
    kernel is supported, such as PXE or Microsoft Windows bootloader
  * Smaller footprint can easily fit on boot partition or USB media
  * Does not require disposable and fragile CD/DVD media

The main disadvantages:
  * Requires bootable media and configured bootloader (PXE, Grub, etc.)
  * Constrained in size; initramfs must compress to less than 500MB
    hard-coded limit in Linux kernel
  * Does not have any graphical/usability packages (no X.Org)

GaryOS enables you to drop a single file on any media, point
a bootloader at it and go.  Upgrades are as simple as replacing the
file and/or adding another bootloader entry.

Rescue media is more likely to be available and up-to-date if it is
convenient to deploy and manage, which is one of the primary aims of
GaryOS.

------------------------------------
- Quick Start
------------------------------------

If you just want to check it out, you can run it inside any
virtualization program that can boot a Linux kernel directly.  On
a Linux system with Qemu installed, this can be as trivial as:

    DISPLAY=:0 qemu -m 4096 -kernel gary-os-[...].kernel

To use it "for real", simply point your bootloader (such as Grub) to the
file on disk.  In Grub, this looks like:

    linux gary-os-[...].kernel

All the standard Linux kernel options/parameters are valid.  For
example, the amount of memory Linux allocates to itself can be specified
as usual:

    linux gary-os-[...].kernel mem=4096m

A minimum of 2-3GB of RAM is required, but a minimum of 4GB is
recommended.  There are files for both 32-bit and 64-bit processors, but
only x86 platforms are supported.

Twice during boot, at initial kernel load and initramfs extraction, it
can appear to hang as the kernel/initramfs is extracted into memory.
This is normal, and only takes a few moments each.

Once booted, the entire system resides in memory.  It is a blank slate
with only two daemons running (Udev and SSH).  It does not touch any
disks or otherwise do anything you don't tell it to.

Log in as "root" with password "gary-os".

From there, whatever rescue/administrative work that needs to be done
can be accomplished, including using "emerge" to install or upgrade
packages.

The in-memory filesystem is a complete Funtoo/Gentoo installation, and
can be copied to a partition just like a standard "stage3" file.  GaryOS
goes one step further, however, since a Linux kernel has already been
prepared.  Simply configuring and installing Grub will result in
a ready-to-go Funtoo/Gentoo installation.

------------------------------------
- Version History
------------------------------------

2014-02-28 v1.0 95ad4fd257697618bae7402d4bc3a27499035d30.3
  * Files
    * 64-bit: gary-os-generic_64-funtoo-stable-v1.0.kernel
    * 32-bit: gary-os-generic_32-funtoo-stable-v1.0.kernel
  * Metro script
    * Completed support for both 64-bit and 32-bit builds
    * Switched to "generic" for all builds
    * Removed "-fomit-frame-pointer" GCC flag
    * Removed "grub" customizations
    * Re-added "boot" and "pkg" directories, so the initramfs can be
      used as a "stage3" replacement
    * Added release/distribution processing
  * Funtoo/Gentoo configuration
    * Commented packages that broke during 32-bit build

2014-02-24 v0.3 95ad4fd257697618bae7402d4bc3a27499035d30.2
  * Files
    * 64-bit: gary-os-core2_64-funtoo-stable-v0.3.kernel
  * Metro script
    * Consolidated kernel/initrd into single kernel/initramfs file
    * Added initial support for both 64-bit and 32-bit builds
  * Funtoo/Gentoo configuration
    * Updated build/installation script with code to expand Metro
      "stage3" files for testing package builds and fixing breaks
    * Customized package list and USE flags for Metro build, to reduce
      size of installation to below 500MB Linux kernel limit
    * Completely removed X, Java and TeX Live / LaTeX
    * Added sound and miscellaneous media packages

2014-02-13 v0.2 95ad4fd257697618bae7402d4bc3a27499035d30.1
  * Files
    * 64-bit kernel: gary-os-core2_64-funtoo-stable-v0.2.kernel
    * 64-bit initrd: gary-os-core2_64-funtoo-stable-v0.2.initrd
  * Metro script
    * Added revision handling
  * Funtoo/Gentoo configuration
    * Added packages from Grml and SystemRescueCD package lists
    * Enabled "gpm" USE flag

2014-02-09 v0.1 95ad4fd257697618bae7402d4bc3a27499035d30.0
  * Files
    * 64-bit kernel: gary-os-core2_64-funtoo-stable-v0.1.kernel
    * 64-bit initrd: gary-os-core2_64-funtoo-stable-v0.1.initrd
  * Metro script
    * Initial proof of concept, with separate kernel/initrd files
  * Funtoo/Gentoo configuration
    * Active personal configuration at time of build
    * Commented packages that broke

========================================================================
= Design
========================================================================

GaryOS was not really "designed", per se.  It just kind of happened
organically.  Any lack of production value to the code is a result of
that.

Initially, the goal was just to learn the Metro system so I could roll
my own "stage3" files.  As I continued to merge in my configuration
customizations, the difference between a "stage3" and a system that
could be run "live" began to disappear.

In parallel, explorations of Buildroot/Busybox introduced me to the
embedded Initramfs concept, and gave me the idea to package the guts of
the "stage3" files from Metro into a Linux kernel for a relatively novel
"live" OS.

If not for my life partner, Rachel, it all would have stopped there.
Her prodding to "go for it" pushed me from just thinking about
publishing this as an opensource project into actually doing it.

I did not name the project GaryOS out of any delusions of grandeur or
egomania.  Indeed, the name was coined not by me but two very good
friends of mine, Steve and Colin, who used to (and still do) poke fun at
the amount of time and effort I spent/spend tuning and customizing my
computing environment.  They jokingly called my workstation "GaryOS",
when it was really nothing more than a heavily personalized and
automated system using the tools and configuration options made
available by all the projects whose software I use.  Since GaryOS really
is nothing more than my own "wrapping" on the more mature work of
others, it seemed fitting to name the project as such in
a tongue-in-cheek and somewhat self-deprecating manner.

That final point is worth re-iterating: GaryOS is 95%+ the work of other
projects.  All I've done is tie things together in a way I find novel,
appealing and useful.

========================================================================
= Details
========================================================================

------------------------------------
- Similar Projects
------------------------------------

Since the creation of GaryOS, I've discovered the following projects
during ongoing research:
  * Better-Initramfs: https://github.com/slashbeast/better-initramfs
  * Aboriginal Linux: http://landley.net/aboriginal/about.html

GaryOS shares many of the same goals and attributes/features as these
projects.  The primary difference being that both these projects strive
to be minimalist and/or otherwise purely rescue/development focused.
GaryOS instead tries to be as complete an environment as possible while
still fitting in an Initramfs.

------------------------------------
- Tools
------------------------------------

All the real heavy-lifting is accomplished using these tools/projects:
  * Metro:  http://www.funtoo.org/Metro_Quick_Start_Tutorial
  * Funtoo: http://www.funtoo.org
  * Gentoo: http://www.gentoo.org
  * Linux Initramfs: http://www.kernel.org/doc [...]
    * [...] Documentation/filesystems/ramfs-rootfs-initramfs.txt

Inspiration was provided by:
  * Buildroot: http://buildroot.uclibc.org
  * BusyBox: http://www.busybox.net
  * StaticPerl: http://software.schmorp.de/pkg/App-Staticperl.html

Kernel configuration, package lists and acknowledgements to:
  * Grml: http://grml.org
  * SystemRescueCd: http://www.sysresccd.org/SystemRescueCd_Homepage

Homage to those who started it all:
  * tomsrtbt: http://www.toms.net/rb
  * KNOPPIX: http://www.knopper.net/knoppix/index-en.html

========================================================================
= Use Cases
========================================================================

Below are the primary use cases considered for GaryOS.  Each is tested
every release, and contains validation information.

These are also considered the "howto" instructions for each case.

------------------------------------
- Forensics
------------------------------------

Definition:
  * Boot into a completely "clean" environment, so that diagnostics
    and/or recovery can be done in a read-only manner.

Last tested with:
  * GaryOS v1.0

GaryOS is in a forensics mode by default.  Hardware scanning is
performed, but the hard drives are not touched.  All entries in
"/etc/fstab" have been commented out.  As a result, swap is also
disabled.

It is a stated goal that forensics mode continue being the default.

------------------------------------
- Live Update
------------------------------------

Definition:
  * Update/install packages using Funtoo/Gentoo tools.
  * Configure/install X.Org to provide a GUI.

Last tested with:
  * GaryOS v1.0, with 8192MB memory

A complete Funtoo/Gentoo environment is available.  In order to
install/update packages, a couple of missing items need to be put into
place.  A surprising number of packages can be installed without filling
up the in-memory filesystem.

Instructions for setting up update/install of packages:
  1. Install "portage" tree.
     * [Option 1] Download "portage-*" archive from one of the "v#.#"
       version download directories; preferably from the one which
       matches your version of GaryOS.  This option is best if you plan
       to keep this file on the same media along side the GaryOS kernel
       file(s).  To extract:
       * tar -pvvxJ -C /usr -f portage-[...].tar.xz
     * [Option 2] Synchronize tree as usual.
       * emerge --sync
     * Generally speaking, "Option 1" is a smaller/faster download than
       "Option 2".  It will also be simpler to update from, since it is
       at the same revision of the tree that was used to build that
       version of GaryOS.
  2. Perform minor hacks to get working in a RAMdisk environment.  These
     should *NOT* be done if planning to install to disk per the
     "Installation" section below.  They essentially disable available
     space checks, since the "portage" scripts expect to be using
     a physical disk.  Commands to run:
     * sed -i "s%has_space = False%has_space = True%g" \
       /usr/lib/portage/pym/portage/package/ebuild/fetch.py
     * alias emerge="I_KNOW_WHAT_I_AM_DOING=true emerge"
       * For details, see "There is NOT at least" in
         /usr/portage/eclass/check-reqs.eclass
  3. Make desired edits to "/etc/portage" configuration.
     * In particular, to install X.Org the "X" USE flag should be
       enabled (remove "-X" from the end of the USE list) and the
       "VIDEO_CARDS" variable should be created and configured.
     * Starting with "-udev", there is a list of negated "-*" options at
       the end of the USE list which are necessary to build GaryOS via
       Metro.  All of these could/should be removed to get the full
       non-Metro configuration.
  4. Use all "portage" commands as usual.
     * e.g. emerge openbox rxvt-unicode xdm xorg-server
     * e.g. /etc/init.d/xdm start

------------------------------------
- Installation
------------------------------------

Definition:
  * Install GaryOS to disk as a "stage3" build.

Last tested with:
  * GaryOS v1.0

The in-memory environment is a complete Funtoo/Gentoo installation, as
shown in the "Live Update" section above.  It can be copied directly to
a new disk/partition and booted as a fresh installation.

Instructions for installing to disk:
  1. Mount formatted disk/partition.
     * e.g. mke2fs -t ext4 -jv /dev/sda2
     * e.g. mount /dev/sda2 /mnt
  2. If you wish for "/boot" to be on a separate partition, mount that
     location in the target.
     * e.g. mkdir /mnt/boot
     * e.g. mount /dev/sda1 /mnt/boot
  3. Copy in-memory filesystem to installation target.
     * e.g. rsync -avv \
       --filter=-_/dev/** \
       --filter=-_/mnt/** \
       --filter=-_/proc/** \
       --filter=-_/run/** \
       --filter=-_/sys/** \
       / /mnt
  4. Add necessary partition information to "/etc/fstab", remembering an
     entry for "/boot" if using a separate partition from #2 above.
     * e.g. vi /mnt/etc/fstab
  5. Update and install Grub, to make the new installation bootable.
     * e.g. mount --bind /dev /mnt/dev
     * e.g. chroot /mnt grub-install /dev/sda
     * e.g. chroot /mnt boot-update
  6. Reboot into new installation, update "/etc/portage" configuration,
     install "portage" tree and update/install packages as desired.
  7. Don't forget to change "hostname" and update "root" password!

------------------------------------
- Windows Dual-Boot
------------------------------------

Definition:
  * Boot using the native Windows bootloader.
  * No modifications to the hard drive partitions or boot records.
  * Do not require any files outside of "C:" in the Windows
    installation.

Last tested with:
  * MBR/GPT only; EFI not built or tested
  * Windows 7 Ultimate SP1 64-bit
  * Grub: sys-boot/grub-2.00-r7

Research and development:
  * http://lists.gnu.org/archive/html/help-grub/2013-08/msg00005.html
    * http://blog.mudy.info/2010/08/boot-grub2-stage2-directly-from-windows-bootmgr-with-grub4dos-stage1
  * https://wiki.archlinux.org/index.php/Windows_and_Arch_Dual_Boot#Using_Windows_boot_loader
    * http://www.iceflatline.com/2009/09/how-to-dual-boot-windows-7-and-linux-using-bcdedit

For convenience and supportability, this case has been mostly automated
in the "grub.sh" script.  The "gary-os.grub.*" file in the root download
directory contains an archive of the output of this script.

Overview of the script:
  * When run without arguments, it creates a series of Grub images and
    configuration files in the current directory.
  * When run with a single block device argument, the target device will
    be used for installation of the "rescue" Grub image, rather than the
    example disk image file.

Overview of the output:
  * bcdedit.bat
    * Used to install/remove the necessary entries from the Windows
      bootloader database.
  * bootstrap.*
    * Grub "core.img" and configuration loaded from the Windows
      bootloader.  Uses the directory added to "C:" (instructions below)
      for modules (such as "i386-pc" directory) and menu configuration.
  * grub.cfg
    * Grub menu used by "bootstrap" above.  Can be modified as needed to
      boot other OSes/objects.
  * rescue.*
    * Grub "core.img" rescue environment detailed further in "Grub
      Rescue" section below.
  * rescue_example.img
    * Hard disk image file example of installation of Grub rescue
      environment.

Instructions for Windows bootloader dual-boot:
  1. The script assumes a default installation, with a small boot
     partition as partition 1 and Windows "C:" on partition 2.  All
     other partitions must be 3 or higher.  Configurations that do not
     match this will require minor edits to the script, and a fresh
     build of the output directory.
  2. Copy the output directory to "C:\gary-os.grub", or wherever the
     script has been modified to point to.
  3. Run the "bcdedit.bat" script as Administrator.  Running this script
     without Administrator privileges can cause unexpected and/or
     undesired results.  The "bcdedit.guid.txt" file that is created is
     necessary for automatic removal of the created boot entry.
  4. Place the GaryOS files at these locations:
     * C:\gary-os-64.kernel
     * C:\gary-os-32.kernel
  5. Use the new option in the Windows bootloader to switch to Grub and
     boot GaryOS (or other OSes/objects bootable by Grub).  Doing
     nothing will boot into Windows as usual.
  6. Simply update the GaryOS files in-place to upgrade.
  7. Run the "bcdedit.bat" script as Administrator to remove from the
     Windows bootloader configuration.  The directory and files created
     in "C:" need to be removed manually.

If the "bcdedit.guid.txt" file is lost, or otherwise becomes out of
date with the bootloader database, use the "bcdedit" command as
Administrator to remove the unwanted entries:
  1. Run "cmd" as Administrator.
  2. Run "bcdedit" to view the bootloader database.  Copy the
     "identifier" field for each GaryOS entry.
  3. Run "bcdedit /delete [IDENTIFIER] /cleanup" for each entry.  Note
     that the "[IDENTIFIER]" should be replaced with the full string
     output in #2 above, including the "{}" markers.
     * e.g. bcdedit /delete {02a0fce9-68f5-11e3-aa07-e94d28b95f82} [...]

------------------------------------
- Grub Rescue
------------------------------------

Definition:
  * Boot into a mostly complete Grub environment directly from the boot
    record without requiring any additional files from disk.
  * Create a Grub "core.img" which can be booted using identical methods
    and options as GaryOS, such as PXE, Qemu, etc.

Last tested with:
  * Tested in place of GaryOS with both Qemu and PXE.
    * For details on PXE, see the "PXE Boot" section below.
  * Grub: sys-boot/grub-2.00-r7

Research and development:
  * https://www.gnu.org/software/grub/manual/grub.html#BIOS-installation
    * https://www.gnu.org/software/grub/manual/grub.html#Images
  * http://lukeluo.blogspot.com/2013/06/grub-how-to-4-memdisk-and-loopback.html
  * http://wiki.osdev.org/GRUB_2#Disk_image_instructions

For convenience and supportability, this case has also been automated in
the "grub.sh" script.  The "gary-os.grub.*" file in the root download
directory contains an archive of the output of this script.  However,
for this case the script will need to be run locally.  The "Windows
Dual-Boot" section above has more details on the "grub.sh" script and
its usage and output.

Instructions for Grub "rescue" image installation to hard disk:
  1. Create an empty working directory:
     * e.g. mkdir /tmp/grub
  2. Change into the working directory:
     * e.g. cd /tmp/grub
  3. Run the "grub.sh" script with a block device argument:
     * e.g. grub.sh /dev/sda
  4. The script will create necessary files in the working directory,
     and then uses "grub-bios-setup" to install the custom-built
     "core.img" into the boot record.
  5. The block device can now be booted directly into a Grub environment
     which does not require any access to disk for its modules or
     configuration.  The working directory is no longer needed and can
     be deleted.
  6. To remove, simply re-install Grub using "grub-install" as usual, or
     install another bootloader.

------------------------------------
- PXE Boot
------------------------------------

Definition:
  * Boot from a PXE environment.
  * With some modification of the Funtoo/Gentoo configuration and
    package list, this Metro automation can be used to create a lab
    workstation or other automated environment where a reboot completely
    resets each machine involved.

Last tested with:
  * DHCPd: net-misc/dhcp-4.2.5_p1
  * TFTPd: net-misc/iputils-20121221
  * iPXE:  sys-firmware/ipxe-1.0.0_p20130624

Research and development:
  * https://wiki.archlinux.org/index.php/archboot#PXE_booting_.2F_Rescue_system

Once you have a functioning PXE environment, on a global or per-host
basis add the following configuration option to "dhcpd.conf":
  * filename "gary-os-[...].kernel";

########################################################################
# End Of File
########################################################################

diff -u -U10 -r grub-2.06.orig/grub-core/lib/relocator.c grub-2.06/grub-core/lib/relocator.c
--- grub-2.06.orig/grub-core/lib/relocator.c	2020-07-29 07:55:48.000000000 -0700
+++ grub-2.06/grub-core/lib/relocator.c	2021-09-05 19:27:19.556986590 -0700
@@ -429,22 +429,24 @@
   grub_addr_t target = 0;
 
   grub_dprintf ("relocator",
 		"trying to allocate in 0x%lx-0x%lx aligned 0x%lx size 0x%lx\n",
 		(unsigned long) start, (unsigned long) end,
 		(unsigned long) align, (unsigned long) size);
 
   start = ALIGN_UP (start, align);
   end = ALIGN_DOWN (end - size, align) + size;
 
-  if (end < start + size)
+  if (end < start + size) {
+    grub_dprintf ("relocator", "gary-os: return: 0\n");
     return 0;
+  };
 
   /* We have to avoid any allocations when filling scanline events. 
      Hence 2-stages.
    */
   for (r = grub_mm_base; r; r = r->next)
     {
       p = r->first;
       do
 	{
 	  if ((grub_addr_t) p < (grub_addr_t) (r + 1)
@@ -498,20 +500,21 @@
   eventt = grub_calloc (maxevents, sizeof (events[0]));
   counter = grub_malloc ((DIGITSORT_MASK + 2) * sizeof (counter[0]));
   events = grub_calloc (maxevents, sizeof (events[0]));
   if (!events || !eventt || !counter)
     {
       grub_dprintf ("relocator", "events or counter allocation failed %d\n",
 		    maxevents);
       grub_free (events);
       grub_free (eventt);
       grub_free (counter);
+      grub_dprintf ("relocator", "gary-os: return: 1\n");
       return 0;
     }
 
   if (collisioncheck && rel)
     {
       struct grub_relocator_chunk *chunk;
       for (chunk = rel->chunks; chunk; chunk = chunk->next)
 	{
 	  events[N].type = COLLISION_START;
 	  events[N].pos = chunk->target;
@@ -766,20 +769,21 @@
 		goto found;
 	    }
 	}
       }
   }
 
   grub_mm_base = base_saved;
   grub_free (events);
   grub_free (eventt);
   grub_free (counter);
+  grub_dprintf ("relocator", "gary-os: return: 2\n");
   return 0;
 
  found:
   {
     int inreg = 0, regbeg = 0, ncol = 0;
 #if GRUB_RELOCATOR_HAVE_FIRMWARE_REQUESTS
     int fwin = 0, fwb = 0, fwlefto = 0;
 #endif
 #if GRUB_RELOCATOR_HAVE_LEFTOVERS
     int last_lo = 0;
@@ -1178,32 +1182,34 @@
       }
     if (oom)
       {
 	unsigned i;
 	for (i = 0; i < cural; i++)
 	  free_subchunk (&res->subchunks[i]);
 	grub_free (res->subchunks);
 	grub_dprintf ("relocator", "allocation failed with out-of-memory\n");
 	grub_free (events);
 
+	grub_dprintf ("relocator", "gary-os: return: 3\n");
 	return 0;
       }
   }
 
   res->src = target;
   res->size = size;
 
   grub_free (events);
 
   grub_dprintf ("relocator", "allocated: 0x%lx+0x%lx\n", (unsigned long) target,
 		(unsigned long) size);
 
+  grub_dprintf ("relocator", "gary-os: return: 4\n");
   return 1;
 }
 
 static void
 adjust_limits (struct grub_relocator *rel, 
 	       grub_phys_addr_t *min_addr, grub_phys_addr_t *max_addr,
 	       grub_phys_addr_t in_min, grub_phys_addr_t in_max)
 {
   struct grub_relocator_chunk *chunk;
 
@@ -1417,31 +1423,42 @@
       return GRUB_ERR_NONE;
     }
 
   adjust_limits (rel, &min_addr2, &max_addr2, min_addr, max_addr);
   grub_dprintf ("relocator", "Adjusted limits from %lx-%lx to %lx-%lx\n",
 		(unsigned long) min_addr, (unsigned long) max_addr,
 		(unsigned long) min_addr2, (unsigned long) max_addr2);
 
   do
     {
+      grub_dprintf ("relocator", "gary-os: malloc1: %lx, %lx, %lx, %lx\n",
+        min_addr2, max_addr2, align, size
+      );
       if (malloc_in_range (rel, min_addr2, max_addr2, align,
 			   size, ctx.chunk, 1, 1))
 	break;
+      grub_dprintf ("relocator", "gary-os: malloc1: failed!\n");
 
+      grub_dprintf ("relocator", "gary-os: malloc2.0: %lx, %lx, %lx\n",
+        rel->highestnonpostaddr, ~(grub_addr_t)0, size
+      );
       if (malloc_in_range (rel, rel->highestnonpostaddr, ~(grub_addr_t)0, 1,
 			   size, ctx.chunk, 0, 1))
 	{
+          grub_dprintf ("relocator", "gary-os: malloc2.1: %lx, %lx\n",
+            rel->postchunks, ctx.chunk->src
+          );
 	  if (rel->postchunks > ctx.chunk->src)
 	    rel->postchunks = ctx.chunk->src;
 	  break;
 	}
+      grub_dprintf ("relocator", "gary-os: malloc2: failed!\n");
 
       return grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("out of memory"));
     }
   while (0);
 
   {
 #ifdef GRUB_MACHINE_EFI
     grub_efi_mmap_iterate (grub_relocator_alloc_chunk_align_iter, &ctx,
 			   avoid_efi_boot_services);
 #elif defined (__powerpc__) || defined (GRUB_MACHINE_XEN)

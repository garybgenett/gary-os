#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

#NOTE: ASSUMING LOCATION AND NAME OF THE "_SYSTEM" SCRIPT

source $(dirname "${_SELF}")/_system

########################################

declare TOKEN=

################################################################################

${MKDIR} ${GENDIR}
${RSYNC_C} ${SETDIR}/${FUNDIR}${GENDIR}/ ${GENDIR}/

########################################

function grep_token {
	TOKEN="${1//+/[+]}"; shift
	${GREP} "${TOKEN}" "${@}"
}

################################################################################

#note: the ".working" directory is a hard-set assumption

if [[ ${1} == -v ]]; then
	declare CUR="${TARGET}"
	declare NEW="${TARGET}.working"
	declare PKG
	for PKG in $(
		${GREP} -v "^[#]" ${ETCDIR}/package.keywords |
		${GREP} -v "^$" |
		${SED} "s|:.+$||g" |
		cut -f1 |
		sort
	); do
		echo -en "\n"
		${GREP} --only-matching "${PKG}[-][0-9][^[:space:]]*" ${CUR}${GENDIR}/.emerge
		${GREP} --with-filename "KEYWORDS[=].*[^~]amd64" ${NEW}${REPDIR}/kits/*/${PKG}/*.ebuild |
			${SED} -e "s|^.+/||g" -e "s|:.+$||g"
	done
	exit 0
fi

########################################

if [[ -n ${@} ]]; then
	for TOKEN in ${@}; do
		if [[ ! -d $(ls -d /var/db/pkg/${TOKEN}-[0-9]* 2>/dev/null) ]]; then
			if [[ -n $(env - emerge -s ${TOKEN/#*\/} | ${GREP} "found[ ][:][ ]0") ]]; then
				echo -en "${TOKEN}\tNONE FOUND\n"
				continue
			fi
			env - emerge -s ${TOKEN/#*\/} |
				${GREP} -A7 "${TOKEN//+/[+]}($|[[:space:]])" |
				${GREP} "(${TOKEN//+/[+]}|Description)" |
				${SED} "s/^[*][[:space:]]*//g" |
				${SED} "s/[[:space:]]*[[][ ]Masked[ ][]]$//g" |
				${SED} "s/^[[:space:]]*Description[:][[:space:]]*/\t/g" |
				tr -d '\n'
			echo -en "\n"
		fi
	done
	exit 0
fi

################################################################################

echo -en "\n"

########################################

echo -en "emerge data..."

#note: the ".emerge" file is also hard-set in the "_system" script

declare EMERGE_CMD="$(which emerge) --verbose --pretend"
env - ${EMERGE_CMD} --emptytree \@system \@world	>${GENDIR}/.emerge	2>&1 ; echo -en "."
env - ${EMERGE_CMD} --info				>${GENDIR}/.info	2>&1 ; echo -en "."
env - ${EMERGE_CMD} --list-sets				>${GENDIR}/.sets	2>&1 ; echo -en "."
env - $(which equery) list --duplicates '*'		>${GENDIR}/.slots	2>&1 ; echo -en "."

echo -en "\n"

########################################

#>>>declare OPTS="-mindepth 1 -mount \
#>>>	-or \( -path ${GENDIR} -prune \) \
#>>>	\
#>>>	-or \( -path ${REPDIR} -prune \) \
#>>>	-or \( -path ${REPDIR}.git -prune \) \
#>>>	\
#>>>	-or \( -path /dev -prune \) \
#>>>	-or \( -path /lost+found -prune \) \
#>>>	-or \( -path /mnt -prune \) \
#>>>	-or \( -path /proc -prune \) \
#>>>	-or \( -path /run -prune \) \
#>>>	-or \( -path /sys -prune \) \
#>>>	-or \( -path /tmp -prune \) \
#>>>	-or \( -path /var/log -prune \) \
#>>>	-or \( -path /var/tmp -prune \) \
#>>>	\
#>>>	-or \( -path /boot -prune \) \
#>>>	-or \( -path /lib64/firmware -prune \) \
#>>>	-or \( -path /lib64/modules -prune \) \
#>>>	-or \( -path /opt/Adobe -prune \) \
#>>>	-or \( -path /opt/oracle-jdk-bin-\* -prune \) \
#>>>	-or \( -path /opt/sun-jdk-\* -prune \) \
#>>>	-or \( -path /usr/lib32/debug -prune \) \
#>>>	-or \( -path /usr/lib64/debug -prune \) \
#>>>	-or \( -path /usr/portage -prune \) \
#>>>	-or \( -path /usr/portage.git -prune \) \
#>>>	-or \( -path /usr/src/debug -prune \) \
#>>>	-or \( -path /usr/src/linux-\* -prune \) \
#>>>	-or \( -path /var/cache/portage -prune \) \
#>>>	-or \( -path /var/db/pkg -prune \) \
#>>>"
#>>>(
#>>>	eval find -L / ${OPTS} '-or \( -type l -print \)';
#>>>	eval find    / ${OPTS} '-or \( -type d -empty -print \)';
#>>>	eval find    / ${OPTS} '-or -print' |
#>>>		qfile --orphans --from -;
#>>>) |
#>>>	sort |
#>>>	uniq \
#>>>	>${GENDIR}/_orphans

########################################

echo -en "packages..."

#note: the "_packages" file is also hard-set in the "_system" script

cat ${GENDIR}/.emerge |
	${SED} -n "s/^[[]ebuild[^]]+[]][ ]([^: ]+)[: ].*$/\1/gp"	|
	sort								\
	>${GENDIR}/_packages
echo -en "."

find /var/db/pkg -mindepth 2 -maxdepth 2 -type d	|
	${SED} "s|^/var/db/pkg/||g"			|
	sort						\
	>${GENDIR}/_packages.db
echo -en "."

cat /dev/null >${GENDIR}/_packages.db.added
for TOKEN in $(cat ${GENDIR}/_packages.db); do
	if [[ -z $(grep_token "^${TOKEN/%-[0-9].*}" ${ETCDIR}/sets/packages) ]]; then
		echo "${TOKEN}" >>${GENDIR}/_packages.db.added
	fi
done
echo -en "."

#>>>${GREP} -v "^[#]" ${ETCDIR}/package.*			|
#>>>	${SED} -n "s/^[^:]+[:]([a-z][^[:space:]]+).+$/\1/gp"	|
#>>>	sort							|
#>>>	uniq							\
#>>>	>${GENDIR}/_packages.modified

#>>>${GREP} -v "^[#]" ${ETCDIR}/package.*			|
#>>>	${GREP} "[#][ ]gentoo[ ]required"			|
#>>>	${SED} -n "s/^[^:]+[:]([a-z][^[:space:]]+).+$/\1/gp"	|
#>>>	sort							|
#>>>	uniq							\
#>>>	>${GENDIR}/_packages.modified.required

echo -en "\n"

########################################

echo -en "use flags..."

cat /dev/null >${GENDIR}/_use.enabled
cat /dev/null >${GENDIR}/_use.disabled
for TOKEN in $(source ${ETCDIR}/make.conf ; echo ${USE}); do
	if [[ ${TOKEN} == ${TOKEN/#-} ]]; then
		grep_token "^${TOKEN/#-}[ ][-]" ${REPDIR}/kits/*/profiles/use.desc |
			sort \
			>>${GENDIR}/_use.enabled
	else
		grep_token "^${TOKEN/#-}[ ][-]" ${REPDIR}/kits/*/profiles/use.desc |
			sort \
			>>${GENDIR}/_use.disabled
	fi
done
echo -en "."

cat /dev/null >${GENDIR}/_use.packages
for TOKEN in $(cat ${GENDIR}/_packages); do
	grep_token "^${TOKEN/%-[0-9].*}[:]" ${REPDIR}/kits/*/profiles/use.local.desc |
		sort \
		>>${GENDIR}/_use.packages
done
echo -en "."

echo -en "\n"

########################################

echo -en "emerge data..."

cat ${GENDIR}/.emerge |
	${SED} "s/ ([A-Z0-9_]+=)/\n\1/g"	|
	${SED} "s/\" [^\"]+$/\"/g"		|
	${GREP} "^[A-Z0-9_]+="			|
	sort					|
	uniq					\
	>${GENDIR}/emerge__tmp
echo -en "."

${GREP} "^USE=" ${GENDIR}/emerge__tmp |
	${SED} "s/^USE=\"//g"	|
	${SED} "s/\"$//g"	|
	${SED} "s/[()*%]//g"	|
	${SED} "s/^-//g"	|
	${SED} "s/ -/ /g"	|
	${SED} "s/ /\n/g"	|
	sort			|
	uniq			\
	>${GENDIR}/emerge.use
echo -en "."

${GREP} -v "^USE=" ${GENDIR}/emerge__tmp |
	${SED} "s/=.+$//g"	|
	sort			|
	uniq			\
	>${GENDIR}/emerge.vars
echo -en "."

${RM} ${GENDIR}/emerge__tmp >/dev/null 2>&1
echo -en "."

echo -en "\n"

########################################

echo -en "configuration data..."

(source ${ETCDIR}/make.conf ; echo ${USE}) |
	${SED} "s/^-//g"	|
	${SED} "s/ -/ /g"	|
	${SED} "s/ /\n/g"	|
	sort			|
	uniq			\
	>${GENDIR}/makeconf.use
echo -en "."

${GREP} "^[A-Z0-9_]+=" ${ETCDIR}/make.conf |
	${GREP} -v "^USE="	|
	${SED} "s/=.+$//g"	|
	sort			|
	uniq			\
	>${GENDIR}/makeconf.vars
echo -en "."

echo -en "\n"

########################################

echo -en "extra variables..."

cat /dev/null >${GENDIR}/use.extra
for TOKEN in $(cat ${GENDIR}/makeconf.use); do
	if [[ -z $(grep_token "^${TOKEN}$" ${GENDIR}/emerge.use) ]]; then
		echo "${TOKEN}" >>${GENDIR}/use.extra
	fi
done
echo -en "."

cat /dev/null >${GENDIR}/vars.extra
for TOKEN in $(cat ${GENDIR}/makeconf.vars); do
	if [[ -z $(grep_token "^${TOKEN}$" ${GENDIR}/emerge.vars) ]]; then
		echo "${TOKEN}" >>${GENDIR}/vars.extra
	fi
done
echo -en "."

echo -en "\n"

########################################

echo -en "missing variables..."

cat /dev/null >${GENDIR}/use.missing.global
cat /dev/null >${GENDIR}/use.missing.local
for TOKEN in $(cat ${GENDIR}/emerge.use); do
	if [[ -z $(grep_token "^${TOKEN}$" ${GENDIR}/makeconf.use) ]]; then
		if [[ -n $(grep_token "^${TOKEN}[ ][-]" ${REPDIR}/kits/*/profiles/use.desc) ]]; then
			grep_token "^${TOKEN}[ ][-]" ${REPDIR}/kits/*/profiles/use.desc |
				sort \
				>>${GENDIR}/use.missing.global
		else
#>>>			echo -e "" \
#>>>				>>${GENDIR}/use.missing.local
#>>>			echo -e "[${TOKEN}: set]" \
#>>>				>>${GENDIR}/use.missing.local
#>>>			(
#>>>			${SED} -n "s/^([^[:space:]]+)[[:space:]].*[^-](${TOKEN}).*$/\1:\2/gp" ${ETCDIR}/package.use
#>>>			${SED} -n "s/^([^[:space:]]+)[[:space:]].*([-]${TOKEN}).*$/\1:\2/gp" ${ETCDIR}/package.use
#>>>			) |
#>>>			${GREP} -v -e "^[#]" -e "^$" |
#>>>			sort \
#>>>				>>${GENDIR}/use.missing.local
#>>>			echo -e "[${TOKEN}: all]" \
#>>>				>>${GENDIR}/use.missing.local
#>>>			grep_token "[:]${TOKEN}[ ][-]" ${REPDIR}/kits/*/profiles/use.local.desc |
#>>>				sort \
#>>>				>>${GENDIR}/use.missing.local
			grep_token "[:]${TOKEN}[ ][-]" ${REPDIR}/kits/*/profiles/use.local.desc |
				${GREP} -v "$(${SED} -n "s/^([^[:space:]]+)[[:space:]].*(${TOKEN}).*$/\1:\2/gp" ${ETCDIR}/package.use)" |
				sort \
				>>${GENDIR}/use.missing.local
		fi
	fi
done
echo -en "."

cat /dev/null >${GENDIR}/vars.missing
for TOKEN in $(cat ${GENDIR}/emerge.vars); do
	if [[ -z $(grep_token "^${TOKEN}$" ${GENDIR}/makeconf.vars) ]]; then
		echo "${TOKEN}" >>${GENDIR}/vars.missing
	fi
done
echo -en "."

echo -en "\n"

########################################

echo -en "verifying results..."

cat /dev/null >${GENDIR}/+okay

for TOKEN in ${GENDIR}/*.OKAY; do
	echo -e "\n[${TOKEN/%\.OKAY}]" >>${GENDIR}/+okay
	diff ${DIFF_OPTS} ${TOKEN} ${TOKEN/%\.OKAY} >>${GENDIR}/+okay
done
echo -en "."

echo -e "\n[emerge]" >>${GENDIR}/+okay
${GREP} -v \
	-e "^$" \
	-e "^PORTAGE_BZIP2_COMMAND[ ]" \
	-e "^These are the packages that would be merged" \
	-e "^Calculating dependencies" \
	-e "^[.]+[ ]done[!]" \
	-e "^[[]ebuild" \
	-e "^Total[:][ ]" \
	-e "^Fetch Restriction[:][ ]" \
	-e "^[ ][*][ ]IMPORTANT: [0-9]+ news items need reading for repository" \
	-e "^[ ][*][ ]Use eselect news read to view new items" \
	${GENDIR}/.emerge >>${GENDIR}/+okay
echo -en "."

echo -en "\n"

########################################

echo -en "performing checks..."

cat /dev/null				>${GENDIR}/.checks 2>&1

echo -en "\n"				>>${GENDIR}/.checks 2>&1
echo -en "[directory]"			>>${GENDIR}/.checks 2>&1
echo -en "\n"				>>${GENDIR}/.checks 2>&1
${LL} ${GENDIR}				>>${GENDIR}/.checks 2>&1
echo -en "."

#>>>echo -en "\n"				>>${GENDIR}/.checks 2>&1
#>>>echo -en "[okay]"			>>${GENDIR}/.checks 2>&1
#>>>echo -en "\n"				>>${GENDIR}/.checks 2>&1
if [[ -n "$(diff ${GENDIR}/+okay ${GENDIR}/+okay.okay 2>/dev/null)" ]]; then
	cat ${GENDIR}/+okay		>>${GENDIR}/.checks 2>&1
fi
echo -en "."

echo -en "\n"				>>${GENDIR}/.checks 2>&1
echo -en "[packages]"			>>${GENDIR}/.checks 2>&1
echo -en "\n"				>>${GENDIR}/.checks 2>&1
wc -l ${GENDIR}/_packages		>>${GENDIR}/.checks 2>&1
wc -l ${GENDIR}/_packages.db		>>${GENDIR}/.checks 2>&1
diff ${DIFF_OPTS} ${GENDIR}/_packages.db ${GENDIR}/_packages |
	${GREP} "^[-+]" |
	cat				>>${GENDIR}/.checks 2>&1
echo -en "."

echo -en "\n"				>>${GENDIR}/.checks 2>&1
echo -en "[python]"			>>${GENDIR}/.checks 2>&1
echo -en "\n"				>>${GENDIR}/.checks 2>&1
${GREP} -o "[^-(]python[0-9][_][0-9]" ${GENDIR}/.emerge |
	${SED} "s|^.||g" |
	sort -r |
	uniq -c |
	cat				>>${GENDIR}/.checks 2>&1
echo -en "."

echo -en "\n"				>>${GENDIR}/.checks 2>&1
echo -en "[news]"			>>${GENDIR}/.checks 2>&1
echo -en "\n"				>>${GENDIR}/.checks 2>&1
eselect news read all			>>${GENDIR}/.checks 2>&1
echo -en "."

echo -en "\n"				>>${GENDIR}/.checks 2>&1
echo -en "[glsa]"			>>${GENDIR}/.checks 2>&1
echo -en "\n"				>>${GENDIR}/.checks 2>&1
glsa-check --verbose --cve --test all	>>${GENDIR}/.checks 2>&1
echo -en "."

echo -en "\n"

########################################

echo -en "complete."
echo -en "\n"

exit 0
################################################################################
# end of file
################################################################################

#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

#NOTE: SCRIPT NAME AND FUNCTION NAMES (${MAKEIT}, ${SHIPIT}) MUST MATCH FOR "_SYSTEM" WRAPPING TO WORK!
#NOTE: UPDATE "#SETTINGS" LINES IN "_SYSTEM" SCRIPT WHEN THESE VAIABLES CHANGE!

declare _TITLE="gary-os"
declare _VERSN="v4.0"
declare _RDATE="$(date --iso=date)"

declare _FINAL=".${_TITLE}-${ESUB}"
declare _RAMFS="${_TITLE}-${ESUB}-${_VERSN}"

declare _GREPO="/.g/_data/_builds/.${_TITLE}/.${_TITLE}"

########################################

#>>>if [[ ${TARGET} == / ]]; then
#>>>	_TITLE="${_TITLE}-custom"
#>>>fi

########################################

declare CMTFIL=".commit"
declare COMMIT=
for FILE in \
	${_TITLE} \
	.setup \
	.static \
; do
	NEXT="$(cat /.g/_data/zactive{,/coding}/${FILE}.git/refs/heads/master 2>/dev/null)"
	if [[ -n "${NEXT}" ]]; then
		COMMIT="${COMMIT}${FILE}: ${NEXT}\n"
	fi
done

################################################################################

declare _AUTHOR="Gary B. Genett <me@garybgenett.net>"
declare _LOGIN="garybgenett"

declare _GITHUB="ssh://git@github.com/${_LOGIN}/${_TITLE}.git"
declare _SFCODE="ssh://${_LOGIN}@git.code.sf.net/p/${_TITLE}/code"
declare _SFFILE="${_LOGIN}@web.sourceforge.net:/home/frs/project/${_TITLE}"
declare _SFRSSH="${_LOGIN},${_TITLE}@shell.sourceforge.net create"

declare _DOCDIR="/.g/_data/zactive/coding/${_TITLE}"
declare _SAVDIR="/.g/_data/_builds/_${_TITLE}"
declare _RELDIR="$(dirname ${_GREPO})"
declare _OUTDIR="${_RELDIR}.release"

declare -a RELEASE=
declare -a CMTHASH=
RELEASE[0]="v0.1"; CMTHASH[0]="4d1b46b02798a1d3d3421b1c8087d80a80012a53"
RELEASE[1]="v0.2"; CMTHASH[1]="99c1bafbf1116c1400705803da45e1ac03f3d492"
RELEASE[2]="v0.3"; CMTHASH[2]="6e968d212ea62a1054e3cafa2436b6a98cf8776b"
RELEASE[3]="v1.0"; CMTHASH[3]="f6885f3482b95fe15a688135c441f8f6391c9529"
RELEASE[4]="v1.1"; CMTHASH[4]="9b653e64164e68873333043b41f8bbf23b0fbd55"
RELEASE[5]="v2.0"; CMTHASH[5]="deda452a0aab311f243311b48a39b7ac60ab3fd8"
RELEASE[6]="v3.0"; CMTHASH[6]="35141e1e20259d7d1c2f4b143c6ae4505d7d5045"

################################################################################

function _release_reset {
	if [[ ${TARGET} != / ]]; then
		${RM} ${TARGET}/.${_TITLE}*		|| return 1
	fi
	${RM} ${TARGET}/${_FINAL}*			|| return 1
	${RM} ${TARGET}/${_FINAL}/${_RAMFS}.cpio.xz	|| return 1
	${RM} ${TARGET}/${_FINAL}/${_RAMFS}.kernel	|| return 1
	${RM} ${TARGET}/boot/_null.kernel		|| return 1
	${RM} ${TARGET}/usr/src/linux			|| return 1
	if [[ ${TARGET} != / ]]; then
		${RM} ${TARGET}/usr/src/linux.tar.xz	|| return 1
	fi
	return 0
}

########################################

function _release_prep {	#{reset}
	if [[ ${1} == --reset ]]; then
		shift
		_release_reset	|| return 1
	fi
	_release_gitdir		|| return 1
	_release_config		|| return 1
	_release_linux		|| return 1
	_release_symlink	|| return 1
	return 0
}

########################################

function _release_gitdir {
	if [[ ${TARGET} == / ]]; then
#>>>		${RM}				${TARGET}/.${_TITLE}		|| return 1
		${RM}				${TARGET}/.${_TITLE}.git	|| return 1
		return 0
	fi
	if [[ ! -d ${_GREPO} ]] || [[ ! -d ${_GREPO}.git ]]; then
#>>>		${RM}				${TARGET}/.${_TITLE}		|| return 1
		${RM}				${TARGET}/.${_TITLE}.git	|| return 1
		return 0
	fi
	${RSYNC_U} ${_GREPO}/			${TARGET}/.${_TITLE}		|| return 1
#>>>	${RSYNC_U} ${_GREPO}.git/		${TARGET}/.${_TITLE}.git	|| return 1
	${RM}					${TARGET}/.${_TITLE}.git	|| return 1
#>>>	${SED} -i "/worktree[ ][=]/d"		${TARGET}/.${_TITLE}.git/config	|| return 1
#>>>	${LN} ../.${_TITLE}.git			${TARGET}/.${_TITLE}/.git	|| return 1
#>>>	echo -en "gitdir: ../.${_TITLE}.git\n"	>${TARGET}/.${_TITLE}/.git	|| return 1
	return 0
}

########################################

function release_config_issue {
	for FILE in ${KERNEL}; do NEXT="${FILE}"; done
	for FILE in \
		"GaryOS Version|${_VERSN}" \
		"Release Date|${_RDATE}" \
		"Funtoo Commit|${FUNTOO}" \
		"Linux Kernel|${NEXT}" \
	; do
		declare KEY="$(echo "${FILE}" | ${SED} "s|^(.+)[|](.+)$|\1|g")"
		declare VAL="$(echo "${FILE}" | ${SED} "s|^(.+)[|](.+)$|\2|g")"
		${SED} -i \
			-e "s|^(.*${KEY}[:].*[0-9]m).*$|\1 ${VAL}|g" \
			${ARTDIR}/issue \
			|| return 1
	done
	${RSYNC_C} -L ${ARTDIR}/issue ${TARGET}/etc/issue \
		|| return 1
	if [[ ${TARGET} == / ]]; then
		FILE=" \\\e[1;45;37m"
		FILE+="PLEASE NOTE THAT THIS BUILD HAS BEEN CUSTOMIZED AND IS NOT AN OFFICIAL VERSION!"
		FILE+="\\\e[1;40;30m"
		FILE+="\n\n"
		${SED} -i \
			-e "s|^(.+[ ]Thank[ ]you[ ])|${FILE}\1|g" \
			${TARGET}/etc/issue \
			|| return 1
		return 0
	fi
	return 0
}

#NOTE: UPDATE THE TABLE IN "README" WHEN MAKING CHANGES HERE!

function _release_config {
	release_config_issue												|| return 1
	if [[ ${TARGET} == / ]]; then
		return 0
	fi
	${LN} sbin/init								${TARGET}/init				|| return 1
	${SED} -i -e "s|^([^#].+)$|#\1|g"					${TARGET}/etc/fstab			|| return 1
	${SED} -i -e "s|^(hostname=[\"]?)[^\"]+([\"]?)$|\1${_TITLE}\2|g"	${TARGET}/etc/conf.d/hostname		|| return 1
	echo -en "setterm -blength 0\n"						>${TARGET}/etc/profile.d/setterm.sh	|| return 1
	${RSYNC_C} -L ${ARTDIR}/wpa_supplicant.conf				${TARGET}/etc/wpa_supplicant/		|| return 1
	${SED} -i -e "/xset[ ][-]b/d" -e "s|^(exec.*dwm.*)$|xset -b\n\1|g"	${TARGET}/etc/X11/Sessions/dwm		|| return 1
	${SED} -i -e "s|^(.*xsetroot[ ][-]name[ ]).*$|\1\"${WMHELP}\"|g"	${TARGET}/etc/X11/Sessions/dwm		|| return 1
	echo -en "XSESSION=\"${WINMGR}\"\n"					>${TARGET}/etc/env.d/90xsession		|| return 1
	safe_env								/usr/sbin/env-update			|| return 1
	echo ${RCUPDT} | tr ';' '\n' | while read -r FILE; do
		safe_env							${FILE}					|| return 1
	done
	echo -en "${_TITLE}\n${_TITLE}\n" | safe_env				/usr/bin/passwd root			|| return 1
	return 0
}

########################################

function _release_linux {
	if [[ ${TARGET} == / ]]; then
		if [[ ! -d ${TARGET}/usr/src/linux ]] || [[ -L ${TARGET}/usr/src/linux ]]; then
			${RM}							${TARGET}/usr/src/linux		|| return 1
			release_untar						${TARGET}/usr/src/linux		|| return 1
		fi
		return 0
	fi
	for FILE in ${KERNEL}; do NEXT="config-gentoo64-${FILE}"; FILE="/usr/src/linux-${FILE}-gentoo"; done
	if [[ ! -d ${TARGET}/usr/src/linux ]] || [[ -L ${TARGET}/usr/src/linux ]]; then
		${RM}								${TARGET}/usr/src/linux		|| return 1
#>>>		safe_make -C ${TARGET}${FILE}									\
#>>>			INSTALL_HDR_PATH="${TARGET}/usr/src/linux"		headers_install			|| return 1
		${RSYNC_U}											\
			--delete-excluded									\
			--filter="-_/.tmp**"									\
			--filter="-_/usr/initramfs_data.cpio**"							\
			${TARGET}${FILE}/					${TARGET}/usr/src/linux		|| return 1
	fi
#>>>	if [[ ! -f ${TARGET}/boot/_null.kernel ]]; then
#>>>		safe_make -C ${TARGET}/usr/src/linux				distclean			|| return 1
#>>>		safe_make -C ${TARGET}/usr/src/linux				allnoconfig bzImage		|| return 1
#>>>		${RSYNC_U} -L  ${TARGET}/usr/src/linux/arch/x86/boot/bzImage	${TARGET}/boot/_null.kernel	|| return 1
#>>>	fi
	if [[ ! -f ${TARGET}/usr/src/linux.tar.xz ]]; then
		safe_make -C ${TARGET}/usr/src/linux				distclean			|| return 1
		${RSYNC_U} ${TARGET}${ARCDIR}/${NEXT}				${TARGET}/usr/src/linux/.config	|| return 1
		safe_make -C ${TARGET}/usr/src/linux				modules_prepare			|| return 1
		release_tar							${TARGET}/usr/src/linux		|| return 1
	fi
	return 0
}

########################################

function _release_symlink {
	if [[ ${TARGET} == / ]]; then
		return 0
	fi
	for FILE in ${KERNEL}; do NEXT="config-gentoo64-${FILE}"; FILE="kernel-genkernel-x86_64-${FILE}-gentoo"; done
	if [[ -n ${COMMIT} ]]
		#note: also doing this in "_system" script on purpose
		then echo -en "${COMMIT}"			>${TARGET}/${CMTFIL}						|| return 1
		else ${RM}					${TARGET}/${CMTFIL}						|| return 1
	fi
	${MKDIR} ${TARGET}/${_FINAL}												|| return 1
	${RM} $(find						${TARGET}/${_FINAL} -maxdepth 1 -type l | sort)			|| return 1
	${LN} --relative ${TARGET}${DSTDIR}			${TARGET}/${_FINAL}/_$(basename ${DSTDIR})			|| return 1
	${LN} --relative ${TARGET}${PAKDIR}			${TARGET}/${_FINAL}/_$(basename ${PAKDIR})			|| return 1
#>>> sort -b -k4
	${LN} --relative ${TARGET}/${REPDIR}.git.tar.xz		${TARGET}/${_FINAL}/${_RAMFS}.$(basename ${REPDIR}).git.tar.xz	|| return 1
	${LN} --relative ${TARGET}/${REPDIR}.tar.xz		${TARGET}/${_FINAL}/${_RAMFS}.$(basename ${REPDIR}).tar.xz	|| return 1
	${LN} --relative ${TARGET}/usr/src/linux.tar.xz		${TARGET}/${_FINAL}/${_RAMFS}.linux.tar.xz			|| return 1
	${LN} --relative ${TARGET}/boot/${FILE}			${TARGET}/${_FINAL}/${_RAMFS}.null.kernel			|| return 1
	${LN} --relative ${TARGET}/.${_TITLE}.packages.txt	${TARGET}/${_FINAL}/${_RAMFS}.packages.txt			|| return 1
#>>>
	if [[ -f ${TARGET}/boot/_null.kernel ]]; then
		${LN} --relative ${TARGET}/boot/_null.kernel	${TARGET}/${_FINAL}/${_RAMFS}.null.kernel			|| return 1
	fi
	for FILE in ${TARGET}${ARCDIR}/stage3-*.tar.xz; do
		${LN} --relative ${FILE}			${TARGET}/${_FINAL}/						|| return 1
	done
	return 0
}

########################################

function release_ramfs_packages {
	${MKDIR} ${TARGET}/${_FINAL}										|| return 1
	cat /dev/null >${TARGET}/.${_TITLE}.packages.txt							|| return 1
	NEXT=
	for FILE in $(
		cd ${TARGET}${PAKDIR}										&&
		find ./ -mindepth 2 -maxdepth 2 -type f								|
			${SED} "s|^[.][/]||g"									|
			sort -u
	); do
		NEXT+=" ${FILE}"
	done
	for FILE in ${NEXT}; do
		declare PKG_DB="$(cd ${TARGET}${PDBDIR} && ${LS} -d ${FILE/%.tbz2}	2>/dev/null)"		|| return 1
		declare PKG_DU="$(cd ${TARGET}${PAKDIR} && ${DU} -ks ${FILE}		2>/dev/null)"		|| return 1
		if [[ -n ${PKG_DB} ]]; then
			echo -en "${PKG_DU} (installed)\n"	| tee -a ${TARGET}/.${_TITLE}.packages.txt	|| return 1
		else
			echo -en "${PKG_DU} (packaged)\n"	| tee -a >>${TARGET}/.${_TITLE}.packages.txt	|| return 1
		fi
	done
	return 0
}

function release_ramfs_cpio {
	mount_dev_dirs -u		|| return 1
	${MKDIR} ${TARGET}/${_FINAL}	|| return 1
	FILE="${TARGET}/${_FINAL}/${_RAMFS}.cpio"
	if [[ ! -f ${FILE}.xz ]]; then
		(cd ${TARGET} && find ./ -mindepth 1 \
			\( -path ./${CMTFIL}		-prune \) -o \
			\( -path ./${_FINAL}		-prune \) -o \
			\( -path ./${_RAMFS}		-prune \) -o \
			\
			\( -path .${ARCDIR}\*		-prune \) -o \
			\( -path .${GENDIR}\*		-prune \) -o \
			\
			\( -path .${DSTDIR}		-prune \) -o \
			\( -path .${PAKDIR}		-prune \) -o \
			\( -path .${REPDIR}		-prune \) -o \
			\( -path .${REPDIR}.git\*	-prune \) -o \
			\
			\( -path ./usr/src/linux	-prune \) -o \
			\( -path ./usr/src/linux-\*	-prune \) -o \
			\
			\( -path ./usr/lib/debug	-prune \) -o \
			\( -path ./usr/lib32/debug	-prune \) -o \
			\( -path ./usr/lib64/debug	-prune \) -o \
			\( -path ./usr/src/debug	-prune \) -o \
			\
			\( -path ./proc/\*		-prune \) -o \
			\( -path ./sys/\*		-prune \) -o \
			\
			\( -path ./tmp/\*		-prune \) -o \
			\( -path ./var/cache/\*		-prune \) -o \
			\( -path ./var/lock/\*		-prune \) -o \
			\( -path ./var/log/\*		-prune \) -o \
			\( -path ./var/tmp/\*		-prune \) -o \
			\
			-print
		)									>${FILE}.txt	|| return 1
		sort -o ${FILE}.txt							${FILE}.txt	|| return 1
		cat ${FILE}.txt | cpio -v --create --format newc --directory ${TARGET}	>${FILE}	|| return 1
		${RM}									${FILE}.dir	|| return 1
		${MKDIR}								${FILE}.dir	|| return 1
		cpio -v --extract --file ${FILE} --directory				${FILE}.dir	|| return 1
		xz -vv --compress --stdout --format xz --check crc64 ${FILE}		>${FILE}.xz	|| return 1
	fi
	return 0
}

function release_ramfs_kernel {
	for FILE in ${KERNEL}; do NEXT="config-gentoo64-${FILE}"; FILE="/usr/src/linux-${FILE}-gentoo"; done
	if [[ ${TARGET} == / ]]; then
		FILE="/usr/src/linux"
	fi
	if [[ -d ${TARGET}${FILE} ]] && [[ ! -f ${TARGET}/${_FINAL}/${_RAMFS}.kernel ]]; then
		#note: treating the block size of the cpio as the in-memory filesystem size, which comes up a few MB short of reality
		#note: then adding 768MB for buffer and minimum needed memory, and calculating the number of 4096K pages needed in the kernel
		#note: fortunately, the kernel code does maximizing and rounding to the nearest memory block boundary for us, so all we need to do is provide an integer
		declare SHMMAX=		# based on a page size of 4096
		SHMMAX="$(du -bs ${TARGET}/${_FINAL}/${_RAMFS}.cpio | ${SED} "s|[[:space:]].*$||g")"
		SHMMAX="$(echo "(${SHMMAX} +(2^29)+(2^28))/4096" | bc | ${SED} -r "s|[.].*$||g")"
#>>>		SHMMAX="917504"		# (3*(2^18))+2^17 = (3.5*(2^30))/4096 = 3.5G
#>>>		SHMMAX="983040"		# (3*(2^18))+2^17+2^16 = ~3.7G [ (3*(2^18))*4096 = 3G) ] + [ (2^17)*4096 = 512M ] + [ (2^16)*4096 = 256M ]
#>>>		safe_make -C ${TARGET}${FILE}					distclean					|| return 1
		[[ ! -f ${TARGET}${FILE}/mm/shmem.c.${_TITLE} ]] || ${MV}	${TARGET}${FILE}/mm/shmem.c{.${_TITLE},}	|| return 1
		${SED} -i.${_TITLE} "s|totalram_pages[ ][/][ ]2|${SHMMAX}|g"	${TARGET}${FILE}/mm/shmem.c			|| return 1
		${GREP} --after-context=3 "long[ ]shmem_default_max"		${TARGET}${FILE}/mm/shmem.c			|| return 1
		diff ${DIFF_OPTS}						${TARGET}${FILE}/mm/shmem.c{.${_TITLE},}	| ${GREP} "^[-+]" #>>> || return 1
		declare INITRAMFS_CONFIG=
		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_SOURCE=\"$(realpath ${TARGET}/${_FINAL}/${_RAMFS}.cpio)\"\n"
#>>>		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_ROOT_GID=0\n"
#>>>		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_ROOT_UID=0\n"
#>>>		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION_NONE=y\n"
		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION_XZ=y\n"
#>>>		INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION=\".xz\"\n"
		${RSYNC_U} ${TARGET}${ARCDIR}/${NEXT}				${TARGET}${FILE}/.config			|| return 1
		kernel_cpu 							${TARGET}${FILE}/.config			|| return 1
		${SED} -i \
			-e "/CONFIG_INITRAMFS_COMPRESSION/d" \
			-e "s|^.*(CONFIG_INITRAMFS_SOURCE)[^_].*$|${INITRAMFS_CONFIG}|g" \
										${TARGET}${FILE}/.config			|| return 1
		safe_make -C ${TARGET}${FILE}					olddefconfig					|| return 1
		${RSYNC_U} ${TARGET}${FILE}/.config				${TARGET}${ARCDIR}/${NEXT}.initramfs		|| return 1
		${GREP} "CONFIG_(KERNEL|INITRAMFS|RD)_"				${TARGET}${ARCDIR}/${NEXT}.initramfs		|| return 1
		diff ${DIFF_OPTS} ${TARGET}${ARCDIR}/${NEXT}			${TARGET}${ARCDIR}/${NEXT}.initramfs		| ${GREP} "^[-+]" #>>> || return 1
		${RM}								${TARGET}${FILE}/usr/initramfs_data.cpio*	|| return 1
		safe_make -C ${TARGET}${FILE}					bzImage						|| return 1
#>>>		${RSYNC_U} -L ${TARGET}${FILE}/arch/x86/boot/bzImage		{TARGET}/${_FINAL}/${_RAMFS}.kernel		|| return 1
		${RSYNC_U} -L ${TARGET}${FILE}/arch/x86_64/boot/bzImage		${TARGET}/${_FINAL}/${_RAMFS}.kernel		|| return 1
	fi
	return 0
}

function _release_ramfs {						#{reset}
	if [[ ${1} == --reset ]]; then
		shift
		_release_reset						|| return 1
	fi
	_release_prep							|| return 1
	release_ramfs_packages						|| return 1
	release_ramfs_cpio						|| return 1
	release_ramfs_kernel						|| return 1
	echo -en "\n"; ${LL}						\
				${TARGET}/				\
				${TARGET}/${_FINAL}*			\
									2>/dev/null #>>> || return 1
	echo -en "\n"; ${DU} -ms --dereference --one-file-system	\
				${TARGET}${FILE}/usr/initramfs_data.*	\
				${TARGET}/${_FINAL}/${_RAMFS}*		\
									2>/dev/null #>>> || return 1
	return 0
}

########################################

function release_tar {
	FILE="${1}" && shift
	if [[ ! -f ${FILE}.tar.xz ]] && [[ -d ${FILE} ]]; then
		tar -cvv --xz -C $(dirname ${FILE}) -f ${FILE}.tar.xz $(basename ${FILE}) \
			|| return 1
	fi
	return 0
}

function release_untar {
	FILE="${1}" && shift
	if [[ -f ${FILE}.tar.xz ]] && [[ ! -d ${FILE} ]]; then
		tar -vvx --xz -C $(dirname ${FILE}) -f ${FILE}.tar.xz \
			|| return 1
	fi
	return 0
}

function _release_unpack {
	release_untar ${TARGET}${REPDIR}	|| return 1
	release_untar ${TARGET}/usr/src/linux	|| return 1
	return 0
}

################################################################################

function _publish_daily {
	_publish_gitdir	|| return 1
#>>>	_publish_export	|| return 1
#>>>	_publish_grub	|| return 1
	_publish_upload	|| return 1
	return 0
}

########################################

function _publish_release {
	_publish_gitdir	|| return 1
	_publish_export	|| return 1
	_publish_grub	|| return 1
	_publish_upload	|| return 1
	return 0
}

########################################

function _publish_gitdir {
#>>>	if [[ -x $(which task 2>/dev/null) ]]; then
#>>>		declare FILE="${GIT} --git-dir=${_DOCDIR}.git --work-tree=${_DOCDIR}"
#>>>		declare NEXT="Automated update of \"TODO.md\" tasks list."
#>>>		task zoom	project:geek.gary-os >${_DOCDIR}/TODO.md	|| return 1
#>>>		${FILE} add	TODO.md						#>>> || return 1
#>>>		${FILE} commit	--message="${NEXT}" TODO.md			#>>> || return 1
#>>>	fi
	function git-export-preprocess {
		${SED} -i "s%^(From[:][ ]).+%\1${_AUTHOR}%g"							"${@}"	|| return 1
		${SED} -i "N;N;s%^(Subject[:][ ])[[]git-backup[^[]+[[](.+)[]]%\1(RELEASE:\2)%g"			"${@}"	|| return 1
		${SED} -i "N;N;s%^(From 444e47c253085ed084c4069e53505113b39619da.+Date[:][ ].+)-0800%\1+0000%g"	"${@}"	|| return 1
		return 0
	}
	function git-export-postprocess {
		NEXT="0"
		for FILE in $(
			git-list --reverse | ${GREP} "RELEASE" | ${GREP} -o "[a-z0-9]{40}[ ]"
		); do
			${GIT} tag --force ${RELEASE[${NEXT}]} ${FILE}				|| return 1
			NEXT="$((${NEXT}+1))"							|| return 1
		done
		return 0
	}
	git-export ${_TITLE} ${_RELDIR} ${_GITHUB}						\
		+git-export-preprocess +git-export-postprocess					\
		${_TITLE}:${_DOCDIR}:								\
		_${_TITLE}:${_SAVDIR}:${CMTFIL}^_commit^_config.\*^_packages.\*			\
		setup:/.g/_data/zactive/.setup:gentoo^linux					\
		static:/.g/_data/zactive/.static:.bashrc^scripts/grub.sh^scripts/metro.sh	\
												|| return 1
	FILE="git --git-dir=/home/git/p/${_TITLE}/code.git config"
	NEXT=
	NEXT+="${FILE} --unset receive.denynonfastforwards;"
	NEXT+="${FILE} --list;"
	NEXT+="exit 0;"
	echo -en "${NEXT}\n" | ssh ${_SFRSSH}							|| return 1
	${GIT} --git-dir=${_RELDIR}/.${_TITLE}.git --work-tree=${_RELDIR}/.${_TITLE}		\
		push --mirror ${_SFCODE}							|| return 1
	return 0
}

########################################

declare FILELIST="
	.${_TITLE}-
	${_TITLE}-
	portage-
	stage3-
"

function publish_export_filelist {
	declare FILE="${1}" && shift
	${LS} -d $(
		for NEXT in ${FILELIST}; do
			echo -en " ${FILE}/${NEXT}*"
		done
	) 2>/dev/null \
		|| return 1
	return 0
}

function publish_export_gitbackup {
	declare GDIR="${1}" && shift
	declare HASH="${1}" && shift
	FILE="$(
		for NEXT in ${FILELIST}; do
			(set -o pipefail;
				$(which git) --git-dir=${GDIR}.git --work-tree=${GDIR}	\
				ls-tree ${HASH}						\
					2>/dev/null					\
					| awk '{print $4;}'				\
					| ${GREP} "^${NEXT}"				\
			)								2>/dev/null
		done
	)"
	if [[ -n ${FILE} ]]; then
		(cd ${_OUTDIR} && git-backup -r ${HASH} ${FILE})			|| return 1
	fi
	FILE="$(realpath --canonicalize-missing --relative-to ${GDIR} $(
		find ${GDIR}/.${_TITLE}-*/ ${GDIR}/${_TITLE}-*/ -mindepth 1 -maxdepth 1	2>/dev/null
	) 2>/dev/null)"
	if [[ -n ${FILE} ]]; then
		(cd ${_OUTDIR} && git-backup -r ${HASH} ${FILE})			|| return 1
	fi
	return 0
}

function publish_export_underscore {
	FILE="${1}" && shift
	${RSYNC_U} -L \
		${_OUTDIR}/.${_TITLE}-*/_$(basename ${FILE})/ \
		${_OUTDIR}/_$(basename ${FILE}) \
		|| return 1
	${RM} $(realpath --canonicalize-missing \
		${_OUTDIR}/.${_TITLE}-*/_$(basename ${FILE})
	)
	return 0
}

function publish_export_checksum {
	for FILE in "${@}"; do
		declare CHECKDIR="$(dirname ${FILE})"
		declare CHECKFIL="$(basename ${FILE})"
		declare CHECKSUM="${FILE}.hash.txt"
		if [[ -f ${CHECKDIR}/${CHECKFIL} ]]; then
			(set -o pipefail;
				(cd ${CHECKDIR}					&&
					sha256sum --tag		${CHECKFIL}	&&
					md5sum --tag		${CHECKFIL}	&& true
				) 2>&1 | tee			${CHECKSUM}	&& true
			)							|| return 1
			touch -r ${CHECKDIR}/${CHECKFIL}	${CHECKSUM}	|| return 1
		fi
	done
	return 0
}

function _publish_export {
	${MKDIR} ${_OUTDIR}										|| return 1
	${RM} ${_OUTDIR}.git										|| return 1
	${LN} ${_SAVDIR}.git ${_OUTDIR}.git								|| return 1
	declare INDEX=
	for INDEX in $(
		eval echo -en "{0..$((${#RELEASE[*]}-1))}"
	); do
		if [[ -n ${RELEASE[${INDEX}]} ]] && [[ -n ${CMTHASH[${INDEX}]} ]]; then
			echo -en "\n[ ${RELEASE[${INDEX}]} :: ${CMTHASH[${INDEX}]} ]\n"
		else
			continue
		fi
		publish_export_gitbackup ${_OUTDIR} ${CMTHASH[${INDEX}]}				|| return 1
		if [[ -d $(${LS} -d ${_OUTDIR}/.${_TITLE}-* 2>/dev/null) ]]; then
			if [[ ${RELEASE[${INDEX}]} == ${RELEASE[-1]} ]]; then
				publish_export_underscore ${DSTDIR}					|| return 1
				publish_export_underscore ${PAKDIR}					|| return 1
			fi
			${RSYNC_U} -L $(publish_export_filelist ${_OUTDIR}/.${_TITLE}-*) ${_OUTDIR}/	|| return 1
			${RM} $(realpath --canonicalize-missing $(
				publish_export_filelist ${_OUTDIR}/.${_TITLE}-*
			))										|| return 1
			until [[ -z $(find ${_OUTDIR} -type d -empty) ]]; do
				${RM} $(find ${_OUTDIR} -type d -empty)					|| return 1
			done
			${RM} ${_OUTDIR}/.${_TITLE}-*							|| return 1
		fi
		(cd ${_OUTDIR} && publish_export_checksum $(publish_export_filelist .))			|| return 1
		${MKDIR} ${_OUTDIR}/${RELEASE[${INDEX}]}						|| return 1
		${RSYNC_U} -L $(publish_export_filelist ${_OUTDIR}) ${_OUTDIR}/${RELEASE[${INDEX}]}/	|| return 1
		${RM} $(publish_export_filelist ${_OUTDIR})						|| return 1
		touch -r $(
			${LS} -t ${_OUTDIR}/${RELEASE[${INDEX}]}/*.kernel 2>/dev/null			|
			head -n1
		) ${_OUTDIR}/${RELEASE[${INDEX}]}							|| return 1
	done
	${RM} ${_OUTDIR}.git										|| return 1
	${RM} ${_OUTDIR}/+index*									|| return 1
	${GIT} --git-dir=${_SAVDIR}.git --work-tree=${_SAVDIR} reset					|| return 1
	for INDEX in ${RELEASE[*]}; do
		for NEXT in $(
			${LS} ${_OUTDIR}/${INDEX}/*.{kernel,initrd} 2>/dev/null
		); do
			declare OUTFILE="$(
				echo -en "$(basename ${NEXT})" |
				${SED} \
					-e "s%^stage3%${_TITLE}%g" \
					-e "s%[a-z0-9]{40}[.][0-9][.]tar[.]xz%${INDEX}%g"
			)"										|| return 1
			${RSYNC_U} ${NEXT} ${_OUTDIR}/${OUTFILE}					|| return 1
			publish_export_checksum ${_OUTDIR}/${OUTFILE}					|| return 1
		done
	done
	return 0
}

########################################

function _publish_grub {
	FILE="${_OUTDIR}/${_TITLE}.grub"
	${RM}		${FILE}*				|| return 1
	${MKDIR}	${FILE}					|| return 1
	(cd ${FILE} &&	${HOME}/scripts/grub.sh)		|| return 1
	release_tar	${FILE}					|| return 1
	${MV}		${FILE}.tar.xz ${FILE}.${_RDATE}.tar.xz	|| return 1
	${RM}		${FILE}					|| return 1
	return 0
}

########################################

function _publish_upload {
	for FILE in \
		README.md \
		LICENSE.md \
	; do
		${RSYNC_U} -L		${_GREPO}/${FILE} ${_OUTDIR}/			|| return 1
	done
#>>>	${MKDIR}			${_OUTDIR}/$(basename ${ARTDIR})		|| return 1
#>>>	${RSYNC_U} -L ${ARTDIR}/	${_OUTDIR}/$(basename ${ARTDIR})		|| return 1
	find				${_OUTDIR} -type d -exec chmod 755 {} \;	|| return 1
	find				${_OUTDIR} -type f -exec chmod 644 {} \;	|| return 1
	chown -R root:root		${_OUTDIR}					|| return 1
	${RSYNC_U}			${_OUTDIR}/ ${_SFFILE}				|| return 1
	${LL} -R			${_OUTDIR}					|| return 1
	return 0
}

#>>>exit 0
################################################################################
# end of file
################################################################################

#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

#NOTE: SCRIPT NAME AND FUNCTION NAMES (${PREPIT}, ${MAKEIT}, ${SHIPIT}) MUST MATCH FOR "_SYSTEM" WRAPPING TO WORK
#NOTE: UPDATE "#SETTINGS" LINES IN "_SYSTEM" SCRIPT WHEN THESE VAIABLES CHANGE

export _TITLE="gary-os"
export _VERSN="v4.0"
export _RDATE="$(date --iso=date)"

export _FINAL="${TARGET/%\/}/.${_TITLE}-${ESUB}"
export _RAMFS="${_FINAL}/${_TITLE}-${ESUB}-${_VERSN}"
export _GINST="${TARGET/%\/}/.install"

#note: the "$_GPACK" extension is for the root filesystem
#note: the "$_RPACK" file is for the repository
export _GPACK=".packages.txt"
export _RPACK="_packages"

########################################

#>>> if [[ ${TARGET} == / ]]; then
#>>> 	_TITLE="${_TITLE}-custom"
#>>> fi

########################################

declare LDIR="/usr/src/linux"

declare KVER=
declare KCFG=
declare KBAS=
declare KDIR=
declare KFIL=
for FILE in ${KERNEL}; do
	KVER="${FILE}"
	KCFG="config-gentoo64-${KVER}"
	KBAS="linux-${KVER}-gentoo"
	KDIR="/usr/src/${KBAS}"
	KFIL="/boot/kernel-genkernel-x86_64-${KVER}-gentoo"
done

########################################

declare CMTFIL="_commit"
declare COMMIT=
for FILE in \
	${_TITLE} \
	.setup \
	.static \
; do
	NEXT="$(cat /.g/_data/zactive{,/coding}/${FILE}.git/refs/heads/master 2>/dev/null)"
	if [[ -n "${NEXT}" ]]; then
		COMMIT="${COMMIT}${FILE}: ${NEXT}\n"
	fi
done

################################################################################

declare _AUTHOR="Gary B. Genett <me@garybgenett.net>"
declare _LOGIN="garybgenett"

declare _GITHUB="ssh://git@github.com/${_LOGIN}/${_TITLE}.git"
declare _SFCODE="ssh://${_LOGIN}@git.code.sf.net/p/${_TITLE}/code"
declare _SFFILE="${_LOGIN}@web.sourceforge.net:/home/frs/project/${_TITLE}"
declare _SFRSSH="${_LOGIN},${_TITLE}@shell.sourceforge.net create"

declare _G_REPO="/.g/_data/_builds/.${_TITLE}/.${_TITLE}"
declare _DOCDIR="/.g/_data/zactive/coding/${_TITLE}"
declare _SAVDIR="/.g/_data/_builds/_${_TITLE}"
declare _RELDIR="$(dirname ${_G_REPO})"
declare _OUTDIR="${_RELDIR}.release"

declare -a RELEASE=
declare -a CMTHASH=
RELEASE[0]="v0.1"; CMTHASH[0]="4d1b46b02798a1d3d3421b1c8087d80a80012a53"
RELEASE[1]="v0.2"; CMTHASH[1]="99c1bafbf1116c1400705803da45e1ac03f3d492"
RELEASE[2]="v0.3"; CMTHASH[2]="6e968d212ea62a1054e3cafa2436b6a98cf8776b"
RELEASE[3]="v1.0"; CMTHASH[3]="f6885f3482b95fe15a688135c441f8f6391c9529"
RELEASE[4]="v1.1"; CMTHASH[4]="9b653e64164e68873333043b41f8bbf23b0fbd55"
RELEASE[5]="v2.0"; CMTHASH[5]="deda452a0aab311f243311b48a39b7ac60ab3fd8"
RELEASE[6]="v3.0"; CMTHASH[6]="35141e1e20259d7d1c2f4b143c6ae4505d7d5045"

################################################################################

function common_exists {
	declare SRC_FUNC="${1}" && shift
	echo -en "\n"
	echo -en ">>> THE OUTPUT FILES OF (${SRC_FUNC}) SEEM TO ALREADY EXIST <<<\n"
	echo -en ">>> OR THE REQUIRED DIRECTORIES OR FILES ARE MISSING <<<\n"
	echo -en "\n"
	${LL} -d "${@}"
	echo -en "\n"
	return 0
}

########################################

function common_tar {
	declare SRC_FILE="${1}" && shift
	if [[ ! -f ${SRC_FILE}.tar.xz ]] && [[ -d ${SRC_FILE} ]] && [[ ! -L ${SRC_FILE} ]]; then
		tar -cvv --xz -C $(dirname ${SRC_FILE}) -f ${SRC_FILE}.tar.xz $(basename ${SRC_FILE}) \
			|| return 1
	else
		common_exists ${FUNCNAME} ${SRC_FILE}.tar.xz ${SRC_FILE} \
			|| return 1
	fi
	return 0
}

########################################

function common_untar {
	declare SRC_FILE="${1}" && shift
	if [[ -f ${SRC_FILE}.tar.xz ]] && [[ ! -d ${SRC_FILE} ]] && [[ ! -L ${SRC_FILE} ]]; then
		tar -vvx --xz -C $(dirname ${SRC_FILE}) -f ${SRC_FILE}.tar.xz \
			|| return 1
	else
		common_exists ${FUNCNAME} ${SRC_FILE}.tar.xz ${SRC_FILE} \
			|| return 1
	fi
	return 0
}

################################################################################

#NOTE: CONSULT THE "SYSTEM INSTALLATION" TABLE IN "README" FOR THIS SECTION

declare FINDMNT="findmnt --noheadings --output TARGET --target"

#note: this is called statically in the "_system" script
#note: cross-reference with the "release_install" function any time this changes
function _release_reset {	#{main}
	if [[ ${TARGET} != / ]]; then
		${RM} ${TARGET}/{.,_}${_TITLE}*		|| return 1
	fi
	if [[ $(${FINDMNT} ${_FINAL}) != ${_FINAL} ]] && [[ ! -L ${_FINAL} ]]; then
		${RM} ${_FINAL}*			|| return 1
	else
		${RM} ${_RAMFS}*			|| return 1
	fi
	if [[ ${TARGET} != / ]] && [[ ${TARGET} != ${_GINST} ]]; then
		${RM} ${TARGET}/boot/_null.kernel	|| return 1
		${RM} ${TARGET}${LDIR}			|| return 1
		${RM} ${TARGET}${LDIR}.tar.xz		|| return 1
		${LN} ${KBAS} ${TARGET}${LDIR}		|| return 1
	fi
	_prepare_config --reset				|| return 1
	return 0
}

################################################################################

function _prepare_build {	#{reset}
	if [[ ${1} == --reset ]]; then
		shift
		_release_reset	|| return 1
	fi
	_prepare_config		|| return 1
	_prepare_docdir		|| return 1
	_prepare_linux		|| return 1
	_prepare_packages	|| return 1
	_prepare_symlink	|| return 1
	return 0
}

########################################

function prepare_config_issue {
	for FILE in \
		"GaryOS Version|${_VERSN}" \
		"Release Date|${_RDATE}" \
		"Funtoo Commit|${FUNTOO}" \
		"Linux Kernel|${KVER}" \
	; do
		declare KEY="$(echo "${FILE}" | ${SED} "s|^(.+)[|](.+)$|\1|g")"
		declare VAL="$(echo "${FILE}" | ${SED} "s|^(.+)[|](.+)$|\2|g")"
		${SED} -i \
			-e "s|^(.*${KEY}[:].*[0-9]m).*$|\1 ${VAL}|g" \
			${ARTDIR}/issue \
			|| return 1
	done
	${RSYNC_C} -L ${ARTDIR}/issue ${TARGET}/etc/issue \
		|| return 1
	if
	[[ -z ${COMMIT} ]] ||
	[[ ${_PKG} != ${GOSPKG} ]] ||
	[[ ${TARGET} == / ]]
	then
		FILE=" "
#>>>		FILE+="\\\e[1;45;37m"
		FILE+="\\\e[0;35m"
		FILE+="PLEASE NOTE THAT THIS BUILD HAS BEEN CUSTOMIZED AND IS NOT AN OFFICIAL RELEASE"
#>>>		FILE+="\\\e[1;40;30m"
		FILE+="\\\e[0;37m"
		${SED} -i "/Some helpful notes/,/More information/c\\${FILE}" \
			${TARGET}/etc/issue \
			|| return 1
	fi
	${SED} \
		-e "s|[\]e[[]([0-9]+[;])?[0-9]+[;][0-9]+m||g" \
		-e "/^[\][a-z]/d" \
		${TARGET}/etc/issue >${TARGET}/etc/motd \
		|| return 1
	return 0
}

function prepare_config_restore {
	declare RESET= ; if [[ ${1} == --reset ]]; then RESET="${1}" && shift; fi
	declare PACK="${1}" && shift
	declare PFIL="${1}" && shift
	declare PSRC="${1}" && shift
	FILE="$(ls ${TARGET}${PAKDIR}/${PACK}-[.0-9]*.tbz2 2>/dev/null | sort | tail -n1)"
	if {
		[[ -n ${PACK} ]] &&
		[[ -f ${FILE} ]]
	}; then
		echo -en "\n"
		echo -en ">>> RESTORING (${PFIL}) FROM (${PACK}) PACKAGE FILE <<<\n"
		echo -en "\n"
		NEXT=".${PFIL}"
		if [[ -n ${PSRC} ]]; then
			NEXT="$(tar -t --bzip2 --wildcards -f ${FILE} "*/${PSRC}" | sort | tail -n1)"
			if [[ -z ${NEXT} ]]; then
				return 1
			fi
		fi
		tar -vvx --bzip2 -C ${TARGET} -f ${FILE} ${NEXT}		|| return 1
		if [[ -n ${PSRC} ]]; then
			NEXT="${NEXT/#.}"
			if [[ -n $(file ${TARGET}${NEXT} | ${GREP} "bzip2") ]]; then
				bzip2 -cd ${TARGET}${NEXT} >${TARGET}${PFIL}	|| return 1
			else
				${RSYNC_U} ${TARGET}${NEXT} ${TARGET}${PFIL}	|| return 1
			fi
		fi
		${RSYNC_U} ${TARGET}${PFIL} ${TARGET}${PFIL}.${_TITLE}		|| return 1
	elif {
		[[ -f ${PFIL}.${_TITLE} ]]
	}; then
		echo -en "\n"
		echo -en ">>> RESTORING (${PFIL}) FROM (${PFIL}.${_TITLE}) BACKUP FILE <<<\n"
		echo -en "\n"
		${RSYNC_U} ${TARGET}${PFIL}.${_TITLE} ${TARGET}${PFIL}		|| return 1
	elif {
		[[ -n $(${GREP} "^${PACK}$" ${TARGET}${ETCDIR}/sets/${_PKG}) ]] ||
		[[ -n $(safe_env equery list '*' 2>&1 | ${GREP} "^${PACK}-[0-9]") ]]
	}; then
		echo -en "\n"
		echo -en ">>> NO (${PACK}) PACKAGE FILE OR (${PFIL}.${_TITLE}) BACKUP FILE <<<\n"
		echo -en ">>> BUT THERE IS A (${PACK}) ENTRY IN THE (${_PKG}) SET OR IT IS INSTALLED <<<\n"
		echo -en ">>> LEAVING (${PFIL}) ALONE <<<\n"
		echo -en "\n"
	else
		echo -en "\n"
		echo -en ">>> NO (${PACK}) PACKAGE FILE OR (${PFIL}.${_TITLE}) BACKUP FILE <<<\n"
		echo -en ">>> NO (${PACK}) ENTRY IN THE (${_PKG}) SET AND IT IS NOT INSTALLED <<<\n"
		echo -en ">>> REMOVING (${PFIL}) FILE <<<\n"
		echo -en "\n"
		${RM} ${TARGET}${PFIL}						|| return 1
	fi
	if [[ -n ${RESET} ]]; then
		${RM} ${TARGET}${PFIL}.${_TITLE}				|| return 1
	fi
	return 0
}

#NOTE: UPDATE THE "SYSTEM INSTALLATION" TABLE IN "README" WHEN MAKING CHANGES HERE

#note: this is called statically in the "_system" script
function _prepare_config {	#{reset}
	declare RESET= ; if [[ ${1} == --reset ]]; then RESET="${1}" && shift; fi
	#note: these are from the "prepare_config_issue" function above
	prepare_config_restore ${RESET} sys-apps/baselayout			/etc/issue				|| return 1
	prepare_config_restore ${RESET} ""					/etc/motd				|| return 1
	#note: these are all directly below
	prepare_config_restore ${RESET} ""					/init					|| return 1
	prepare_config_restore ${RESET} sys-apps/baselayout			/etc/fstab				fstab			|| return 1
	prepare_config_restore ${RESET} sys-apps/openrc				/etc/conf.d/hostname			|| return 1
	prepare_config_restore ${RESET} ""					/etc/profile.d/setterm.sh		|| return 1
	prepare_config_restore ${RESET} net-wireless/wpa_supplicant		/etc/wpa_supplicant/wpa_supplicant.conf	wpa_supplicant.conf.bz2	|| return 1
	prepare_config_restore ${RESET} net-misc/openssh			/etc/ssh/sshd_config			|| return 1
	prepare_config_restore ${RESET} ""					/etc/env.d/90xsession			|| return 1
	prepare_config_restore ${RESET} x11-wm/dwm				/etc/X11/Sessions/dwm			|| return 1
	if [[ -n ${RESET} ]]; then
		return 0
	fi
	echo "${RCUPDT}" | tr ';' '\n' | while read -r FILE; do
		eval safe_env							${FILE}					|| return 1
	done
	prepare_config_issue												|| return 1
	${LN} sbin/init								${TARGET}/init				|| return 1
	${SED} -i "s|^([^#].+)$|#\1|g"						${TARGET}/etc/fstab			|| return 1
	${SED} -i "s|^(hostname=[\"]?)[^\"]+([\"]?)$|\1${_TITLE}\2|g"		${TARGET}/etc/conf.d/hostname		|| return 1
	echo -en "setterm -blength 0\n"						>${TARGET}/etc/profile.d/setterm.sh	|| return 1
	${RSYNC_C} -L ${ARTDIR}/wpa_supplicant.conf				${TARGET}/etc/wpa_supplicant/		|| return 1
	${SED} -i "s|^.*(PermitRootLogin).*$|\1 yes|g"				${TARGET}/etc/ssh/sshd_config		|| return 1
	echo -en "XSESSION=\"${WINMGR}\"\n"					>${TARGET}/etc/env.d/90xsession		|| return 1
	FILE=														|| return 1
		FILE+="xset -b\n"											|| return 1
		FILE+="xsetroot -mod 3 3 -fg '#000000' -bg '#404040'\n"							|| return 1
	${SED} -i													\
		-e "/xset[ ][-]b/d"											\
		-e "/xsetroot[ ][-]mod/d"										\
		-e "s|^(exec.*dwm.*)$|${FILE}\1|g"									\
										${TARGET}/etc/X11/Sessions/dwm		|| return 1
	${SED} -i "s|^(.*xsetroot[ ][-]name[ ]).*$|\1\"${WMHELP}\"|g"		${TARGET}/etc/X11/Sessions/dwm		|| return 1
	safe_env								/usr/sbin/env-update			|| return 1
	echo -en "${_TITLE}\n${_TITLE}\n" | safe_env				/usr/bin/passwd root			|| return 1
	return 0
}

########################################

function _prepare_docdir {
	if [[ ${TARGET} == / ]]; then
#>>>		${RM}				${TARGET}/.${_TITLE}		|| return 1
		${RM}				${TARGET}/.${_TITLE}.git	|| return 1
		return 0
	fi
	if [[ ! -d ${_G_REPO} ]] || [[ ! -d ${_G_REPO}.git ]]; then
#>>>		${RM}				${TARGET}/.${_TITLE}		|| return 1
		${RM}				${TARGET}/.${_TITLE}.git	|| return 1
		return 0
	fi
	${RSYNC_U} ${_G_REPO}/			${TARGET}/.${_TITLE}		|| return 1
#>>>	${RSYNC_U} ${_G_REPO}.git/		${TARGET}/.${_TITLE}.git	|| return 1
	${RM}					${TARGET}/.${_TITLE}.git	|| return 1
#>>>	${SED} -i "/worktree[ ][=]/d"		${TARGET}/.${_TITLE}.git/config	|| return 1
#>>>	${LN} ../.${_TITLE}.git			${TARGET}/.${_TITLE}/.git	|| return 1
#>>>	echo -en "gitdir: ../.${_TITLE}.git\n"	>${TARGET}/.${_TITLE}/.git	|| return 1
	return 0
}

########################################

function _prepare_linux {
	if [[ ${TARGET} == / ]]; then
		if [[ ! -d ${TARGET}${LDIR} ]]; then
			${RM}						${TARGET}${LDIR}		|| return 1
			common_untar					${TARGET}${LDIR}		|| return 1
		fi
		return 0
	fi
	if [[ ! -d ${TARGET}${LDIR} ]] || [[ -L ${TARGET}${LDIR} ]]; then
		${RM}							${TARGET}${LDIR}		|| return 1
#>>>		safe_make -C ${TARGET}${KDIR}								\
#>>>			INSTALL_HDR_PATH="${TARGET}${LDIR}"		headers_install			|| return 1
		${RSYNC_U}										\
			--delete-excluded								\
			--filter="-_/.tmp**"								\
			--filter="-_/usr/initramfs_data.cpio**"						\
			${TARGET}${KDIR}/				${TARGET}${LDIR}		|| return 1
	fi
	if [[ ! -f ${TARGET}/boot/_null.kernel ]]; then
		safe_make -C ${TARGET}${LDIR}				distclean			|| return 1
		safe_make -C ${TARGET}${LDIR}				allnoconfig bzImage		|| return 1
		${RSYNC_U} -L ${TARGET}${LDIR}/arch/x86/boot/bzImage	${TARGET}/boot/_null.kernel	|| return 1
	fi
	if [[ ! -f ${TARGET}${LDIR}.tar.xz ]]; then
		safe_make -C ${TARGET}${LDIR}				distclean			|| return 1
		${RSYNC_U} ${TARGET}${ARCDIR}/${KCFG}			${TARGET}${LDIR}/.config	|| return 1
		safe_make -C ${TARGET}${LDIR}				modules_prepare			|| return 1
		common_tar						${TARGET}${LDIR}		|| return 1
	fi
	return 0
}

########################################

function _prepare_packages {
	if [[ ${TARGET} == / ]]; then
		${RM} ${TARGET}/.${_TITLE}${_GPACK}								|| return 1
		return 0
	fi
	cat /dev/null >${TARGET}/.${_TITLE}${_GPACK}								|| return 1
	NEXT=
	for FILE in $(
		cd ${TARGET}${PAKDIR}										&&
		find ./ -mindepth 2 -maxdepth 2 -type f								|
			${SED} "s|^[.][/]||g"									|
			sort -u
	); do
		NEXT+=" ${FILE}"
	done
	for FILE in ${NEXT}; do
		declare PKG_DB="$(cd ${TARGET}${PDBDIR} && ${LS} -d ${FILE/%.tbz2}	2>/dev/null)"		|| return 1
		declare PKG_DU="$(cd ${TARGET}${PAKDIR} && ${DU} -ks ${FILE}		2>/dev/null)"		|| return 1
		if [[ -n ${PKG_DB} ]]; then
			echo -en "${PKG_DU} (installed)\n"	| tee -a ${TARGET}/.${_TITLE}${_GPACK}		|| return 1
		else
			echo -en "${PKG_DU} (packaged)\n"	| tee -a >>${TARGET}/.${_TITLE}${_GPACK}	|| return 1
		fi
	done
	${RSYNC_U} ${TARGET}/.${_TITLE}${_GPACK}		${TARGET}/${_RPACK}				|| return 1
	return 0
}

########################################

function _prepare_symlink {
	if [[ ${TARGET} == / ]]; then
		return 0
	fi
	if [[ -n ${COMMIT} ]]
		#note: also doing this in "_system" script on purpose
		then echo -en "${COMMIT}"			>${TARGET}/${CMTFIL}				|| return 1
		else ${RM}					${TARGET}/${CMTFIL}				|| return 1
	fi
	${MKDIR} ${_FINAL}											|| return 1
	${RM} $(find						${_FINAL} -maxdepth 1 -type l | sort)		|| return 1
	${LN} --relative ${TARGET}${DSTDIR}			${_FINAL}/_$(basename ${DSTDIR})		|| return 1
	${LN} --relative ${TARGET}${PAKDIR}			${_FINAL}/_$(basename ${PAKDIR})		|| return 1
#>>> sort -b -k4
	${LN} --relative ${TARGET}${REPDIR}.git.tar.xz		${_RAMFS}.$(basename ${REPDIR}).git.tar.xz	|| return 1
	${LN} --relative ${TARGET}${REPDIR}.tar.xz		${_RAMFS}.$(basename ${REPDIR}).tar.xz		|| return 1
	${LN} --relative ${TARGET}${LDIR}.tar.xz		${_RAMFS}.linux.tar.xz				|| return 1
	${LN} --relative ${TARGET}${KFIL}			${_RAMFS}.null.kernel				|| return 1
	${LN} --relative ${TARGET}/.${_TITLE}${_GPACK}		${_RAMFS}${_GPACK}				|| return 1
#>>>
	if [[ -f ${TARGET}/boot/_null.kernel ]]; then
		${LN} --relative ${TARGET}/boot/_null.kernel	${_RAMFS}.null.kernel				|| return 1
	fi
	for FILE in ${TARGET}${ARCDIR}/stage3-*.tar.xz; do
		${LN} --relative ${FILE}			${_FINAL}/					|| return 1
	done
	return 0
}

################################################################################

function _release_ramfs {	#{main} #{reset} #{initrd}
	declare RESET= ; if [[ ${1} == --reset ]]; then RESET="${1}" && shift; fi
	declare INITRD= ; if [[ ${1} == --initrd ]]; then INITRD="${1}" && shift; fi
	_prepare_build ${RESET}		|| return 1
	_release_cpio ${INITRD}		|| return 1
	_release_kernel ${INITRD}	|| return 1
	_release_grub			|| return 1
	_release_report			|| return 1
	return 0
}

########################################

function _release_initrd {	#{main} #{reset}
	declare RESET= ; if [[ ${1} == --reset ]]; then RESET="${1}" && shift; fi
	_release_ramfs ${RESET} --initrd \
		|| return 1
	return 0
}

########################################

#note: the "du" command is also used in the "release_kernel_shmem" function, so making them all global
declare CPIO_FILE="${_RAMFS}.cpio"
declare XARGS="xargs --max-procs 0 --max-args 1 --null	--arg-file ${CPIO_FILE}.nul"
declare DU_S="${DU} --summarize --apparent-size		--block-size 1"
declare CPIO_IN="cpio -v --create --format newc --null	--file ${CPIO_FILE}	--directory ${TARGET}"
declare CPIO_OUT="cpio -v --extract			--file ${CPIO_FILE}	--directory ${CPIO_FILE}.dir"
declare XZ="xz -vv --compress --stdout --format xz --check crc32"

#note: this is also used in the "release_install_root" function, so making it global
declare SKIP_DIRS="
/dev
/mnt
/proc
/run
/sys
\
/tmp
/var/cache
/var/lock
/var/log
/var/run
/var/tmp
"

function release_cpio_nul {
	(cd ${TARGET} && eval find ./ -mindepth 1 -xdev \
		\\\( -path ./${CMTFIL}			-prune \\\) -o \
		\\\( -path ./${_FINAL/#${TARGET}\/}	-prune \\\) -o \
		\\\( -path ./${_RAMFS/#${TARGET}\/}\\\*	-prune \\\) -o \
		\\\( -path ./${_RPACK}			-prune \\\) -o \
		\
		\\\( -path .${ARCDIR}\\\*		-prune \\\) -o \
		\\\( -path .${GENDIR}\\\*		-prune \\\) -o \
		\
		\\\( -path .${DSTDIR}			-prune \\\) -o \
		\\\( -path .${PAKDIR}			-prune \\\) -o \
		\\\( -path .${REPDIR}			-prune \\\) -o \
		\\\( -path .${REPDIR}.git\\\*		-prune \\\) -o \
		\
		\\\( -path .${LDIR}			-prune \\\) -o \
		\\\( -path .${LDIR}-\\\*		-prune \\\) -o \
		\
		\\\( -path ./usr/lib/debug		-prune \\\) -o \
		\\\( -path ./usr/lib32/debug		-prune \\\) -o \
		\\\( -path ./usr/lib64/debug		-prune \\\) -o \
		\\\( -path ./usr/src/debug		-prune \\\) -o \
		\
		$(echo "${FSSKIP}" | tr ';' '\n' | while read -r FILE; do	echo "\\( -path .${FILE} -prune \\) -o"; done) \
		$(for FILE in ${SKIP_DIRS}; do					echo "\\( -path .${FILE}/\\* -prune \\) -o"; done) \
	-print0)					>${CPIO_FILE}.nul	|| return 1
	${MKDIR}					${TARGET}/tmp/dev	|| return 1
	realdev						${TARGET}/tmp/dev	|| return 1
	realdev						${TARGET}/dev		|| return 1
	(cd ${TARGET}/tmp && find ./dev -print0)	>>${CPIO_FILE}.nul	|| return 1
	${RM}						${TARGET}/tmp/dev	|| return 1
	return 0
}

function release_cpio_file {
	(cd ${TARGET} && ${XARGS} ${DU_S})	| tee ${CPIO_FILE}.txt	#>>> || return 1
	sort -k4 -u -o ${CPIO_FILE}.txt		${CPIO_FILE}.txt	|| return 1
	cat ${CPIO_FILE}.nul | ${CPIO_IN}				|| return 1
	${RM}					${CPIO_FILE}.nul	|| return 1
	return 0
}

function release_cpio_dir {	#>>> {initrd}
	declare INITRD= ; if [[ ${1} == --initrd ]]; then INITRD="${1}" && shift; fi
	if [[ ${TARGET} != / ]]; then
		${RM}			${CPIO_FILE}.dir	|| return 1
		${MKDIR}		${CPIO_FILE}.dir	|| return 1
		${CPIO_OUT}					|| return 1
	fi
	if [[ ${TARGET} != / ]] || [[ -n ${INITRD} ]]; then
		${XZ} ${CPIO_FILE}	>${CPIO_FILE}.xz	|| return 1
	fi
	return 0
}

function _release_cpio {	#{initrd}
	declare INITRD= ; if [[ ${1} == --initrd ]]; then INITRD="${1}" && shift; fi
	mount_dev_dirs -u				|| return 1
	${MKDIR} ${_FINAL}				|| return 1
	if {
		{ [[ ! -f ${CPIO_FILE}.xz ]]	&& [[ -n ${INITRD} ]]; } ||
		{ [[ ! -f ${CPIO_FILE} ]]	&& [[ -z ${INITRD} ]]; }
	}; then
		release_cpio_nul	${INITRD}	|| return 1
		release_cpio_file	${INITRD}	|| return 1
		release_cpio_dir	${INITRD}	|| return 1
	else
		common_exists ${FUNCNAME} ${CPIO_FILE}*	|| return 1
	fi
	return 0
}

########################################

function release_kernel_config {
	declare LDIR="${1}" && shift
	if [[ ${TARGET} == / ]]; then	${RSYNC_U} ${SETDIR}/${LINDIR}/${KCFG}	${TARGET}${LDIR}/.config	|| return 1
	else				${RSYNC_U} ${TARGET}${ARCDIR}/${KCFG}	${TARGET}${LDIR}/.config	|| return 1
	fi
	kernel_cpu								${TARGET}${LDIR}/.config	|| return 1
	return 0
}

function release_kernel_shmem {
	declare LDIR="${1}" && shift
	#note: treating the size of the cpio as the in-memory filesystem size, adding buffer and free disk space, and then rounding pages
	declare SHMEM_PAGES="4096"
	declare SHMEM_MEM="768*(1024^2)"
	declare SHMEM=
	SHMEM="$(${DU_S} ${CPIO_FILE} | ${SED} "s|[[:space:]].*$||g")"
	SHMEM="$(echo "((${SHMEM}+(${SHMEM_MEM}))/${SHMEM_PAGES})" | bc | ${SED} -r "s|[.].*$||g")"
	[[ -f ${TARGET}${LDIR}/mm/shmem.c.${_TITLE} ]] && { ${MV}	${TARGET}${LDIR}/mm/shmem.c{.${_TITLE},}	|| return 1 ;}
	${SED} -i.${_TITLE} "s|totalram_pages[ ][/][ ]2|${SHMEM}|g"	${TARGET}${LDIR}/mm/shmem.c			|| return 1
	${GREP} --after-context=3 "long[ ]shmem_default_max"		${TARGET}${LDIR}/mm/shmem.c			|| return 1
	diff ${DIFF_OPTS}						${TARGET}${LDIR}/mm/shmem.c{.${_TITLE},}	| ${GREP} "^[-+]" #>>> || return 1
	return 0
}

function release_kernel_initramfs {
	declare LDIR="${1}" && shift
	declare INITRAMFS_CONFIG=
	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_SOURCE=\"$(realpath ${CPIO_FILE})\"\n"
#>>>	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_ROOT_GID=0\n"
#>>>	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_ROOT_UID=0\n"
#>>>	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION_NONE=y\n"
	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION_XZ=y\n"
#>>>	INITRAMFS_CONFIG+="CONFIG_INITRAMFS_COMPRESSION=\".xz\"\n"
	${SED} -i \
		-e "/CONFIG_INITRAMFS_COMPRESSION/d" \
		-e "s|^.*(CONFIG_INITRAMFS_SOURCE)[^_].*$|${INITRAMFS_CONFIG}|g" \
								${TARGET}${LDIR}/.config			|| return 1
	${RM}							${TARGET}${LDIR}/usr/initramfs_data.cpio*	|| return 1
	return 0
}

function release_kernel_diff {
	declare LDIR="${1}" && shift
	if [[ ${TARGET} != / ]]; then
		${RSYNC_U} ${TARGET}${LDIR}/.config		${TARGET}${ARCDIR}/${KCFG}.initramfs	|| return 1
		${GREP} "CONFIG_(SHMEM|KERNEL|INITRAMFS|RD)_"	${TARGET}${ARCDIR}/${KCFG}.initramfs	|| return 1
		diff ${DIFF_OPTS} ${TARGET}${ARCDIR}/${KCFG}	${TARGET}${ARCDIR}/${KCFG}.initramfs	| ${GREP} "^[-+]" #>>> || return 1
	fi
	return 0
}

function _release_kernel {	#{initrd}
	declare INITRD= ; if [[ ${1} == --initrd ]]; then INITRD="${1}" && shift; fi
	declare DODIR="${KDIR}"
	if [[ ${TARGET} == / ]]; then
		DODIR="${LDIR}"
	fi
	if [[ -d ${TARGET}${DODIR} ]] && [[ ! -f ${_RAMFS}.kernel ]]; then
		release_kernel_config ${DODIR}						|| return 1
		release_kernel_shmem ${DODIR}						|| return 1
		if [[ -z ${INITRD} ]]; then
			release_kernel_initramfs ${DODIR}				|| return 1
		fi
		release_kernel_diff ${DODIR}						|| return 1
		declare BZIMAGE="${TARGET}${DODIR}/arch/x86/boot/bzImage"		|| return 1
#>>>		declare BZIMAGE="${TARGET}${DODIR}/arch/x86_64/boot/bzImage"		|| return 1
		declare BZ_MAKE="${TARGET}${DODIR}/arch/x86/Makefile"			|| return 1
		declare BZ_SEDR=".+ln -fsn.+/x86/boot/bzImage.+"			|| return 1
		[[ -f ${BZ_MAKE}.${_TITLE} ]] && { ${MV}	${BZ_MAKE}{.${_TITLE},}	|| return 1 ;}
		${SED} -i.${_TITLE} "s|^(${BZ_SEDR})$|\#\1|g"	${BZ_MAKE}		|| return 1
		safe_make -C ${TARGET}${DODIR}			olddefconfig		|| return 1
		safe_make -C ${TARGET}${DODIR}			bzImage			|| return 1
		${RSYNC_U} -L ${BZIMAGE}			${_RAMFS}.kernel	|| return 1
	else
		common_exists ${FUNCNAME} ${TARGET}${DODIR} ${_RAMFS}.kernel		|| return 1
	fi
	return 0
}

########################################

#NOTE: THE "LOOPFILE" NAME MUST MATCH THE "GRUB.SH" SCRIPT

declare RUFUS_URL="https://github.com/pbatard/rufus/releases/download/v3.7/rufus-3.7p.exe"

function _release_grub {
	FILE="${_RAMFS}.grub"
	if [[ ! -f ${FILE}.tar.xz ]] && [[ ! -f ${FILE}.zip ]]; then
		${RM}				${FILE}*		|| return 1
		${MKDIR}			${FILE}			|| return 1
		${HOME}/scripts/grub.sh		${FILE}			|| return 1
		${RM}				${FILE}/_*		|| return 1
		${RM}				${FILE}/*.tar		|| return 1
		${WGET_C} -P			${FILE} ${RUFUS_URL}	|| return 1
#>>>		common_tar			${FILE}			|| return 1
		7z d				${FILE}.zip		|| return 1
		7z a				${FILE}.zip ${FILE}	|| return 1
#>>>		${RM}				${FILE}			|| return 1
	else
		common_exists ${FUNCNAME}	${FILE}*		|| return 1
	fi
	return 0
}

########################################

function _release_report {
	echo -en "\n"; ${LL}						\
				${TARGET}/				\
				${_FINAL}*				\
									2>/dev/null #>>> || return 1
	echo -en "\n"; ${DU} -ms --dereference --one-file-system	\
				${TARGET}${LDIR}/usr/initramfs_data.*	\
				${_RAMFS}*				\
									2>/dev/null #>>> || return 1
	return 0
}

########################################

function _release_unpack {	#{main}
	common_untar ${TARGET}${REPDIR}	|| return 1
	common_untar ${TARGET}${LDIR}	|| return 1
	return 0
}

########################################

#NOTE: CONSULT THE "SYSTEM INSTALLATION" TABLE IN "README" FOR THIS SECTION

#note: compare with the "${_CFG}" option in the "_system" script
#note: cross-reference with the "release_reset" function any time this changes
function release_install_root {
	eval ${RSYNC_U} \
		--one-file-system \
		--filter="-_/[._]${_TITLE}*" \
		--filter="-_/${_TITLE}*" \
		--filter="-_/${_GINST/#${TARGET}\/}" \
		$(for FILE in ${SKIP_DIRS}; do echo "--filter=\"-_${FILE}/*\""; done) \
		${TARGET}/* ${_GINST}/			|| return 1
#>>>		${TARGET}/ ${_GINST}			|| return 1
	realdev ${_GINST}/dev				|| return 1
	TARGET="${_GINST}" _release_reset		|| return 1
	TARGET="${_GINST}" _release_unpack		|| return 1
#>>>	${RM} ${_GINST}/${_TITLE}*			|| return 1
#>>>	${RM} ${_GINST}${REPDIR}*.tar.xz		|| return 1
#>>>	${RM} ${_GINST}${LDIR}.tar.xz			|| return 1
	return 0
}

function release_install_boot {
	declare DEVICE="$(findmnt --noheadings --output SOURCE --target ${_GINST}/boot)"
	mount-robust --dev			${_GINST}			|| return 1
	${RSYNC_U} /usr/lib/grub/i386-pc/	${_GINST}/boot/grub		|| return 1
	chroot ${_GINST} boot-update --verbose					|| return 1
	mount-robust -u --dev			${_GINST}			|| return 1
	${SED} -i \
		-e "s|([[:space:]])[/](kernel\|init)|\1/boot/\2|g" \
		-e "s|(real_root=)[^[:space:]]+|\1${DEVICE} root=${DEVICE}|g" \
						${_GINST}/boot/grub/grub.cfg	|| return 1
	${SED} -i \
		-e "s|^([^#].+)$|#\1|g" \
		-e "s|^(.+)([[:space:]][/][[:space:]])|${DEVICE}\2|g" \
						${_GINST}/etc/fstab		|| return 1
	return 0
}

function _release_install {	#{main}
	if [[ ! -d ${_GINST} ]]; then
		echo -en "\n"
		echo -en ">>> THIS OPTION REQUIRES THAT THE (${_GINST}) INSTALL DIRECTORY EXISTS <<<\n"
		echo -en "\n"
		return 1
	fi
	release_install_root	|| return 1
	release_install_boot	|| return 1
	${LL} ${_GINST}		|| return 1
	return 0
}

################################################################################

function _publish_daily {	#{main}
	_publish_gitdir	|| return 1
#>>>	_publish_export	|| return 1
	_publish_upload	|| return 1
	_publish_report	|| return 1
	return 0
}

########################################

function _publish_release {	#{main}
	_publish_gitdir	|| return 1
	_publish_export	|| return 1
	_publish_upload	|| return 1
	_publish_report	|| return 1
	return 0
}

########################################

function _publish_gitdir {
#>>>	if [[ -x $(which task 2>/dev/null) ]]; then
#>>>		FILE="${GIT} --git-dir=${_DOCDIR}.git --work-tree=${_DOCDIR}"
#>>>		NEXT="Automated update of \"TODO.md\" tasks list."
#>>>		task zoom	project:geek.gary-os >${_DOCDIR}/TODO.md	|| return 1
#>>>		${FILE} add	TODO.md						#>>> || return 1
#>>>		${FILE} commit	--message="${NEXT}" TODO.md			#>>> || return 1
#>>>	fi
	function git-export-preprocess {
		${SED} -i "s%^(From[:][ ]).+%\1${_AUTHOR}%g"							"${@}"	|| return 1
		${SED} -i "N;N;s%^(Subject[:][ ])[[]git-backup[^[]+[[](.+)[]]%\1(RELEASE:\2)%g"			"${@}"	|| return 1
		${SED} -i "N;N;s%^(From 444e47c253085ed084c4069e53505113b39619da.+Date[:][ ].+)-0800%\1+0000%g"	"${@}"	|| return 1
		return 0
	}
	function git-export-postprocess {
		NEXT="0"
		for FILE in $(
			git-list --reverse | ${GREP} "RELEASE" | ${GREP} -o "[a-z0-9]{40}[ ]"
		); do
			${GIT} tag --force ${RELEASE[${NEXT}]} ${FILE}			|| return 1
			NEXT="$((${NEXT}+1))"						|| return 1
		done
		return 0
	}
	declare DOC_FILES=
	declare SAVE_FILES=
	SAVE_FILES+="${CMTFIL}"
	SAVE_FILES+="^_commit"
	SAVE_FILES+="^_config\*"
	SAVE_FILES+="^${_RPACK}"
	SAVE_FILES+="^_packages\*"
	declare SETUP_FILES=
	SETUP_FILES+="gentoo"
	SETUP_FILES+="^linux"
	declare STATIC_FILES=
	STATIC_FILES+=".bashrc"
	STATIC_FILES+="^scripts/grub.sh"
	STATIC_FILES+="^scripts/metro.sh"
	STATIC_FILES+="^scripts/qemu.bsh"
	STATIC_FILES+="^scripts/qemu-network\*"
	eval git-export ${_TITLE} ${_RELDIR} ${_GITHUB}					\
		+git-export-preprocess +git-export-postprocess				\
		${_TITLE}:${_DOCDIR}:${DOC_FILES}					\
		_${_TITLE}:${_SAVDIR}:${SAVE_FILES}					\
		setup:/.g/_data/zactive/.setup:${SETUP_FILES}				\
		static:/.g/_data/zactive/.static:${STATIC_FILES}			\
											|| return 1
	FILE="git --git-dir=/home/git/p/${_TITLE}/code.git config"
	NEXT=
	NEXT+="${FILE} --unset receive.denynonfastforwards;"
	NEXT+="${FILE} --list;"
	NEXT+="exit 0;"
	echo -en "${NEXT}\n" | ssh ${_SFRSSH}						|| return 1
	${GIT} --git-dir=${_RELDIR}/.${_TITLE}.git --work-tree=${_RELDIR}/.${_TITLE}	\
		push --mirror ${_SFCODE}						|| return 1
	return 0
}

########################################

declare FILELIST="
	.${_TITLE}-
	${_TITLE}-
	portage-
	stage3-
"

function publish_export_filelist {
	FILE="${1}" && shift
	${LS} -d $(
		for NEXT in ${FILELIST}; do
			echo -en " ${FILE}/${NEXT}*"
		done
	) 2>/dev/null \
		|| return 1
	return 0
}

function publish_export_gitbackup {
	declare GDIR="${1}" && shift
	declare HASH="${1}" && shift
	FILE="$(
		for NEXT in ${FILELIST}; do
			(set -o pipefail;
				$(which git) --git-dir=${GDIR}.git --work-tree=${GDIR}	\
				ls-tree ${HASH}						\
					2>/dev/null					\
					| awk '{print $4;}'				\
					| ${GREP} "^${NEXT}"				\
			)								2>/dev/null
		done
	)"
	if [[ -n ${FILE} ]]; then
		(cd ${_OUTDIR} && git-backup -r ${HASH} ${FILE})			|| return 1
	fi
	FILE="$(realpath --canonicalize-missing --relative-to ${GDIR} $(
		find ${GDIR}/.${_TITLE}-*/ ${GDIR}/${_TITLE}-*/ -mindepth 1 -maxdepth 1	2>/dev/null
	) 2>/dev/null)"
	if [[ -n ${FILE} ]]; then
		(cd ${_OUTDIR} && git-backup -r ${HASH} ${FILE})			|| return 1
	fi
	return 0
}

function publish_export_underscore {
	FILE="${1}" && shift
	${RSYNC_U} -L \
		${_OUTDIR}/.${_TITLE}-*/_$(basename ${FILE})/ \
		${_OUTDIR}/_$(basename ${FILE}) \
		|| return 1
	${RM} $(realpath --canonicalize-missing \
		${_OUTDIR}/.${_TITLE}-*/_$(basename ${FILE})
	)
	return 0
}

function publish_export_checksum {
	for FILE in "${@}"; do
		declare CHECKDIR="$(dirname ${FILE})"
		declare CHECKFIL="$(basename ${FILE})"
		declare CHECKSUM="${FILE}.hash.txt"
		if [[ -f ${CHECKDIR}/${CHECKFIL} ]]; then
			(set -o pipefail;
				(cd ${CHECKDIR}					&&
					sha256sum --tag		${CHECKFIL}	&&
					md5sum --tag		${CHECKFIL}	&& true
				) 2>&1 | tee			${CHECKSUM}	&& true
			)							|| return 1
			touch -r ${CHECKDIR}/${CHECKFIL}	${CHECKSUM}	|| return 1
		fi
	done
	return 0
}

function _publish_export {
	${MKDIR} ${_OUTDIR}										|| return 1
	${RM} ${_OUTDIR}.git										|| return 1
	${LN} ${_SAVDIR}.git ${_OUTDIR}.git								|| return 1
	declare INDEX=
	for INDEX in $(
		eval echo -en "{0..$((${#RELEASE[*]}-1))}"
	); do
		if [[ -n ${RELEASE[${INDEX}]} ]] && [[ -n ${CMTHASH[${INDEX}]} ]]; then
			echo -en "\n[ ${RELEASE[${INDEX}]} :: ${CMTHASH[${INDEX}]} ]\n"
		else
			continue
		fi
		publish_export_gitbackup ${_OUTDIR} ${CMTHASH[${INDEX}]}				|| return 1
		if [[ -d $(${LS} -d ${_OUTDIR}/.${_TITLE}-* 2>/dev/null) ]]; then
			if [[ ${RELEASE[${INDEX}]} == ${RELEASE[-1]} ]]; then
				publish_export_underscore ${DSTDIR}					|| return 1
				publish_export_underscore ${PAKDIR}					|| return 1
			fi
			${RSYNC_U} -L $(publish_export_filelist ${_OUTDIR}/.${_TITLE}-*) ${_OUTDIR}/	|| return 1
			${RM} $(realpath --canonicalize-missing $(
				publish_export_filelist ${_OUTDIR}/.${_TITLE}-*
			))										|| return 1
			until [[ -z $(find ${_OUTDIR} -type d -empty) ]]; do
				${RM} $(find ${_OUTDIR} -type d -empty)					|| return 1
			done
			${RM} ${_OUTDIR}/.${_TITLE}-*							|| return 1
		fi
		(cd ${_OUTDIR} && publish_export_checksum $(publish_export_filelist .))			|| return 1
		${MKDIR} ${_OUTDIR}/${RELEASE[${INDEX}]}						|| return 1
		${RSYNC_U} -L $(publish_export_filelist ${_OUTDIR}) ${_OUTDIR}/${RELEASE[${INDEX}]}/	|| return 1
		${RM} $(publish_export_filelist ${_OUTDIR})						|| return 1
		touch -r $(
			${LS} -t ${_OUTDIR}/${RELEASE[${INDEX}]}/*.kernel 2>/dev/null			|
			head -n1
		) ${_OUTDIR}/${RELEASE[${INDEX}]}							|| return 1
	done
	${RM} ${_OUTDIR}.git										|| return 1
	${RM} ${_OUTDIR}/+index*									|| return 1
	${GIT} --git-dir=${_SAVDIR}.git --work-tree=${_SAVDIR} reset					|| return 1
	for INDEX in ${RELEASE[*]}; do
		for NEXT in $(
			${LS} ${_OUTDIR}/${INDEX}/*.{kernel,initrd} 2>/dev/null
		); do
			declare OUTFILE="$(
				echo -en "$(basename ${NEXT})" |
				${SED} \
					-e "s%^stage3%${_TITLE}%g" \
					-e "s%[a-z0-9]{40}[.][0-9][.]tar[.]xz%${INDEX}%g"
			)"										|| return 1
			${RSYNC_U} ${NEXT} ${_OUTDIR}/${OUTFILE}					|| return 1
			publish_export_checksum ${_OUTDIR}/${OUTFILE}					|| return 1
		done
	done
	return 0
}

########################################

function _publish_upload {
	for FILE in \
		README.md \
		LICENSE.md \
	; do
		${RSYNC_U} -L		${_G_REPO}/${FILE} ${_OUTDIR}/			|| return 1
	done
#>>>	${MKDIR}			${_OUTDIR}/$(basename ${ARTDIR})		|| return 1
#>>>	${RSYNC_U} -L ${ARTDIR}/	${_OUTDIR}/$(basename ${ARTDIR})		|| return 1
	find				${_OUTDIR} -type d -exec chmod 755 {} \;	|| return 1
	find				${_OUTDIR} -type f -exec chmod 644 {} \;	|| return 1
	chown -R root:root		${_OUTDIR}					|| return 1
	${RSYNC_U}			${_OUTDIR}/ ${_SFFILE}				|| return 1
	return 0
}

########################################

function _publish_report {
	${LL} -R ${_OUTDIR} \
		|| return 1
	return 0
}

#>>> exit 0
################################################################################
# end of file
################################################################################

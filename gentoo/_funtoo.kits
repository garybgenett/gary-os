#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

declare GIT_SOURCE="https://github.com/funtoo"

declare NICELY=

########################################

if [[ -n "${@}" ]]; then
	export REPDIR="${1}" && shift
	export BRANCH="${1}" && shift
	export COMMIT="${1}" && shift
	if [[ -z "${BRANCH}" ]]; then
		BRANCH="next"
	fi
	if [[ -z "${COMMIT}" ]]; then
		COMMIT="master"
	fi
else
	exit 1
fi

################################################################################

function kit_list {
	perl -e '
		use strict;
		use warnings;
		use JSON::XS;
		use Data::Dumper;
		my $debug = "0";
		if ((${ARGV[0]}) && (${ARGV[0]} eq "debug")) {
			$debug = "1";
			shift
		};
		my $repdir = ${ENV{REPDIR}};
		open(INFO, "<", ${repdir} . "/metadata/kit-info.json")	|| die();
		open(SHA1, "<", ${repdir} . "/metadata/kit-sha1.json")	|| die();
		my $info = do { local $/; <INFO> };
		my $sha1 = do { local $/; <SHA1> };
		$info = decode_json(${info});
		$sha1 = decode_json(${sha1});
		close(INFO)	|| die();
		close(SHA1)	|| die();
		if (${debug}) {
			print "INFO: " . Dumper(${info});
			print "SHA1: " . Dumper(${sha1});
		};
		my $release = {};
		foreach my $kit (sort(keys(%{ $info->{"release_defs"} }))) {
			$release->{$kit} = $info->{"release_defs"}{$kit};
		};
		if (${debug}) {
			print "RELEASE: " . Dumper(${release});
		};
		my $order = $info->{"kit_order"};
		foreach my $kit (@{$order}) {
			my $head = $release->{$kit}[0];
			my $hash = $sha1->{$kit}{$head};
			print "${kit}|${head}|${hash}\n";
		};
	' -- "${@}"
	return 0
}

########################################

function fun_git {
	declare REPO_DIR="${1}" && shift
	declare REPO_GIT="${1}" && shift
	declare REPO_HEAD="${1}" && shift
	declare REPO_HASH="${1}" && shift
	declare REPO_NAME="$(basename ${REPO_DIR})"
	declare FUN_OPT="-c branch.autosetuprebase=always -c pull.rebase=true"
	declare FUN_GIT="${GIT} --git-dir=${REPO_GIT} --work-tree=${REPO_DIR} ${FUN_OPT}"
	export GIT_PAGER=
	echo -en "\n[${REPO_NAME} :: ${REPO_HEAD} == ${REPO_HASH}]\n"
	${MKDIR}											$(dirname ${REPO_DIR})	|| return 1
	${MKDIR}											$(dirname ${REPO_GIT})	|| return 1
	if [[ ! -d ${REPO_GIT} ]]; then
		${RM}											${REPO_DIR}*		|| return 1
		${MKDIR}										${REPO_DIR}		|| return 1
		git-clone --verbose ${FUN_OPT} ${GIT_SOURCE}/${REPO_NAME}.git				${REPO_DIR}		|| return 1
	else
		${MKDIR}										${REPO_DIR}		|| return 1
	fi
	if [[ -d	${REPO_DIR}/.git ]] && [[ ! -d							${REPO_GIT} ]]; then
		${MV}	${REPO_DIR}/.git								${REPO_GIT}
	fi
	if [[ -d	${REPO_DIR}.git ]] && [[ ! -d							${REPO_GIT} ]]; then
		${MV}	${REPO_DIR}.git									${REPO_GIT}
	fi
	if [[ -d	${REPO_GIT} ]] && [[ ! -f							${REPO_DIR}/.git ]]; then
		${RM}											${REPO_DIR}/.git
#>>> -L		${LN} --relative ${REPO_GIT}								${REPO_DIR}/.git
		echo -en "gitdir: $(realpath --relative-to=${REPO_DIR} ${REPO_GIT})\n"			>${REPO_DIR}/.git
	fi
	if [[ -d	${REPO_GIT} ]] && [[ ! -f							${REPO_DIR}.git ]]	&& [[ ${REPO_GIT} != ${REPO_DIR}.git ]]; then
		${RM}											${REPO_DIR}.git
#>>> -L		${LN} --relative ${REPO_GIT}								${REPO_DIR}.git
		echo -en "gitdir: $(realpath --relative-to=$(dirname ${REPO_DIR}.git) ${REPO_GIT})\n"	>${REPO_DIR}.git
	fi
	${RM} ${REPO_GIT}/rebase*				|| return 1
	${FUN_GIT} branch --all					|| return 1
	${FUN_GIT} tag --list					|| return 1
	${FUN_GIT} fetch --all					|| return 1
	(
		${FUN_GIT} checkout --force ${REPO_HEAD}	&&
		${FUN_GIT} reset --hard ${REPO_HEAD}		&&
								true
	) || (
		${FUN_GIT} checkout --force master		&&
		${FUN_GIT} reset --hard master			&&
								true
	)							|| return 1
	(
		${FUN_GIT} reset --hard ${REPO_HASH}		||
		${FUN_GIT} reset --hard ${REPO_HEAD}		||
		${FUN_GIT} reset --hard master			||
								false
	)							|| return 1
	(cd ${REPO_DIR} && ${FUN_GIT} clean --force -d)		|| return 1
	${FUN_GIT} branch --all					|| return 1
	${FUN_GIT} status					|| return 1
	(cd ${REPO_DIR} && git-list --max-count=1)		|| return 1
	echo -en "\n[${REPO_NAME} :: complete!]\n"
	return 0
}

################################################################################

fun_git \
	${REPDIR} \
	${REPDIR}.git \
	${BRANCH} \
	${COMMIT} \
	|| exit 1

#>>> kit_list debug
declare KIT_LIST="$(kit_list)"
if [[ -z ${KIT_LIST} ]]; then
	exit 1
fi

for FILE in ${KIT_LIST}; do
	declare RKIT=$(echo "${FILE}" | ${SED} "s/^(.+)[|](.+)[|](.+)$/\1/g")
	declare HEAD=$(echo "${FILE}" | ${SED} "s/^(.+)[|](.+)[|](.+)$/\2/g")
	declare HASH=$(echo "${FILE}" | ${SED} "s/^(.+)[|](.+)[|](.+)$/\3/g")
	fun_git \
		${REPDIR}/kits/${RKIT} \
		${REPDIR}.git/${SCRIPT}/${RKIT}.git \
		${HEAD} \
		${HASH} \
		|| exit 1
done

chown -R portage:portage ${REPDIR}{,.git}

exit 0
################################################################################
# end of file
################################################################################

--- a/grub-core/loader/i386/efi/linux.c
+++ b/grub-core/loader/i386/efi/linux.c
@@ -53,6 +53,65 @@ struct grub_linuxefi_context {
 
 #define BYTES_TO_PAGES(bytes)   (((bytes) + 0xfff) >> 12)
 
+struct allocation_choice {
+    grub_efi_physical_address_t addr;
+    grub_efi_allocate_type_t alloc_type;
+};
+
+static struct allocation_choice max_addresses[] =
+  {
+    { GRUB_EFI_MAX_ALLOCATION_ADDRESS, GRUB_EFI_ALLOCATE_MAX_ADDRESS },
+    { GRUB_EFI_MAX_ALLOCATION_ADDRESS, GRUB_EFI_ALLOCATE_MAX_ADDRESS },
+    { GRUB_EFI_MAX_ALLOCATION_ADDRESS, GRUB_EFI_ALLOCATE_MAX_ADDRESS },
+    { 0, 0 }
+  };
+
+static inline void
+kernel_free(void *addr, grub_efi_uintn_t size)
+{
+  if (addr && size)
+    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)addr,
+			 BYTES_TO_PAGES(size));
+}
+
+static void *
+kernel_alloc(grub_efi_uintn_t size, const char * const errmsg)
+{
+  void *addr = 0;
+  unsigned int i;
+  grub_efi_physical_address_t prev_max = 0;
+
+  for (i = 0; max_addresses[i].addr != 0 && addr == 0; i++)
+    {
+      grub_uint64_t max = max_addresses[i].addr;
+      grub_efi_uintn_t pages;
+
+      if (max == prev_max)
+	continue;
+
+      pages = BYTES_TO_PAGES(size);
+      grub_dprintf ("linux", "Trying to allocate %lu pages from %p\n",
+		    pages, (void *)max);
+
+      prev_max = max;
+      addr = grub_efi_allocate_pages_real (max, pages,
+					   max_addresses[i].alloc_type,
+					   GRUB_EFI_LOADER_DATA);
+      if (addr)
+	grub_dprintf ("linux", "Allocated at %p\n", addr);
+    }
+
+  while (grub_error_pop ())
+    {
+      ;
+    }
+
+  if (addr == NULL)
+    grub_error (GRUB_ERR_OUT_OF_MEMORY, "%s", errmsg);
+
+  return addr;
+}
+
 static grub_err_t
 grub_linuxefi_boot (void *data)
 {
@@ -75,17 +134,13 @@ grub_linuxefi_unload (void *data)
   grub_dl_unref (my_mod);
 
   if (context->initrd_mem)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)context->initrd_mem,
-			 BYTES_TO_PAGES(params->ramdisk_size));
+    kernel_free(context->initrd_mem, params->ramdisk_size);
   if (context->cmdline)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)context->cmdline,
-			 BYTES_TO_PAGES(params->cmdline_size + 1));
+    kernel_free(context->cmdline, params->cmdline_size + 1);
   if (context->kernel_mem)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)context->kernel_mem,
-			 BYTES_TO_PAGES(context->kernel_size));
+    kernel_free(context->kernel_mem, context->kernel_size);
   if (params)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)params,
-			 BYTES_TO_PAGES(16384));
+    kernel_free(params, sizeof(*params));
 
   cmd_initrd->data = 0;
   grub_free (context);
@@ -173,19 +228,13 @@ grub_cmd_initrd (grub_command_t cmd, int argc, char *argv[])
 	}
     }
 
-  initrd_mem = grub_efi_allocate_pages_max (GRUB_EFI_MAX_ALLOCATION_ADDRESS, BYTES_TO_PAGES(size));
-  if (!initrd_mem)
-    initrd_mem = grub_efi_allocate_pages_max (GRUB_EFI_MAX_USABLE_ADDRESS, BYTES_TO_PAGES(size));
-  if (!initrd_mem)
-    {
-      grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("can't allocate initrd"));
-      goto fail;
-    }
-
-  grub_dprintf ("linuxefi", "initrd_mem = %lx\n", (unsigned long) context->initrd_mem);
+  initrd_mem = kernel_alloc(size, N_("can't allocate initrd"));
+  if (initrd_mem == NULL)
+    goto fail;
+  grub_dprintf ("linuxefi", "initrd_mem = %p\n", initrd_mem);
 
   params->ramdisk_size = size;
-  params->ramdisk_image = (grub_uint32_t)(grub_addr_t) initrd_mem;
+  params->ramdisk_image = (grub_uint32_t) (grub_addr_t) initrd_mem; /* FIXME: casts are not in rhboot */
 
   ptr = initrd_mem;
 
@@ -254,7 +303,6 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
   filelen = grub_file_size (file);
 
   kernel = grub_malloc(filelen);
-
   if (!kernel)
     {
       grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("cannot allocate kernel buffer"));
@@ -299,7 +347,7 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
       goto fail;
     }
 
-#if defined(__x86_64__) || defined(__aarch64__)
+#if defined(__x86_64__)
   grub_dprintf ("linuxefi", "checking lh->xloadflags\n");
   if (!(lh->xloadflags & LINUX_XLF_KERNEL_64))
     {
@@ -318,17 +366,9 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
     }
 #endif
 
-  params = grub_efi_allocate_pages_max (GRUB_EFI_MAX_ALLOCATION_ADDRESS,
-					BYTES_TO_PAGES(sizeof(*params)));
+  params = kernel_alloc (sizeof(*params), "cannot allocate kernel parameters");
   if (!params)
-    params = grub_efi_allocate_pages_max (GRUB_EFI_MAX_USABLE_ADDRESS,
-					  BYTES_TO_PAGES(sizeof(*params)));
-  if (! params)
-    {
-      grub_error (GRUB_ERR_OUT_OF_MEMORY, "cannot allocate kernel parameters");
-      goto fail;
-    }
-
+    goto fail;
   grub_dprintf ("linuxefi", "params = %p\n", params);
 
   grub_memset (params, 0, sizeof(*params));
@@ -347,18 +387,10 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
   grub_dprintf ("linuxefi", "new lh is at %p\n", lh);
 
   grub_dprintf ("linuxefi", "setting up cmdline\n");
-  cmdline = grub_efi_allocate_pages_max(GRUB_EFI_MAX_ALLOCATION_ADDRESS,
-					BYTES_TO_PAGES(lh->cmdline_size + 1));
+  cmdline = kernel_alloc (lh->cmdline_size + 1, N_("can't allocate cmdline"));
   if (!cmdline)
-    cmdline = grub_efi_allocate_pages_max(GRUB_EFI_MAX_USABLE_ADDRESS,
-					  BYTES_TO_PAGES(lh->cmdline_size + 1));
-  if (!cmdline)
-    {
-      grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("can't allocate cmdline"));
-      goto fail;
-    }
-
-  grub_dprintf ("linuxefi", "cmdline = %lx\n", (unsigned long)cmdline);
+    goto fail;
+  grub_dprintf ("linuxefi", "linux_cmdline = %p\n", cmdline);
 
   grub_memcpy (cmdline, LINUX_IMAGE, sizeof (LINUX_IMAGE));
   grub_create_loader_cmdline (argc, argv,
@@ -366,33 +398,26 @@ grub_cmd_linux (grub_command_t cmd __attribute__ ((unused)),
 			      lh->cmdline_size - (sizeof (LINUX_IMAGE) - 1),
 			      GRUB_VERIFY_KERNEL_CMDLINE);
 
-  grub_dprintf ("linuxefi", "setting lh->cmd_line_ptr\n");
-  lh->cmd_line_ptr = (grub_uint32_t)(grub_addr_t)cmdline;
+  grub_dprintf ("linuxefi", "cmdline:%s\n", cmdline);
+  grub_dprintf ("linuxefi", "setting lh->cmd_line_ptr to %p\n",
+		cmdline);
+  lh->cmd_line_ptr = (grub_uint32_t) (grub_addr_t) cmdline;
 
   handover_offset = lh->handover_offset;
-  grub_dprintf ("linuxefi", "handover offset: %08x\n", handover_offset);
+  grub_dprintf("linuxefi", "handover_offset: 0x%08x\n", handover_offset);
 
   start = (lh->setup_sects + 1) * 512;
 
-  kernel_size = lh->init_size;
-  kernel_mem = grub_efi_allocate_fixed(lh->pref_address,
-				       BYTES_TO_PAGES(kernel_size));
-
-  if (!kernel_mem)
+  grub_dprintf ("linuxefi", "lh->pref_address: %p\n", (void *)(grub_addr_t)lh->pref_address);
+  if (lh->pref_address < (grub_uint64_t)GRUB_EFI_MAX_ALLOCATION_ADDRESS)
     {
-      grub_error_pop();
-      kernel_mem = grub_efi_allocate_pages_max(GRUB_EFI_MAX_ALLOCATION_ADDRESS,
-					       BYTES_TO_PAGES(kernel_size));
+      max_addresses[0].addr = lh->pref_address;
+      max_addresses[0].alloc_type = GRUB_EFI_ALLOCATE_ADDRESS;
     }
+  kernel_mem = kernel_alloc (lh->init_size, N_("can't allocate kernel"));
   if (!kernel_mem)
-    kernel_mem = grub_efi_allocate_pages_max(GRUB_EFI_MAX_USABLE_ADDRESS,
-					     BYTES_TO_PAGES(kernel_size));
-  if (!kernel_mem)
-    {
-      grub_error (GRUB_ERR_OUT_OF_MEMORY, N_("can't allocate kernel"));
-      goto fail;
-    }
-  grub_dprintf ("linuxefi", "kernel_mem = %p\n", kernel_mem);
+    goto fail;
+  grub_dprintf("linux", "kernel_mem = %p\n", kernel_mem);
 
   grub_dprintf ("linuxefi", "setting lh->code32_start to %p\n", kernel_mem);
   lh->code32_start = (grub_uint32_t)(grub_addr_t) kernel_mem;
@@ -434,16 +459,13 @@ fail:
   grub_dl_unref (my_mod);
 
   if (cmdline && lh)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)cmdline,
-			 BYTES_TO_PAGES(lh->cmdline_size + 1));
+    kernel_free (cmdline, lh->cmdline_size + 1);
 
   if (kernel_mem)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)kernel_mem,
-			 BYTES_TO_PAGES(kernel_size));
+    kernel_free (kernel_mem, kernel_size);
 
   if (params)
-    grub_efi_free_pages ((grub_efi_physical_address_t)(grub_addr_t)params,
-			 sizeof(*params));
+    kernel_free (params, sizeof(*params));
 
   grub_free (context);
 

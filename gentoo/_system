#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

declare TARGET="/.g/_toor"
declare SOURCE="/.g/_data/_target/iso"

########################################

declare SAFE_ENV="prompt -z EMERGE_DEFAULT_OPTS="
if [[ ${1} == -i ]] || [[ ${1} == -s ]]; then
	SAFE_ENV="prompt -z chroot ${TARGET}"
elif [[ ${1} == -u ]]; then
	SAFE_ENV="prompt -z"
fi

################################################################################

if [[ ${1} == -s ]]; then
	${SAFE_ENV} /usr/bin/env bash -o vi
	exit 0

########################################

elif [[ ${1} == -i ]]; then
	umount					${TARGET}/dev/*	2>/dev/null
	umount					${TARGET}/*	2>/dev/null
	if [[ ! -d ${TARGET}/boot ]]; then
#>>>		tar -pvvx -C ${TARGET} -f	$(ls ${SOURCE}/stage3-i686-*.tar.bz2	| tail -n1)
		tar -pvvx -C ${TARGET} -f	$(ls ${SOURCE}/stage3-amd64-*.tar.bz2	| tail -n1)
		xz -cd				$(ls ${SOURCE}/portage-*.tar.xz		| tail -n1) |
		tar -pvvx -f- -C		${TARGET}/usr
	fi
	mount -v --bind /dev			${TARGET}/dev
	mount -v --bind /dev/pts		${TARGET}/dev/pts
	mount -v --bind /proc			${TARGET}/proc
	mount -v --bind /sys			${TARGET}/sys
	${MKDIR}				${TARGET}/_build
	${RSYNC_U} ${SOURCE}/handbook-*		${TARGET}/_build/
	${RSYNC_U} ${SOURCE}/portage-*		${TARGET}/_build/
	${RSYNC_U} ${SOURCE}/stage3-*		${TARGET}/_build/
	${MKDIR}				${TARGET}/_gentoo
	${RSYNC_U} /_gentoo/*.{okay,OKAY}	${TARGET}/_gentoo/
	${MKDIR}				${TARGET}/.g/.home
	${HOME}/scripts/_sync _home _build	${TARGET}/.g/.home
	${RM}					${TARGET}/.g/.home/.ssh/id_*
	HOME=/.g/.home ${SAFE_ENV}		/.g/.home/scripts/_sync mount g sda
	HOME=/.g/.home ${SAFE_ENV}		/.g/.home/setup/.setconf
#BUILD	${SAFE_ENV}				locale-gen
#BUILD	HOME=/.g/.home ${SAFE_ENV}		emerge ccache debugedit portage				|| exit 1
#BUILD	HOME=/.g/.home ${SAFE_ENV}		emerge eselect gcc-config gentoolkit java-config	|| exit 1
#BUILD	HOME=/.g/.home ${SAFE_ENV}		emerge --emptytree system world				|| exit 1
#BUILD	${RSYNC_U} /usr/portage/		${TARGET}/usr/portage					|| exit 1
#>>>	HOME=/.g/.home ${SAFE_ENV}		/.setup/gentoo/_system					|| exit 1
#BUILD	${SAFE_ENV}				eselect profile set 1
	HOME=/.g/.home ${SAFE_ENV}		/.setup/gentoo/_system -u
	umount					${TARGET}/dev/*	2>/dev/null
	umount					${TARGET}/*	2>/dev/null
	exit 0

########################################

elif [[ ${1} == -u ]]; then
	${LL} /_gentoo
	cat /_gentoo/+okay
	locale-gen
	gcc-config ${CHOST}-$(equery list gcc | awk '{print $1;}' | cut -d- -f3 | sort -n | tail -n1)
	gcc-config --list-profiles
	java-config --set-system-vm $(equery list oracle-jdk-bin | awk '{print $1;}' | cut -d/ -f2 | cut -d. -f-2 | sort -n | tail -n1)
	java-config --list-available-vms
	for SELECT in \
		mesa:--auto		\
		opengl:xorg-x11		\
		python:python2.7	\
		unison:2.45		\
		vi:gvim			\
		\
		package-manager:portage	\
		profile:1
	do
		declare KEY="$(echo "${SELECT}" | ${SED} "s/^(.+)[:](.+)$/\1/g")"
		declare VAL="$(echo "${SELECT}" | ${SED} "s/^(.+)[:](.+)$/\2/g")"
		eselect ${KEY} set ${VAL}
		eselect ${KEY} list
	done
	cat /dev/null >/var/lib/portage/world
	declare ECLEAN="eclean --verbose --destructive" #>>> --package-names
	${SAFE_ENV} emerge --update --deep --newuse system				|| exit 1
	${SAFE_ENV} emerge --noreplace --select $(${HOME}/setup/gentoo/.packages)	|| exit 1
	${SAFE_ENV} emerge --update --deep --newuse world				|| exit 1
	${SAFE_ENV} dispatch-conf							|| exit 1
	${SAFE_ENV} emerge --depclean							|| exit 1
	${SAFE_ENV} revdep-rebuild --ignore						|| exit 1
	${SAFE_ENV} module-rebuild populate						|| exit 1
	${SAFE_ENV} module-rebuild rebuild						|| exit 1
	${SAFE_ENV} emaint --fix all							|| exit 1
	${SAFE_ENV} ${ECLEAN} distfiles --fetch-restricted				|| exit 1
	${SAFE_ENV} ${ECLEAN} packages							|| exit 1

########################################

elif [[ ${1} != -! ]]; then
	if [[ ${1} != -f ]]; then
	${SAFE_ENV} emerge --verbose --sync				|| exit 1; fi
	${SAFE_ENV} emerge --emptytree --fetch-all-uri system world	|| exit 1
fi

################################################################################

declare OPTS="-mindepth 1 -mount \
	    \( -path /.g -prune \) \
	-or \( -path /.runit -prune \) \
	-or \( -path /.setup -prune \) \
	-or \( -path /_gentoo -prune \) \
	-or \( -path /boot -prune \) \
	-or \( -path /lib64/firmware -prune \) \
	-or \( -path /lib64/modules -prune \) \
	-or \( -path /opt/Adobe -prune \) \
	-or \( -path /opt/oracle-jdk-bin-\* -prune \) \
	-or \( -path /opt/sun-jdk-\* -prune \) \
	-or \( -path /tmp -prune \) \
	-or \( -path /usr/lib64/debug -prune \) \
	-or \( -path /usr/portage -prune \) \
	-or \( -path /usr/src/debug -prune \) \
	-or \( -path /usr/src/linux-\* -prune \) \
	-or \( -path /var/db/pkg -prune \) \
	-or \( -path /~~\*~~ -prune \) \
"
(
	eval find -L / ${OPTS} '-or \( -type l -print \)';
	eval find    / ${OPTS} '-or \( -type d -empty -print \)';
	eval find    / ${OPTS} '-or -print' |
		qfile --orphans --from -;
) |
	sort |
	uniq \
	>/_gentoo/_orphans

########################################

${RSYNC_U} ${HOME}/setup/gentoo/ /_gentoo/_gentoo

${SAFE_ENV} ${HOME}/setup/gentoo/.emergent
${SAFE_ENV} ${HOME}/setup/gentoo/.hacks

########################################

if [[ -n ${1} ]] && [[ ${1} != -f ]]; then
	eselect news read new
fi

########################################

echo -en "\n"
wc -l /_gentoo/_packages
wc -l /_gentoo/_packages.db
diff  /_gentoo/_packages.db /_gentoo/_packages |
	${GREP} "^[<>]"

exit 0
################################################################################
# end of file
################################################################################

#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

if ! ${_BASHED}; then
	echo -en "\n"
	echo -en ">>> THE GARYOS BASHRC FILE MUST BE IN YOUR HOME DIRECTORY <<<\n"
	echo -en ">>> OR YOU CAN SET THE HOME VARIABLE TO THE LOCATION WHERE IT IS <<<\n"
	echo -en "\n"
	exit 1
fi

########################################

declare _SOUL="${_SELF}"
declare _HEART="${SCRIPT}"
declare _BASH_SOURCED="false"; $(return >/dev/null 2>&1)
if [[ ${?} == 0 ]]; then
	_SOUL="${BASH_SOURCE}"
	_HEART="$(basename -- "${_SOUL}")"
	_BASH_SOURCED="true"
fi

########################################

export _SYSTEMED="true"

################################################################################

#>>> ${GREP} -o "[!=][=][ ][-][^[:space:]]+" ${HOME}/setup/gentoo/_system | ${SED} "s|^[!=][=][[:space:]]+||g" | sort -u

export _OPTS="${@}"

########################################

export DEBUG_OPT="-v"
export QUIET_OPT="-q"

export DEBUG="false"
export QUIET="false"
if ! ${_BASH_SOURCED}; then
	if [[ ${1} == ${DEBUG_OPT} ]]; then
		DEBUG="true"
		shift
	fi
	if [[ ${1} == ${QUIET_OPT} ]]; then
		QUIET="true"
		shift
	fi
fi

########################################

declare EMERGE_TREE_OPTS="--tree --unordered-display"
declare EMERGE_UPDT_OPTS="${EMERGE_TREE_OPTS} --deep --newuse --update"

########################################

declare FILE=
declare NEXT=

################################################################################

#NOTE: UPDATE THESE WHEN THEY CHANGE IN THE "${MAKEIT}" SCRIPT

#SETTINGS[_TITLE _VERSN _RDATE]
#SETTINGS[_FINAL _RAMFS]
#SETTINGS[_GUNPK _GINST]
#SETTINGS[_GREAD _GPACK]

export _TITLE="gary-os"

########################################

#OPTIONS[DOMODS]
if [[ ${DOMODS} != true ]] && [[ ${DOMODS} != false ]]; then DOMODS="false"; fi

#OPTIONS[DOREDO DOFAST DOTEST]
if [[ ${DOREDO} != true ]] && [[ ${DOREDO} != false ]]; then DOREDO="false"; fi
if [[ ${DOFAST} != true ]] && [[ ${DOFAST} != false ]]; then DOFAST="false"; fi
if [[ ${DOTEST} != true ]] && [[ ${DOTEST} != false ]]; then DOTEST="false"; fi

########################################

#OPTIONS[SOURCE GITDIR]
export SOURCE="${SOURCE:-/.g/_data/_target/iso}"
export GITDIR="${GITDIR:-/.g/_data/_build/funtoo/meta-repo.git}"

#>>> #OPTIONS[BLDDIR WRKDIR TORDIR GOSDIR]
export BLDDIR="${BLDDIR:-/.g/_data/_builds/_gentoo}"
export WRKDIR="${WRKDIR:-${BLDDIR}.working}"
export TORDIR="${TORDIR:-/.g/_toor}"
export GOSDIR="${GOSDIR:-/.g/_data/_builds/_${_TITLE}.working}"

#>>> #OPTIONS[BLDPKG WRKPKG TORPKG GOSPKG]
export BLDPKG="${BLDPKG:-packages}"
export WRKPKG="${WRKPKG:-${BLDPKG}}"
export TORPKG="${TORPKG:-${BLDPKG}}"
export GOSPKG="${GOSPKG:-${_TITLE}}"

########################################

#VARIABLES[ETCDIR DSTDIR PAKDIR REPDIR TMPDIR PDBDIR]
export ETCDIR="/etc/portage"
export DSTDIR="/var/cache/portage/distfiles"
export PAKDIR="/var/cache/portage/packages"
export REPDIR="/var/git/meta-repo"
export TMPDIR="/var/tmp/portage"
export PDBDIR="/var/db/pkg"

#VARIABLES[ARCDIR GENDIR]
export ARCDIR="/_build"
export GENDIR="/_gentoo"

#VARIABLES[LINDIR FUNDIR]
export LINDIR="linux"
export FUNDIR="gentoo"

#VARIABLES[FUNCMT FUNKIT AUDITS LAYDIR]
export FUNCMT="_funtoo"
export FUNKIT="${FUNCMT}.kits"
export AUDITS=".emergent"
export LAYDIR="overlay"

#OPTIONS[SETDIR CFGSCR ARTDIR]
export SETDIR="${SETDIR:-/.g/_data/zactive/.setup}"
export CFGSCR="${CFGSCR:-${SETDIR}/${FUNDIR}.config}"
export ARTDIR="${ARTDIR:-/.g/_data/zactive/coding/gary-os/artifacts}"

#NOTE: UPDATE THESE WHEN THEY CHANGE IN THE "${MAKEIT}" SCRIPT

#VARIABLES[PREPIT MAKEIT SHIPIT]
export PREPIT="_prepare"
export MAKEIT="_release"
export SHIPIT="_publish"

########################################

#VARIABLES[TARGET TOOR _PKG _NEW _MOD _GOS]
export TARGET="${BLDDIR}"
export TOOR="${TOOR}"
export _PKG="${BLDPKG}"
export _NEW="false"
export _MOD="false"
export _GOS="false"

if ! ${_BASH_SOURCED}; then
	if [[ ${1} == -[dxtg] ]]; then
		TOOR="${1}"
		shift
	fi
fi
if [[ ${TOOR} == -d ]]; then
	TARGET="${BLDDIR}"
	_PKG="${BLDPKG}"
fi
if [[ ${TOOR} == -x ]]; then
	TARGET="${WRKDIR}"
	_PKG="${WRKPKG}"
fi
if [[ ${TOOR} == -t ]]; then
	TARGET="${TORDIR}"
	_PKG="${TORPKG}"
fi
if [[ ${TOOR} == -g ]]; then
	TARGET="${GOSDIR}"
	_PKG="${GOSPKG}"
fi
if [[ -e ${TARGET} ]]; then
	TARGET="$(realpath ${TARGET})"
	#note: this is a potentially dangerous way of stripping "//" to just "/" for pattern matching and pretty output
	TARGET="${TARGET/%\/}"
fi

#note: environment variable to select modified build with the makefile
#note: command line option overrides the environment variable
if ${DOMODS}; then
	_MOD="true"
fi

if ! ${_BASH_SOURCED}; then
	if [[ ${1} == -n ]]; then
		TOOR="${TOOR} ${1}"
		_NEW="true"
		shift
	fi
	if [[ ${1} == -m ]]; then
		TOOR="${TOOR} ${1}"
		_MOD="true"
		shift
	fi
fi

#note: detection of a "gary-os" build is based purely on the package set name
if [[ ${_PKG} == ${_TITLE} ]]; then
	_GOS="true"
fi
if [[ ${_PKG} == _${_TITLE} ]]; then
	_GOS="true"
fi

########################################

#VARIABLES[AUTO _RST _ASK _BLD _KRN _CFG]
export AUTO=
export _RST="--reset"
export _ASK="--ask=y"
export _BLD="false"
export _KRN="false"
export _CFG="false"

if ! ${_BASH_SOURCED}; then
	if [[ ${1} == -a ]]; then
		AUTO="${1}"
		_ASK="--ask=n"
		shift
	fi
	if [[ ${1} == -b ]]; then
		_BLD="true"
		shift
	fi
	if [[ ${1} == -k ]]; then
		_KRN="true"
		shift
	fi
	if [[ ${1} == -c ]]; then
		_CFG="true"
		shift
	fi
fi

########################################

#note: athlon64 build = WRKDIR="/.g/_data/_builds/_gentoo.amd64" _CPU="CONFIG_MK8" ESUB="amd64-k8" GARC="athlon64" GSUB="athlon64" ${HOME}/setup/gentoo/_system -x -0

#OPTIONS[_CPU EARC ESUB GARC GSUB GOPT]
export _CPU_RESET="CONFIG_MCORE2"
export _CPU="${_CPU:-${_CPU_RESET}}"
export EARC="${EARC:-x86-64bit}"
export ESUB="${ESUB:-core2_64}"
export GARC="${GARC:-core2}"
export GSUB="${GSUB:-core2}"
export GOPT="${GOPT:--O2}"

if ${_GOS}; then
	_CPU="CONFIG_GENERIC_CPU"
	EARC="x86-64bit"
	ESUB="generic_64"
	GARC="x86-64"
	GSUB="generic"
	GOPT="-Os -s"
fi

########################################

#>>> ${GREP} -r "[#][{](NEW|MOD|GOS|CPU|GARC|GSUB|GOPT)[}]" ${HOME}/setup/gentoo

function portage_file {
	declare PORT_SEL="${1}" && shift
	declare P_FILTER="${1}" && shift
	declare P_SPACER="${1}" && shift
	if [[ -d ${PORT_SEL} ]]; then
		for FILE in $(${LS}		\
			${PORT_SEL}/make.conf	\
			${PORT_SEL}/package.*	\
			${PORT_SEL}/sets/*	\
			2>/dev/null)		\
		; do
			{ ${FUNCNAME} ${FILE} || return 1; }	>${FILE}.${FUNCNAME}	|| return 1
			${MV} ${FILE}.${FUNCNAME}		${FILE}			|| return 1
		done
	elif [[ -f ${PORT_SEL} ]]; then
		cat ${PORT_SEL} |
			{ { ${_NEW} &&	{ ${SED} -e "s|^[#][{]NEW[}][ ](.+)$|\1|g" -e "/[#][{]NEW[}]/d" || return 1; }; } || cat; } |
			{ { ${_MOD} &&	{ ${SED} -e "s|^[#][{]MOD[}][ ](.+)$|\1|g" -e "/[#][{]MOD[}]/d" || return 1; }; } || cat; } |
			{ { ${_GOS} &&	{ ${SED} -e "s|^[#][{]GOS[}][ ](.+)$|\1|g" -e "/[#][{]GOS[}]/d" || return 1; }; } || cat; } |
			{ {		{ ${SED} -e "s|^[#][{]CPU[}][ ](.+)$|\1|g" -e "/[#][{]CPU[}]/d" || return 1; }; } || cat; } |
			{ ${SED} \
				-e "s|[#][{]GARC[}]|${GARC}|g"	\
				-e "s|[#][{]GSUB[}]|${GSUB}|g"	\
				-e "s|[#][{]GOPT[}]|${GOPT}|g"	\
				|| return 1;
			} |
			{ {
				{
					[[ -n ${P_FILTER} ]] && [[ -n ${P_SPACER} ]];
				} && {
					{ ${SED} -n "s|^[#][{]${P_FILTER}[}][ ]([^#]+).*$|\1|gp"			|| return 1; } |
					{ tr '\n' '!'									|| return 1; } |
					{ ${SED} -e "s|[[:space:]]+| |g" -e "s|[! ]*$||g" -e "s|[!]|${P_SPACER}|g"	|| return 1; };
				};
			} || cat; } \
		2>/dev/null
	else
		return 1
	fi
	return 0
}

#OPTIONS[FUNTOO LINPKG KERNEL]
#OPTIONS[SELECT WINMGR WMHELP]
#OPTIONS[RCUPDT FSUPDT FSPACK FSKEEP FSARCH FSEXCL]
export FUNTOO="${FUNTOO:-$(tail -n1 ${SETDIR}/${FUNDIR}/${FUNCMT} 2>/dev/null)}"
for FILE in	\
	LINPKG	\
	KERNEL	\
	\
	SELECT	\
	WINMGR	\
	WMHELP	\
; do
	eval export ${FILE}=\"${!FILE:-$(portage_file ${SETDIR}/${FUNDIR}/sets/${_PKG} ${FILE} " ")}\"
done
for FILE in	\
	RCUPDT	\
	FSUPDT	\
	FSPACK	\
	FSKEEP	\
	FSARCH	\
	FSEXCL	\
; do
	eval export ${FILE}=\"${!FILE:-$(portage_file ${SETDIR}/${FUNDIR}/sets/${_PKG} ${FILE} " ; ")}\"
done
export WINMGR="${WINMGR:-dwm}"
export WMHELP="${WMHELP:-${_TITLE} / \`date --iso=s\`}"

########################################

declare LDIR="/usr/src/linux"
declare MDIR="/lib64/modules"

declare KVER=
declare KCFG=
declare KBAS=
declare KFIL=
declare KDIR=
for FILE in ${KERNEL}; do
	KVER="${FILE}"
	KCFG="config-gentoo64-${KVER}"
	KBAS="linux-${KVER}-gentoo"
	KFIL="kernel-genkernel-x86_64-${KVER}-gentoo"
	KDIR="/usr/src/${KBAS}"
done

########################################

#VARIABLES[HOME MYSELF IS_CHROOT DO_CHROOT SAFE_ENV]
export MYSELF="${ARCDIR}/${FUNDIR}/${_HEART}"

if [[ ${IS_CHROOT} != true ]] && [[ ${IS_CHROOT} != false ]]; then export IS_CHROOT="false"; fi
export DO_CHROOT="false"
if ! ${IS_CHROOT} && [[ -n ${TOOR} ]]; then
	DO_CHROOT="true"
fi

export SAFE_ENV=
for FILE in $(${SED} -n "s|^.*[#]OPTIONS[[](.+)[]]$|\1|gp" ${_SOUL}); do
	SAFE_ENV+=" ${FILE}=\"${!FILE}\""
done
SAFE_ENV="${SAFE_ENV/#\ }"

if ${DO_CHROOT}; then
	function safe_env {
		declare C_TARGET="${TARGET}"
		if [[ -z ${TARGET} ]]; then
			C_TARGET="/"
		fi
		eval prompt -z IS_CHROOT=\"true\" ${SAFE_ENV} HOME=\"${ARCDIR}\" SETDIR=\"${ARCDIR}\" chroot \"${C_TARGET}\" '"${@}"' || return 1
		return 0
	}
else
	function safe_env {
		eval prompt -z IS_CHROOT=\"${IS_CHROOT}\" ${SAFE_ENV} '"${@}"' || return 1
		return 0
	}
fi

########################################

declare VARSREGEX="[A-Z][A-Z0-9_]+"
declare MASKREGEX="^[[:space:]]+(${VARSREGEX})([[:space:]].*)?$"
declare MASKVARS="
$(man make.conf 2>/dev/null | ${GREP} "${MASKREGEX}" | ${GREP} --only-matching "${VARSREGEX}")
CARCH
"
declare SKIPVARS="
DIR
URI
"
declare KEEPVARS="
${SKIPVARS}
PATH
"

function clear_environment {
	if ${QUIET}; then
		return 0
	fi
	for FILE in $(
		echo "${MASKVARS}" |
		${SED} "/^$/d" |
		sort --field-separator=" " --unique |
		${GREP} --invert-match "^($(
			echo "${KEEPVARS}" |
			${SED} "/^$/d" |
			tr '\n' '|' |
			${SED} -e "s|^[|]*||g" -e "s|[|]*$||g"
		))$"
	); do
		echo -en "${FILE}=${!FILE}\n" | ${GREP} "[=].+$"
		unset ${FILE}
	done
	return 0
}

################################################################################

#NOTE: TEST READABILITY WITHOUT COLORS (MAKEFILE ALSO)
#NOTE: https://unix.stackexchange.com/questions/58982/disable-colours-on-terminal-and-ssh
#NOTE: (TERM=ansi-mono ; tput colors ; dircolors -p | grep -x "TERM ${TERM}")
#NOTE: OR COMMENT COLOR DECLARATIONS

function print_info {
	if ${QUIET}; then
		return 0
	fi
	declare TITLE="\e[1;32m"	# light green
	declare STATE="\e[0;35m"	# magenta
	declare HOWTO="\e[0;36m"	# cyan
	declare NOTES="\e[0;33m"	# yellow
	declare ERROR="\e[1;31m"	# red
	declare OTHER="\e[1;34m"	# dark blue
	declare RESET="\e[0;37m"	# light gray
	if [[ ${1} == "marker" ]]; then
		echo -en "${OTHER}"
		printf "~%.0s" {1..80}
		echo -en "${RESET}\n"
	elif [[ ${1} == "title" ]]; then
		echo -en "${NOTES}"
		echo -en ">>> GARYOS BUILD SCRIPT <<<"
		echo -en "${RESET}\n"
	elif [[ ${1} == "success" ]]; then
		echo -en "${TITLE}"
		echo -en ">>> GARYOS BUILD SCRIPT: SUCCESS! <<<"
		echo -en "${RESET}\n"
	elif [[ ${1} == "error" ]]; then
		echo -en "${ERROR}"
		echo -en ">>> GARYOS BUILD SCRIPT: FAILURE! <<<"
		echo -en "${RESET}\n"
	elif [[ ${1} == "usage" ]]; then
		declare PRINTF=
		PRINTF+="${TITLE}%-45.45s${RESET}"
		PRINTF+=" ${STATE}%-15.15s${RESET}"
		PRINTF+=" ${HOWTO}%s${RESET}"
		PRINTF+=" ${STATE}%s${RESET}\n"
		echo -en "\n"
		echo -en "${NOTES}"
		echo -en ">>> USAGE <<<"
		echo -en "${RESET}\n"
		echo -en "${STATE}"
		echo -en ">>> ARGUMENT PROCESSING IS VERY RUDIMENTARY // OPTIONS MUST BE IN THE ORDER SHOWN <<<"
		echo -en "${RESET}\n"
		echo -en "\n"
		printf "${PRINTF}" "Synchronize (Database, Sources, Metadata):"	"<auto>"	"${_HEART} [{commit_id}]" "<${FUNTOO}>"
		printf "${PRINTF}" "Synchronize (Sources, Metadata):"		"<auto>"	"${_HEART} -f"
		printf "${PRINTF}" "Synchronize (Metadata Only):"		"<auto>"	"${_HEART} -!"
		echo -en "\n"
		printf "${PRINTF}" "Update System (Automatically):"		"<auto>"	"${_HEART} -a -u"
		printf "${PRINTF}" "Update System (Interactively):"		"<interactive>"	"${_HEART} -u"
		echo -en "\n"
		printf "${PRINTF}" "Information Lookup (Package Data):"		"<output>"	"${_HEART} [{chroot}] -l {package}"
		printf "${PRINTF}" "Information Lookup (Package Search):"	"<output>"	"${_HEART} [{chroot}] -l {search}"
		printf "${PRINTF}" "Information Lookup (Gentoo Bug URL):"	"<output>"	"${_HEART} [{chroot}] -l {bug_id}"
		echo -en "\n"
		printf "${PRINTF}" "Build Examination (Review Failures):"	"<output>"	"${_HEART} [{chroot}] -p"
		printf "${PRINTF}" "Build Configuration (Internal Only):"	"<internal>"	"${_HEART} -w"
		printf "${PRINTF}" "Build Configuration Files (Internal Only):"	"<internal>"	"${_HEART} -W"
		echo -en "\n"
		printf "${PRINTF}" "Validation (Usage & Variables Only):"	"<output>"	"${_HEART} ${DEBUG_OPT} [{chroot}] [{options}]"
		printf "${PRINTF}" "Variable Query (Internal Only):"		"<internal>"	"${_HEART} ${DEBUG_OPT} [{chroot}] [{options}] {variable}"
		printf "${PRINTF}" "Suppress Output (Internal Only)"		"<internal>"	"${_HEART} [${DEBUG_OPT}] ${QUIET_OPT} [{chroot}] [{options}]"
		echo -en "\n"
		printf "${PRINTF}" "Run Script (Configuration):"		"<custom>"	"${_HEART} {script} [{options}]" "<$(basename ${CFGSCR}) [${_OPTS}]>"
		echo -en "\n"
		echo -en "${NOTES}"
		echo -en ">>> CHROOT <<<"
		echo -en "${RESET}\n"
		echo -en "${STATE}"
		echo -en ">>> DEFAULTS: TARGET=\$BLDDIR _PKG=\$BLDPKG <<<"
		echo -en "${RESET}\n"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Selection [-d] (\$BLDPKG/\$BLDDIR):"	"${BLDPKG}"	"${BLDDIR}"
		printf "${PRINTF}" "Chroot Selection [-x] (\$WRKPKG/\$WRKDIR):"	"${WRKPKG}"	"${WRKDIR}"
		printf "${PRINTF}" "Chroot Selection [-t] (\$TORPKG/\$TORDIR):"	"${TORPKG}"	"${TORDIR}"
		printf "${PRINTF}" "Chroot Selection [-g] (\$GOSPKG/\$GOSDIR):"	"${GOSPKG}"	"${GOSDIR}"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Build (Initial):"			"<auto>"	"${_HEART} {chroot} -0" "<-n -a -b -k -i>"
		printf "${PRINTF}" "Chroot Build (Update Only):"		"<auto>"	"${_HEART} {chroot} -/" "<-a -i>"
		printf "${PRINTF}" "Chroot Build (Complete Rebuild):"		"<auto>"	"${_HEART} {chroot} -1" "<-a -b -i>"
		printf "${PRINTF}" "Chroot Build (Configuration):"		"<custom>"	"${_HEART} {chroot} -2" "<-c -i>"
		printf "${PRINTF}" "Chroot Build (Internal Only):"		"<internal>"	"${_HEART} {chroot} [-m|-n|-a|-b|-k|-c] -i"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Validation (Dependency Tree):"	"<output>"	"${_HEART} [{chroot}] -y -j"
		printf "${PRINTF}" "Chroot Validation (Reverse Dependencies):"	"<output>"	"${_HEART} [{chroot}] -y -j (d|depends) {package}"
		printf "${PRINTF}" "Chroot Validation (Equery Wrapper):"	"<output>"	"${_HEART} [{chroot}] -y -j (-h|{options})"
		printf "${PRINTF}" "Chroot Validation (Change Review):"		"<output>"	"${_HEART} {chroot} -y [{packages_file}]"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Configuration (Overlay Helper):"	"<interactive>"	"${_HEART} {chroot} -o {package}"
		printf "${PRINTF}" "Chroot Configuration (Overlay Downloader):"	"<interactive>"	"${_HEART}          -o {package} {file} [{commit}]"
		printf "${PRINTF}" "Chroot Configuration (Internal Only):"	"<internal>"	"${_HEART} {chroot} -r [-w]"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Shell (Bash):"			"<interactive>"	"${_HEART} {chroot} -s"
		printf "${PRINTF}" "Chroot Shell (Run Command):"		"<auto>"	"${_HEART} {chroot} -s {command}"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Emerge Command (Automatically):"	"<auto>"	"${_HEART} {chroot} -a -s -e [{command}]"
		printf "${PRINTF}" "Chroot Emerge Command (Interactively):"	"<interactive>"	"${_HEART} {chroot} -s -e [{command}]"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Complete (Unmount Cleanup):"		"<auto>"	"${_HEART} {chroot} -z"
		echo -en "\n"
		echo -en "${NOTES}"
		echo -en ">>> INITRAMFS <<<"
		echo -en "${RESET}\n"
		#note: these need to match the names in the "${MAKEIT}" script
		echo -en "\n"
		printf "${PRINTF}" "Initramfs Build (Chroot Reset):"		"<auto>"	"${_HEART} {chroot} ${MAKEIT}_reset"
		printf "${PRINTF}" "Initramfs Build (Chroot Create):"		"<auto>"	"${_HEART} {chroot} ${MAKEIT}_ramfs"
		printf "${PRINTF}" "Initramfs System (Live Reset):"		"<auto>"	"(BLD|WRK|TOR|GOS)DIR=/ ${_HEART} {chroot} ${MAKEIT}_reset"
		printf "${PRINTF}" "Initramfs System (Live Create):"		"<auto>"	"(BLD|WRK|TOR|GOS)DIR=/ ${_HEART} {chroot} ${MAKEIT}_ramfs"
		printf "${PRINTF}" "Initramfs System (Live Unpack):"		"<auto>"	"(BLD|WRK|TOR|GOS)DIR=/ ${_HEART} {chroot} ${MAKEIT}_unpack"
		printf "${PRINTF}" "Initramfs System (Live Install):"		"<auto>"	"(BLD|WRK|TOR|GOS)DIR=/ ${_HEART} {chroot} ${MAKEIT}_install"
		echo -en "\n"
		printf "${PRINTF}" "Distribution Targets (Internal Only):"	"<internal>"	"${_HEART} [{chroot}] ($(		${SED} -n "s|^function[ ](.+)[ ][{].*[#][{]main[}].*$|\1|gp"	${SETDIR}/${FUNDIR}/${MAKEIT} | tr '\n' '|' | ${SED} "s|[|]*$||g"	))"
		printf "${PRINTF}" "Distribution Reset (Internal Only):"	"<internal>"	"${_HEART} [{chroot}] ($(		${SED} -n "s|^function[ ](.+)[ ][{].*[#][{]reset[}].*$|\1|gp"	${SETDIR}/${FUNDIR}/${MAKEIT} | tr '\n' '|' | ${SED} "s|[|]*$||g"	)) ${_RST}"
		echo -en "\n"
		printf "${PRINTF}" "Distribution Prepare (Internal Only):"	"<internal>"	"${_HEART} {chroot} ${PREPIT}_($(	${SED} -n "s|^function[ ]${PREPIT}_(.+)[ ][{].*$|\1|gp"		${SETDIR}/${FUNDIR}/${MAKEIT} | tr '\n' '|' | ${SED} "s|[|]*$||g"	))"
		printf "${PRINTF}" "Distribution Release (Internal Only):"	"<internal>"	"${_HEART} {chroot} ${MAKEIT}_($(	${SED} -n "s|^function[ ]${MAKEIT}_(.+)[ ][{].*$|\1|gp"		${SETDIR}/${FUNDIR}/${MAKEIT} | tr '\n' '|' | ${SED} "s|[|]*$||g"	))"
		printf "${PRINTF}" "Distribution Publish (Internal Only):"	"<internal>"	"${_HEART}          ${SHIPIT}_($(	${SED} -n "s|^function[ ]${SHIPIT}_(.+)[ ][{].*$|\1|gp"		${SETDIR}/${FUNDIR}/${MAKEIT} | tr '\n' '|' | ${SED} "s|[|]*$||g"	))"
		echo -en "\n"
	elif [[ ${1} == "starter" ]]; then
		function starter_var {
			declare COLOR="${HOWTO}"
			declare VAR="${1}"
			if [[ -z ${!VAR} ]]; then
				COLOR="${STATE}"
			fi
			declare PRINTF=
			PRINTF+="${TITLE}%-15.15s${RESET} "
			PRINTF+="${COLOR}%s${RESET}\n"
			printf "${PRINTF}" "${VAR}:" "${!VAR:-(unset)}"
		}
		echo -en "\n"
		echo -en "${NOTES}"
		echo -en ">>> GLOBALS <<<"
		echo -en "${RESET}\n"
		echo -en "\n"
		starter_var "_SOUL"
		if [[ ${_SOUL} != ${_SELF} ]]; then starter_var "_SELF"; fi
		starter_var "_OPTS"
		starter_var "DEBUG"; #>>> starter_var "DEBUG_OPT"
		starter_var "QUIET"; #>>> starter_var "QUIET_OPT"
		echo -en "\n"
		declare BEG="true"
		for FILE in SETTINGS OPTIONS VARIABLES; do
			if ${BEG}; then BEG="false"; else echo -en "\n"; fi
			echo -en "${NOTES}"
			echo -en ">>> ${FILE} <<<"
			echo -en "${RESET}\n"
			if [[ ${FILE} == OPTIONS ]]; then
				echo -en "${STATE}"
				echo -en ">>> THESE CAN BE CHANGED <<<"
				echo -en "${RESET}\n"
			fi
			echo -en "\n"
			declare END="true"
			${SED} -n "s|^[#]${FILE}[[](.+)[]]$|\1|gp" ${_SOUL} | while read -r NEXT; do
				if ${END}; then END="false"; else echo -en "\n"; fi
				for FILE in ${NEXT}; do
					starter_var "${FILE}"
				done
			done
		done
		echo -en "\n"
	elif [[ ${1} == "environment" ]]; then
		echo -en "${NOTES}"
		echo -en "Clearing Environment Variables..."
		echo -en "${RESET}\n"
	elif [[ ${1} == "update" ]]; then
		echo -en "${NOTES}"
		echo -en "Preparing To Update All Data"
		for FILE in {1..10}; do
			echo -en "."
			sleep 1
		done
		echo -en "${RESET}\n"
	elif [[ ${1} == "mount" ]]; then
		echo -en "${NOTES}"
		echo -en "Mounting Chroot Directories..."
		echo -en "${RESET}\n"
	elif [[ ${1} == "umount" ]]; then
		echo -en "${NOTES}"
		echo -en "Unmounting Chroot Directories..."
		echo -en "${RESET}\n"
	else
		echo -en "${ERROR}"
		echo -en ">>> SOMEBODY MADE A MISTAKE! <<<"
		echo -en "${RESET}\n"
	fi
	return 0
}

########################################

function requires_chroot {
	declare SRC_OPTS="${@}"
	declare C_OPTION="${1}" && shift
	declare C_TARGET="${TARGET}"
	if [[ -z ${TARGET} ]]; then
		C_TARGET="/"
	fi
	echo -en "\n"
	echo -en ">>> THIS OPTION (${SRC_OPTS}) REQUIRES A CHROOT <<<\n"
	echo -en ">>> IT CAN BE RUN AGAINST ROOT(/) USING THE (-g)(GOSDIR=/) OPTIONS <<<\n"
	echo -en ">>> CURRENTLY USING (${TOOR}) CHROOT OPTION AND (${C_TARGET}) DIRECTORY <<<\n"
	echo -en "\n"
	${_SOUL} ${DEBUG_OPT} 2>&1 | ${GREP} " ${C_OPTION}"
	echo -en "\n"
	EXIT 1
}

########################################

function expect_wrapper {
	declare EXPECT_CMD="spawn -noecho $(
		for FILE in "${@}"; do
			if [[ -n $(echo "${FILE}" | ${GREP} " ") ]]; then
				echo " \\\"${FILE}\\\""
			else
				echo "${FILE}"
			fi
		done
	);"
	EXPECT_CMD+=" "; EXPECT_CMD+="set timeout -1;"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="expect"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase yes*/*no*	{send y\\\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase use-new*	{send u\\\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="default {}"
	EXPECT_CMD+=" "; EXPECT_CMD+="eof"
	EXPECT_CMD+=" "; EXPECT_CMD+=";"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="lassign [wait] pid spawnid os_error exit_status;"
	EXPECT_CMD+=" "; EXPECT_CMD+="if {(\\\$os_error == 0) && (\\\$exit_status == 0)} { exit 0; } else { exit 1; };"
	if [[ -n ${AUTO} ]] && {
		{ ${DO_CHROOT}		&& [[ -x "${TARGET}/usr/bin/expect" ]]; } ||
		{ ! ${DO_CHROOT}	&& [[ -x "/usr/bin/expect" ]]; }
	}; then
		eval safe_env expect -c \"${EXPECT_CMD}\"	|| return 1
	else
		safe_env "${@}"					|| return 1
	fi
	return 0
}

########################################

function mount_dev_dirs {
	if ! ${DO_CHROOT} || [[ ! -d ${TARGET} ]] || [[ -z ${TARGET} ]]; then
		return 0
	fi
	if [[ -z ${1} ]]; then
		print_info marker
		print_info mount
		mount-robust --dev ${TARGET}		|| return 1
		print_info marker
	elif [[ ${1} == -u ]]; then
		shift
		print_info marker
		print_info umount
		declare LSOF="$(
			lsof |
			${GREP} "${TARGET}" |
			${GREP} -v "${TARGET}${GENDIR}.log$"
		)"
		if [[ -n ${LSOF} ]]; then
			echo -en "\n"
			echo -en ">>> THERE ARE STILL PROCESSES IN THE CHROOT <<<\n"
			echo -en ">>> SKIPPING UNMOUNT <<<\n"
			echo -en "\n"
			echo "${LSOF}" | ${GREP} "${TARGET}"
			echo -en "\n"
			mount | ${GREP} "${TARGET}"
			echo -en "\n"
#>>>			print_info marker
#>>>			return 1
		else
			mount-robust -u --dev ${TARGET}	|| return 1
		fi
		print_info marker
	fi
	return 0
}

########################################

function kernel_cpu {
	declare CFG_FILE="${1}" && shift
	if [[ ${_CPU_RESET} != ${_CPU} ]]; then
		${SED} -i \
			-e "/${_CPU_RESET}/d" \
			-e "s/^.*(${_CPU})[^_].*$/\1=y/g" \
			${CFG_FILE} \
			|| return 1
	fi
	return 0
}

################################################################################

trap "EXIT 1" SIGHUP SIGINT SIGKILL SIGTERM

function EXIT {
	declare EXIT="0"
	if [[ ${1} != 0 ]] && [[ ${1} != -0 ]]; then
		if [[ ${1} == -1 ]]; then
			EXIT="1" && shift
		else
			EXIT="${1}" && shift
			mount_dev_dirs -u || EXIT -1
		fi
		if ! ${QUIET}; then
			print_info marker
			print_info error
			print_info marker
		fi
	else
		if [[ ${1} == -0 ]]; then
			EXIT="0" && shift
		fi
		if ! ${QUIET}; then
			print_info marker
			print_info success
			print_info marker
		fi
	fi
	exit ${EXIT}
}

########################################

source ${SETDIR}/${FUNDIR}/${MAKEIT} || EXIT 1

########################################

#NOTE: ALL "^if.*{1}" OPTIONS UP TO THIS POINT NEED TO BE "$_BASH_SOURCED" PROTECTED

if ${_BASH_SOURCED}; then
	return 0
fi

########################################

if ${DEBUG} && [[ ${1} == +([A-Z]) ]]; then
	FILE="${1}" && shift
	echo "${!FILE}"
	QUIET="true"
	EXIT 0
fi

declare DEBUG_QUIET="${QUIET}"
if ${DEBUG}; then
	QUIET="false"
fi
print_info marker;		print_info title
print_info marker;		print_info usage
print_info marker;		print_info starter
if ! ${DEBUG}; then
	print_info marker;	print_info environment;
	clear_environment
	print_info marker
fi

if ${DEBUG}; then
	if ${DO_CHROOT} && ! ${DEBUG_QUIET}; then
		if [[ ! -d ${TARGET} ]] || [[ ! -x ${TARGET}${MYSELF} ]]; then
			echo -en "\n"
			${LL} ${TARGET}${MYSELF}
			requires_chroot "${@}"
		fi
		set -x
		safe_env ${MYSELF} ${DEBUG_OPT} ${TOOR} "${@}" || EXIT 1
		set +x
	fi
	EXIT 0
fi

########################################

if ${DO_CHROOT} && [[ -n ${TARGET} ]] && [[ ! -d ${TARGET} ]]; then
	echo -en "\n"
	${LL} -d ${TARGET}
	requires_chroot "${@}"
fi

########################################

if
[[ ${1} == ${PREPIT}+(*) ]] ||
[[ ${1} == ${MAKEIT}+(*) ]] ||
[[ ${1} == ${SHIPIT}+(*) ]]
then
	if ! ${DO_CHROOT}; then
		requires_chroot "${@}"
	fi
	declare DOIT="${1}"	&& shift
	${DOIT} "${@}"		|| EXIT -1
	EXIT -0
fi

########################################

if [[ -x ${1} ]]; then
	declare DOIT="${1}"	&& shift
	${DOIT} ${_SOUL} "${@}"	|| EXIT -1
	EXIT -0
fi

################################################################################

if [[ ${1} == -z ]]; then
	if ! ${DO_CHROOT}; then
		requires_chroot "${@}"
	fi
	shift
	mount_dev_dirs -u || EXIT 1
	EXIT 0
fi

########################################

if [[ ${1} == -s ]]; then
	if ! ${DO_CHROOT}; then
		requires_chroot "${@}"
	fi
	shift
	mount_dev_dirs					|| EXIT 1
	if [[ ${1} == -e ]]; then
		shift
		#note: ensuring configuration is up-to-date
		${_SOUL} ${QUIET_OPT} ${TOOR} -r	|| EXIT 1
		expect_wrapper emerge ${_ASK}		\
			${EMERGE_TREE_OPTS}		\
			${EMERGE_UPDT_OPTS}		\
			--selective=n			\
			${@:-\@system \@world}		|| EXIT 1
	else
		safe_env bash --norc ${@:+-c "${@}"}	|| EXIT 1
	fi
	mount_dev_dirs -u				|| EXIT 1
	EXIT 0
fi

########################################

if [[ ${1} == -y ]]; then
	if ! ${DO_CHROOT} && [[ ${2} != -j ]]; then
		requires_chroot "${@}"
	fi
	shift
	if ${DO_CHROOT}; then
		#note: ensuring configuration is up-to-date
		${_SOUL} ${QUIET_OPT} ${TOOR} -r	|| EXIT 1
	fi
	if [[ ${1} == -j ]]; then
		shift
		mount_dev_dirs				|| EXIT 1
		if [[ ${1} == depends ]] || [[ ${1} == d ]]; then
			shift
			safe_env equery depends		\
				--indirect		\
				--depth=0		\
				"${@}"			|| EXIT 1
		elif [[ -n ${1} ]]; then
			safe_env equery			\
				"${@}"			|| EXIT 1
		else
			safe_env emerge ${_ASK}		\
				${EMERGE_TREE_OPTS}	\
				--pretend		\
				--emptytree		\
				\@system \@world	|| EXIT 1
		fi
		mount_dev_dirs -u			|| EXIT 1
		EXIT 0
	fi
	#note: the "_packages" file is hard-set in the ".emergent" script
	FILE="${_SAVDIR}${GENDIR}/_packages"
	if [[ ! -f ${1} ]]; then
		echo -en "\n"
		echo -en ">>> YOU ALMOST CERTAINLY WANT TO SPECIFY YOUR OWN PACKAGES FILE TO COMPARE AGAINST <<<\n"
		echo -en ">>> THIS OPTION IS READ-ONLY SO THERE IS NO POTENTIAL FOR HARM <<<\n"
#>>>		echo -en "\n"
	else
		FILE="${1}"
		shift
	fi
	if [[ ! -f ${FILE} ]] || [[ ! -f ${TARGET}${GENDIR}/_packages ]]; then
		echo -en "\n"
		echo -en ">>> ONE OF (${FILE}) OR (${TARGET}${GENDIR}/_packages) DOES NOT EXIST <<<\n"
		echo -en ">>> VALID SOURCE ({packages_file}) AND DESTINATION (-g)(GOSDIR=/) FILES ARE REQUIRED <<<\n"
		echo -en ">>> SKIPPING PACKAGE COMPARISONS <<<\n"
#>>>		echo -en "\n"
#>>>		EXIT 1
	else
		function compare_packages {
			declare NAM="${1}" && shift
			declare SRC="${1}" && shift
			declare DST="${1}" && shift
			echo -en "\n"
			echo -en ">>> PACKAGES: ${NAM} <<<\n"
			echo -en ">>> COMPARING (${DST}) AGAINST (${SRC}) FILE <<<\n"
			echo -en "\n"
			for NEXT in $(cat ${DST}); do
				NEXT="$(echo "${NEXT}" | ${SED} "s|[-][0-9].*$||g")"
				if [[ -z $(${GREP} "${NEXT}" ${SRC}) ]]; then
					${GREP} "${NEXT}" ${DST}
				fi
			done
			return 0
		}
		compare_packages "ADDED"	${FILE}				${TARGET}${GENDIR}/_packages
		compare_packages "REMOVED"	${TARGET}${GENDIR}/_packages	${FILE}
	fi
	#note: the ".emerge" file is also hard-set in the ".emergent" script
	echo -en "\n>>> USE: GLOBAL <<<\n"
	for FILE in $(
		source ${SETDIR}/${FUNDIR}/make.conf
		echo -en "${USE_GARYOS}"
	); do
		echo -en "\n"
		${GREP} "${FILE/#-}" ${SETDIR}/${FUNDIR}/make.conf
		${GREP} "${FILE/#-}" ${TARGET}${GENDIR}/.emerge
	done
	echo -en "\n>>> USE: PACKAGES <<<\n"
	for FILE in $(
		${SED} -n "s|^[#][{]GOS[}][ ]([^[:space:]]+).*$|\1|gp" ${SETDIR}/${FUNDIR}/package.use
	); do
		echo -en "\n"
		${GREP} "${FILE}" ${SETDIR}/${FUNDIR}/package.use
		${GREP} "${FILE}" ${TARGET}${GENDIR}/.emerge
	done
	echo -en "\n>>> ESELECT <<<\n"
	echo -en "\n"
	for FILE in \
		kernel:kernel \
		python:python \
		${SELECT}
	do
		declare KEY="$(echo "${FILE}" | ${SED} "s|^(.+)[:](.+)$|\1|g")"
		eselect ${KEY} list
	done
	EXIT 0
fi

########################################

if [[ ${1} == -o ]]; then
	if ! ${DO_CHROOT} && ! ${IS_CHROOT} && [[ -z ${3} ]]; then
		requires_chroot "${@}"
	fi
#>>>	shift
	if ${DO_CHROOT} || [[ -n ${3} ]]
		then FILE="${SETDIR}/${FUNDIR}"
		else FILE="${ETCDIR}"
	fi
	FILE="$(${LS} -d ${FILE}/${LAYDIR}/*/${2} | ${SED} "s|^${FILE}/${LAYDIR}/||g")"
	if [[ -z ${FILE} ]]; then
		${LL} -d ${FILE}/${LAYDIR}/*/${2}
		EXIT 1
	fi
	if [[ -n ${3} ]]; then
		declare BASE="https://gitweb.gentoo.org/repo/gentoo.git"
		declare OFIL="${3}"; if [[ -z $(echo "${OFIL}" | ${GREP} "[.]ebuild$") ]]; then OFIL="files/${OFIL}"; fi
		declare ID="$(if [[ -n ${4} ]]; then echo "?id=${4}"; fi)"
		declare FAIL=
		declare SKIP=
		if [[ -z $(${GREP} "${BASE}/tree/${FILE}"	${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/.rationale) ]]; then
			echo "${BASE}/tree/${FILE}${ID}"	>>${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/.rationale		|| EXIT 1
		fi
		${MKDIR}					${SETDIR}/${FUNDIR}/${LAYDIR}/$(dirname ${FILE}/${OFIL})	|| EXIT 1
		${WGET_C} -O					${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/${OFIL}			\
								"${BASE}/plain/${FILE}/${OFIL}${ID}"				|| FAIL+=" ${OFIL}" #>>> EXIT 1
		for NEXT in $(${SED} -n				"s|^.*[\"]?[$][{]FILESDIR[}][\"]?/([^[:space:]\"]+).*$|\1|gp"	\
								${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/${OFIL}			2>/dev/null
		); do
			if [[ -n $(echo "${NEXT}" | ${GREP} "[$]") ]]; then SKIP+=" ${NEXT}"; continue; fi
			${MKDIR}				${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/files			|| EXIT 1
			${WGET_C} -O				${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/files/${NEXT}		\
								"${BASE}/plain/${FILE}/files/${NEXT}${ID}"			|| FAIL+=" ${NEXT}" #>>> EXIT 1
		done
#>>>		echo -en "\n"
		echo -en "[${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/.rationale]\n"
		cat ${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/.rationale								|| EXIT 1
		if [[ -n ${FAIL} ]] || [[ -n ${SKIP} ]]; then
			echo -en "\n"
			if [[ -n ${FAIL} ]]; then
				echo -en ">>> THESE FILES WERE NOT DOWNLOADED SUCCESSFULLY: ${FAIL/# } <<<\n"
				echo -en "\n"
			fi
			if [[ -n ${SKIP} ]]; then
				echo -en ">>> THESE FILES WERE SKIPPED: ${SKIP/# } <<<\n"
				echo -en "\n"
			fi
			EXIT 1
		fi
		EXIT 0
	fi
	if ${DO_CHROOT}; then
		mount_dev_dirs													|| EXIT 1
		#note: ensuring configuration is up-to-date
		${_SOUL} ${QUIET_OPT} ${TOOR} -r										|| EXIT 1
		${MKDIR}	${TARGET}${ETCDIR}/${LAYDIR}/$(basename ${FILE})						|| EXIT 1
		${RSYNC_U}	${TARGET}${REPDIR}/kits/*/${FILE}/		${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}.src	|| EXIT 1
		${RSYNC_U}	${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/		${TARGET}${ETCDIR}/${LAYDIR}/${FILE}		|| EXIT 1
		safe_env ${MYSELF} ${QUIET_OPT} ${TOOR} "${@}"									|| EXIT 1
		${RSYNC_U}	${TARGET}${ETCDIR}/${LAYDIR}/${FILE}/Manifest	${SETDIR}/${FUNDIR}/${LAYDIR}/${FILE}/		|| EXIT 1
		${RSYNC_U}	${TARGET}${ETCDIR}/${LAYDIR}/.review.txt	${SETDIR}/${FUNDIR}/${LAYDIR}/			|| EXIT 1
		mount_dev_dirs -u												|| EXIT 1
	else
		FILE="$(realpath ${ETCDIR}/${LAYDIR}/${FILE}/*.ebuild | sort -n | tail -n1)"
		ebuild		${FILE} digest											|| EXIT 1
		(cd		${ETCDIR}/${LAYDIR} && ./.review)								|| EXIT 1
	fi
	EXIT 0
fi

########################################

if [[ ${1} == -l ]]; then
#>>>	shift
	if ${DO_CHROOT}; then
		safe_env ${MYSELF} ${QUIET_OPT} ${TOOR} "${@}" || EXIT 1
		EXIT 0
	fi
	shift
	if [[ -z ${1} ]]; then
		EXIT 0
	elif [[ ${1} == +([0-9]) ]]; then
		echo -en "https://bugs.gentoo.org/show_bug.cgi?id=${1}\n"
	else
		FILE="$(${LS} -d ${REPDIR}/kits/*/*/${1} 2>/dev/null)"
		NEXT="$(echo "${FILE}" | ${SED} "s|^${REPDIR}/kits/.+[/]([^/]+[/][^/]+)$|\1|g")"
		if [[ -z ${FILE} ]]; then
			mount_dev_dirs		|| EXIT 1
			safe_env emerge --search "${@}"
			mount_dev_dirs -u	|| EXIT 1
		else
			echo -en "https://packages.gentoo.org/packages/${NEXT}\n"
			echo -en "https://gitweb.gentoo.org/repo/gentoo.git/log/${NEXT}\n"
			echo -en "https://gentoobrowse.randomdan.homeip.net/package/${NEXT}#bugs\n"
			${LL} -d ${DSTDIR}/$(basename ${FILE})*
			${LL} -d ${PAKDIR}/${NEXT}*
			${LL} -d ${TMPDIR}/${NEXT}-[0-9]*/temp/build.log
			echo -en "${FILE}\n"
			${LL} ${FILE}
		fi
	fi
	EXIT 0
fi

########################################

#>>> for FILE in ${FILELIST}; do more ./build${FILE} ; read continue ; done

if [[ ${1} == -p ]]; then
#>>>	shift
	if ${DO_CHROOT}; then
		safe_env ${MYSELF} ${QUIET_OPT} ${TOOR} "${@}" || EXIT 1
		EXIT 0
	fi
	shift
	${LL} -d ${TMPDIR}
	${LL} ${TMPDIR}
	FILE="$(find ${TMPDIR}/[a-z]* -mindepth 1 -maxdepth 1 2>/dev/null | sort --unique)"
	if [[ -n ${FILE} ]]; then
		echo -en "\n"
		${LL} -d ${FILE}
		for NEXT in ${FILE}; do
			NEXT="$(basename ${NEXT} | ${SED} "s|[-][0-9][^/]+$||g")"
			echo -en "\n[${NEXT}]\n"
			safe_env ${_SOUL} ${QUIET_OPT} -l ${NEXT}
		done
		echo -en "\n"					1>&2
		echo -en "FILELIST=\""				1>&2
		for NEXT in ${FILE}; do
			echo -en "${NEXT}/temp/build.log "
		done |
			${SED} "s|[ ]*$||g"			1>&2
		echo -en "\"\n"					1>&2
		EXIT 1
	fi
	EXIT 0
fi

################################################################################

if [[ ${1} == -[0/12] ]]; then
	${MKDIR} $(dirname ${TARGET}${GENDIR})
	date --iso=seconds >${TARGET}${GENDIR}.log 2>&1
fi

if [[ ${1} == -0 ]]; then shift; ${_SOUL} ${TOOR} -n -a -b -k	-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit ${PIPESTATUS[0]}; fi
if [[ ${1} == -/ ]]; then shift; ${_SOUL} ${TOOR} -a		-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit ${PIPESTATUS[0]}; fi
if [[ ${1} == -1 ]]; then shift; ${_SOUL} ${TOOR} -a -b		-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit ${PIPESTATUS[0]}; fi
if [[ ${1} == -2 ]]; then shift; ${_SOUL} ${TOOR} -c		-i								; exit ${PIPESTATUS[0]}; fi

########################################

if [[ ${1} == -r ]]; then
	if ! ${DO_CHROOT}; then
		requires_chroot "${@}"
	fi
	shift
	${MKDIR}						${TARGET}${ARCDIR}				|| EXIT 1
	if [[ -n ${COMMIT} ]]
		#note: also doing this in "${MAKEIT}" script on purpose
		then echo -en "${COMMIT}"			>${TARGET}/${CMTFIL}				|| EXIT 1
		else ${RM}					${TARGET}/${CMTFIL}				|| EXIT 1
	fi
	if [[ -f ${SETDIR}/.bashrc ]]
		then ${RSYNC_U} --copy-links ${SETDIR}/.bashrc	${TARGET}${ARCDIR}/				|| EXIT 1
		else ${RSYNC_U} --copy-links ${HOME}/.bashrc	${TARGET}${ARCDIR}/				|| EXIT 1
	fi
	${RSYNC_U} ${SETDIR}/${FUNDIR}/				${TARGET}${ARCDIR}/${FUNDIR}			|| EXIT 1
	${RSYNC_U} ${SETDIR}/${LINDIR}/				${TARGET}${ARCDIR}/${LINDIR}			|| EXIT 1
	${RSYNC_C} ${SETDIR}/${FUNDIR}/[a-z]*			${TARGET}${ETCDIR}/				|| EXIT 1
	${RSYNC_U} ${SETDIR}/${FUNDIR}/${LAYDIR}/		${TARGET}${ETCDIR}/${LAYDIR}			|| EXIT 1
	${LN} ../${LAYDIR}/overlay.conf				${TARGET}${ETCDIR}/repos.conf/			|| EXIT 1
	portage_file						${TARGET}${ARCDIR}/${FUNDIR}			|| EXIT 1
	if [[ ${1} == -w ]]; then
		shift
		safe_env					${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -w	|| EXIT 1
	else
		safe_env					${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -W	|| EXIT 1
	fi
	EXIT 0
fi

########################################

if [[ ${1} == -i ]]; then
	if ! ${DO_CHROOT}; then
		requires_chroot "${@}"
	fi
#>>>	shift
	if [[ ! -d ${TARGET}/boot ]]; then
		if [[ ! -d ${SOURCE} ]]; then
			echo -en "\n"
			${LL} -d ${SOURCE}
			requires_chroot "${@}"
		fi
		${MKDIR}				${TARGET}${ARCDIR}					|| EXIT 1
		${RSYNC_U} ${SOURCE}/stage3-*		${TARGET}${ARCDIR}/					|| EXIT 1
		tar -pvvx --xz -C ${TARGET} -f		$(ls -t ${TARGET}${ARCDIR}/stage3-generic_64-*.tar.xz	| head -n1) || EXIT 1
	fi
	shift
	mount_dev_dirs												|| EXIT 1
	if ! ${_CFG}; then
							${_SOUL} ${QUIET_OPT} ${TOOR} ${AUTO} -r -W		|| EXIT 1
	fi
	if ! ${DOFAST} && ! ${_CFG}; then
		#note: this needs to match the name in the "${MAKEIT}" script
		${PREPIT}_repdir										|| EXIT 1
		safe_env				${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -w		|| EXIT 1
	fi
	if ${_BLD}; then
		if ${_NEW}; then
			if [[ -z "$(which expect 2>/dev/null)" ]]; then
				expect_wrapper		emerge ${_ASK} dev-tcltk/expect				|| EXIT 1
			fi
			expect_wrapper			emerge ${_ASK} ${EMERGE_UPDT_OPTS} \@system		|| EXIT 1
			safe_env			${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -f		|| EXIT 1
		fi
#>>>		expect_wrapper				emerge ${_ASK} --emptytree \@system \@world		|| EXIT 1
		expect_wrapper				emerge ${_ASK} --emptytree \@system \@${_PKG}		|| EXIT 1
	fi
	if ${_KRN}; then
		${RM}					${TARGET}/boot/*					|| EXIT 1
		${RM}					${TARGET}/etc/kernels/*					|| EXIT 1
		${RM}					${TARGET}/lib/modules/*					|| EXIT 1
		${RM}					${TARGET}${LDIR}*					|| EXIT 1
		expect_wrapper				emerge ${_ASK} sys-kernel/genkernel ${LINPKG}		|| EXIT 1
		declare KERN="$(cd ${TARGET}/boot; ls kernel-debian-sources-*		2>/dev/null | sort | tail -n1)"
		declare INIT="$(cd ${TARGET}/boot; ls initramfs-debian-sources-*	2>/dev/null | sort | tail -n1)"
		if [[ -n ${KERN} ]]; then
			${RM}				${TARGET}/boot/_kernel					|| EXIT 1
			${LN} ${KERN}			${TARGET}/boot/_kernel					|| EXIT 1
		fi
		if [[ -n ${INIT} ]]; then
			${RM}				${TARGET}/boot/_initrd					|| EXIT 1
			${LN} ${INIT}			${TARGET}/boot/_initrd					|| EXIT 1
		fi
	fi
	if ${_KRN}; then for FILE in ${KERNEL}; do
		${RM}					${TARGET}${LDIR}					|| EXIT 1
		${LN} ${KBAS//${KVER}/${FILE}}		${TARGET}${LDIR}					|| EXIT 1
		${RSYNC_U}				${SETDIR}/${LINDIR}/${KCFG//${KVER}/${FILE}}		\
							${TARGET}${ARCDIR}/${KCFG//${KVER}/${FILE}}		|| EXIT 1
		kernel_cpu				${TARGET}${ARCDIR}/${KCFG//${KVER}/${FILE}}		|| EXIT 1
		declare GENKERNEL_OPTS="--loglevel=5 --bootloader=grub --install --symlink"
		if [[ -z ${AUTO} ]]; then
			expect_wrapper			genkernel ${GENKERNEL_OPTS} kernel --menuconfig		|| EXIT 1
		else
			expect_wrapper			genkernel ${GENKERNEL_OPTS} kernel			\
							--kernel-config=${ARCDIR}/${KCFG//${KVER}/${FILE}}	|| EXIT 1
		fi
		${RSYNC_U}				${TARGET}${LDIR}/.config				\
							${TARGET}${ARCDIR}/${KCFG//${KVER}/${FILE}}		|| EXIT 1
		NEXT="${KFIL//${KVER}/${FILE}}"									|| EXIT 1
		if ! ${_GOS}; then
			${RM}				${TARGET}/boot/_cur					|| EXIT 1
			${LN} ${NEXT}			${TARGET}/boot/_cur					|| EXIT 1
			${RM}				${TARGET}/boot/_new					|| EXIT 1
			${LN} kernel			${TARGET}/boot/_new					|| EXIT 1
			${RM}				${TARGET}/boot/_old					|| EXIT 1
			${LN} kernel.old		${TARGET}/boot/_old					|| EXIT 1
			[[ -L				${TARGET}/boot/kernel.old				]] ||
			${LN} ${NEXT}			${TARGET}/boot/kernel.old				|| EXIT 1
		fi
	done; fi
	if ${_CFG}; then
		#note: these need to match the names in the "${MAKEIT}" script
		#note: compare with the "${MAKEIT}_install" function in the "${MAKEIT}" script
		${MAKEIT}_reset											|| EXIT 1
		if [[ -x ${CFGSCR} ]]; then
			${RSYNC_U} --copy-links		${CFGSCR} \
							${TARGET}${ARCDIR}/$(basename ${CFGSCR})		|| EXIT 1
			safe_env			${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} \
							${ARCDIR}/$(basename ${CFGSCR}) "${@}"			|| EXIT 1
		fi
		mount_dev_dirs -u										|| EXIT 1
		EXIT 0
	fi
	if ! ${DOFAST}; then
		safe_env				${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -f		|| EXIT 1
	fi
	safe_env					${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -u		|| EXIT 1
	mount_dev_dirs -u											|| EXIT 1
	EXIT 0
fi

################################################################################

if [[ ${1} == -W ]]; then
	shift
	portage_file		${ETCDIR}	|| EXIT 1
	cat /dev/null		>/var/lib/portage/world
	echo "@${_PKG}"		>/var/lib/portage/world_sets
	$(for NEXT in ${LINPKG}; do
		echo "${NEXT}"	>>/var/lib/portage/world
	done)
	EXIT 0
fi

########################################

if [[ ${1} == -w ]]; then
	shift
	safe_env ${_SOUL} ${QUIET_OPT} ${TOOR} ${AUTO} -W	|| EXIT 1
	ego profile arch ${EARC}				|| EXIT 1
	ego profile subarch ${ESUB}				|| EXIT 1
	ego profile build current				|| EXIT 1
	ego profile flavor desktop				|| EXIT 1
	ego profile show
	gcc-config $(gcc-config --list-profiles | awk '{print $2;}' | sort -n | tail -n1)
	gcc-config --list-profiles
	java-config --set-system-vm $(java-config --list-available-vm | ${GREP} -o "icedtea[-][0-9]+" | sort -n | tail -n1)
	java-config --list-available-vms
	for FILE in \
		kernel:${KBAS} \
		${SELECT} \
	; do
		declare KEY="$(echo "${FILE}" | ${SED} "s|^(.+)[:](.+)$|\1|g")"
		declare VAL="$(echo "${FILE}" | ${SED} "s|^(.+)[:](.+)$|\2|g")"
		eselect ${KEY} set ${VAL}
		eselect ${KEY} list
	done
	ldconfig
	env-update
	locale-gen
	EXIT 0
fi

########################################

if [[ ${1} == -u ]]; then
	shift
	safe_env ${_SOUL} ${QUIET_OPT} ${TOOR} ${AUTO} -w				|| EXIT 1
	expect_wrapper emerge ${_ASK} ${EMERGE_UPDT_OPTS} \@system \@world		|| EXIT 1
	safe_env ${_SOUL} ${QUIET_OPT} ${TOOR} ${AUTO} -p				|| EXIT 1
	if ! ${DOFAST}; then
		if [[ -n "$(which perl-cleaner 2>/dev/null)" ]]; then
			expect_wrapper perl-cleaner --all				|| EXIT 1
		fi
		if [[ -n "$(which haskell-updater 2>/dev/null)" ]]; then
			expect_wrapper haskell-updater --all				|| EXIT 1
		fi
		expect_wrapper emerge ${_ASK} \@module-rebuild --exclude "${LINPKG}"	|| EXIT 1
		expect_wrapper emerge ${_ASK} \@preserved-rebuild			|| EXIT 1
	fi
	expect_wrapper emerge ${_ASK} --depclean					|| EXIT 1
	if ! ${DOFAST}; then
		expect_wrapper revdep-rebuild --ignore					|| EXIT 1
		expect_wrapper emaint --fix all						|| EXIT 1
		expect_wrapper eclean --verbose distfiles				|| EXIT 1
		expect_wrapper eclean --verbose packages				|| EXIT 1
	fi
	expect_wrapper dispatch-conf							|| EXIT 1

########################################

#>>> declare DISTFILES="/.g/_data/_builds/_gentoo/var/cache/portage/distfiles"
#>>> declare DISTFILES="/.g/_data/_builds/.gary-os.release/_distfiles"
#>>> for FILE in ${FILELIST}; do ${RSYNC_U} ${DISTFILES}/${FILE} ./build/var/cache/portage/distfiles/ ; done

elif [[ ${1} != -! ]]; then
	if [[ ${1} != -f ]]; then
		print_info update
#>>>		expect_wrapper emerge --ask=n --verbose --sync				|| EXIT 1
		expect_wrapper ego sync							|| EXIT 1
		if ! perl -MJSON::XS -e 1; then
			expect_wrapper emerge ${_ASK} dev-perl/JSON-XS			|| EXIT 1
		fi
		${SETDIR}/${FUNDIR}/${FUNKIT} ${REPDIR} ${@}				|| EXIT 1
		if [[ -n "$(which eix-update 2>/dev/null)" ]]; then
			expect_wrapper eix-update					|| EXIT 1
		fi
		for FILE in ${REPDIR}/kits/*kit; do
			echo -en "egencache: ${FILE}\n"
			expect_wrapper egencache --repo "$(basename ${FILE})"		\
				--update-use-local-desc					#>>> || EXIT 1
		done
	fi
	if [[ -z ${1} ]] || [[ ${1} == -f ]]; then
		FILE="true"
		NEXT="--fetch-all-uri"
		if ${_GOS}; then
			NEXT="--fetchonly"
		fi
		expect_wrapper emerge --ask=n --emptytree ${NEXT}			\
			\@system \@world						2>&1 | tee ${DSTDIR}.log
		if [[ ${PIPESTATUS[0]} != 0 ]]; then
			FILE="false"
		fi
		if ! ${FILE}; then
			echo -en "\n"							1>&2
			echo -en "FILELIST=\""						1>&2
			${SED} -n \
				-e "s/^.*Couldn[']t[ ]download[ ][']([^']+).*$/\1/gp"	\
				-e "s/^.*Fetched[ ]file[:][ ]([^ ]+).*$/\1/gp"		\
				-e "s/^.*Please[ ]download[ ]([^ ]+).*$/\1/gp"		\
				-e "s/^.*and[ ]download[ ]([^ ]+).*$/\1/gp"		\
				${DSTDIR}.log						|
					sort --unique					|
					tr '\n' ' '					|
					${SED} "s|[ ]*$||g"				1>&2
			echo -en "\"\n"							1>&2
		fi
		for NEXT in								\
			$(find ${DSTDIR}/*checksum_failure*	2>/dev/null | sort)	\
			$(find ${DSTDIR}/.*.portage_lockfile	2>/dev/null | sort)	;
		do
			${RM} ${NEXT}							1>&2
			FILE="false"
		done
		${RM} ${DSTDIR}.log							1>&2
		if ! ${FILE}; then
			EXIT 1
		fi
	fi
	if [[ -n ${1} ]]; then
		EXIT 0
	fi
fi

################################################################################

#>>> if ! ${_GOS}; then
#>>> 	safe_env ${SETDIR}/${FUNDIR}/.hacks
#>>> fi

########################################

echo -en "\n"
${LL} \
	/tmp \
	/var/tmp

echo -en "\n"
${LL} \
	/boot \
	/etc/kernels \
	/lib/modules \
	/usr/src

echo -en "\n"
${LL} \
	/ \
	/_build

########################################

safe_env ${SETDIR}/${FUNDIR}/${AUDITS}
cat ${GENDIR}/.checks

EXIT 0
################################################################################
# end of file
################################################################################

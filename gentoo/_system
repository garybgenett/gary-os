#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

declare COMMAND_LINE="${@}"

########################################

declare DEBUG_OPT="-q"
declare QUIET_OPT="-g"

declare DEBUG=
declare QUIET=
if [[ ${1} == ${DEBUG_OPT} ]]; then
	DEBUG="${1}"
	shift
fi
if [[ ${1} == ${QUIET_OPT} ]]; then
	QUIET="${1}"
	shift
fi

################################################################################

#OPTIONS[SOURCE GITDIR RELDIR]
declare SOURCE="${SOURCE:-/.g/_data/_target/iso}"
declare GITDIR="${GITDIR:-/.g/_data/_build/funtoo/meta-repo.git}"
declare RELDIR="${RELDIR:-/.g/_data/_builds/_metro}"

#OPTIONS[SETDIR ARCDIR GENDIR FUNDIR LINDIR OVLDIR]
declare SETDIR="${SETDIR:-/.g/_data/zactive/.setup}"
declare ARCDIR="${ARCDIR:-/_build}"
declare GENDIR="${GENDIR:-/_gentoo}"
declare FUNDIR="${FUNDIR:-gentoo}"
declare LINDIR="${LINDIR:-linux}"
declare OVLDIR="${OVLDIR:-_overlay}"

#>>>#OPTIONS[BLDDIR OUTDIR TORDIR METDIR]
declare BLDDIR="${BLDDIR:-/.g/_data/_builds/_gentoo}"
declare OUTDIR="${OUTDIR:-${BLDDIR}.testing}"
declare TORDIR="${TORDIR:-/.g/_toor}"
declare METDIR="${METDIR:-${TORDIR}}"

#>>>#OPTIONS[PKGBLD PKGOUT PKGTOR PKGMET]
declare PKGBLD="${PKGBLD:-packages}"
declare PKGOUT="${PKGOUT:-${PKGBLD}}"
declare PKGTOR="${PKGTOR:-${PKGBLD}}"
declare PKGMET="${PKGMET:-metro}"

################################################################################

#VARIABLES[ETCDIR REPDIR DSTDIR PAKDIR WRKDIR]
declare ETCDIR="/etc/portage"
declare REPDIR="/var/git/meta-repo"
declare DSTDIR="/var/cache/portage/distfiles"
declare PAKDIR="/var/cache/portage/packages"
declare WRKDIR="/var/tmp/portage"

########################################

#VARIABLES[TARGET TOOR _PKG _MET _NEW]
declare TARGET="${BLDDIR}"
declare TOOR=
declare _PKG="${PKGBLD}"
declare _MET=
declare _NEW=

if [[ ${1} == -d ]]; then
	TARGET="${BLDDIR}"
	TOOR="${1}"
	_PKG="${PKGBLD}"
	shift
fi
if [[ ${1} == -x ]]; then
	TARGET="${OUTDIR}"
	TOOR="${1}"
	_PKG="${PKGOUT}"
	shift
fi
if [[ ${1} == -t ]]; then
	TARGET="${TORDIR}"
	TOOR="${1}"
	_PKG="${PKGTOR}"
	shift
fi
if [[ ${1} == -m ]]; then
	TARGET="${METDIR}"
	TOOR="${1}"
	_PKG="${PKGMET}"
	_MET="MET"
	shift
fi
if [[ ${1} == -n ]]; then
	TOOR="${TOOR} ${1}"
	_NEW="NEW"
	shift
fi

########################################

#VARIABLES[AUTO _ASK _BLD _KRN _CFG]
declare AUTO=
declare _ASK="--ask=y"
declare _BLD="false"
declare _KRN="false"
declare _CFG="false"

if [[ ${1} == -a ]]; then
	AUTO="${1}"
	_ASK="--ask=n"
	shift
fi
if [[ ${1} == -b ]]; then
	_BLD="true"
	shift
fi
if [[ ${1} == -k ]]; then
	_KRN="true"
	shift
fi
if [[ ${1} == -c ]]; then
	_CFG="true"
	shift
fi

########################################

#OPTIONS[FUNTOO KERNEL]
declare FUNTOO="${FUNTOO:-$(tail -n1 ${SETDIR}/${FUNDIR}/funtoo)}"
declare KERNEL="${KERNEL:-$(${SED} -n "s|^.+/gentoo-sources:(.+)$|\1|gp" ${SETDIR}/${FUNDIR}/sets/${_PKG})}"

declare COMMIT=
for FILE in \
	.setup	\
	.static
do
	NEXT="$(cat /.g/_data/zactive/${FILE}.git/refs/heads/master 2>/dev/null)"
	if [[ -n "${NEXT}" ]]; then
		COMMIT="${COMMIT}${FILE}: ${NEXT}\n"
	fi
done

########################################

#VARIABLES[HOME HOMELY SAFE_ENV]
declare HOMELY="/.home"
declare MYSELF="${ARCDIR}/${FUNDIR}/${SCRIPT}"

FILE="$(
	FILE="OPTIONS"
	for NEXT in $(${SED} -n "s/^.*[#]${FILE}[[](.+)[]]$/\1/gp" ${_SELF}); do
		echo -en " ${NEXT}=${!NEXT}"
	done
)"
SAFE_ENV="prompt -z${FILE}"
if
{ [[ -n "${DEBUG}" ]] && [[ -n "${TOOR}" ]]; } ||
{ [[ -n "${TOOR}" ]] && [[ ${1} == -l ]]; } ||
{ [[ -n "${TOOR}" ]] && [[ ${1} == -o ]]; } ||
{ [[ -n "${TOOR}" ]] && [[ ${1} == -p ]]; } ||
{ [[ ${1} == -i ]] || [[ ${1} == -s ]]; }
then
	SAFE_ENV="prompt -z${FILE} HOME=${HOMELY} SETDIR=${ARCDIR} BLDDIR=/ chroot ${TARGET}"
fi

########################################

declare VARSREGEX="[A-Z][A-Z0-9_]+"
declare MASKREGEX="^[[:space:]]+(${VARSREGEX})([[:space:]].*)?$"
#>>>man make.conf | ${GREP} "${MASKREGEX}|$"
#>>>man make.conf | ${GREP} "${MASKREGEX}" | ${GREP} "${VARSREGEX}"

#>>>$(man make.conf | ${SED} -n "s/${MASKREGEX}/\1/gp")
declare MASKVARS="
$(man make.conf | ${GREP} "${MASKREGEX}" | ${GREP} --only-matching "${VARSREGEX}")
CARCH
"
declare SKIPVARS="
DIR
URI
"
declare KEEPVARS="
${SKIPVARS}
PATH
"

function clear_environment {
	for FILE in $(
		echo "${MASKVARS}" |
		${SED} "/^$/d" |
		sort --field-separator=" " --unique |
		${GREP} --invert-match "^($(
			echo "${KEEPVARS}" |
			${SED} "/^$/d" |
			tr '\n' '|' |
			${SED} -e "s/^[|]*//g" -e "s/[|]*$//g"
		))$"
	); do
		if [[ -z "${QUIET}" ]]; then
#>>>			echo -en "${FILE}=${!FILE}\n" | ${GREP} "[=].*$"	1>&2
			echo -en "${FILE}=${!FILE}\n" | ${GREP} "[=].+$"	1>&2
		fi
		unset ${FILE}						1>&2
	done
	return 0
}

########################################

declare FILE=
declare NEXT=

################################################################################

function print_info {
	if [[ -n "${QUIET}" ]]; then
		return 0
	fi
	declare TITLE="\e[1;32m"	# light green
	declare STATE="\e[0;35m"	# magenta
	declare HOWTO="\e[0;36m"	# cyan
	declare NOTES="\e[0;33m"	# yellow
	declare OTHER="\e[1;34m"	# dark blue
	declare RESET="\e[0;37m"	# light gray
	if [[ ${1} == "marker" ]]; then
		echo -en "${OTHER}"
		printf "~%.0s" {1..80}
		echo -en "${RESET}\n"
	elif [[ ${1} == "usage" ]]; then
		declare PRINTF=
		PRINTF+="${TITLE}%-45.45s${RESET} "
		PRINTF+="${STATE}%-15.15s${RESET} "
		PRINTF+="${HOWTO}%s${RESET}\n"
		echo -en "${NOTES}"
		echo -en ">>> USAGE <<<"
		echo -en "${RESET}\n"
		printf "${PRINTF}" "Update All Data (Repo/Sources/Metadata):"	"<auto>"	"${SCRIPT}"
		printf "${PRINTF}" "Update Data (Metadata Only):"		"<auto>"	"${SCRIPT} -!"
		printf "${PRINTF}" "Update Data (Sources Only):"		"<auto>"	"${SCRIPT} -f"
		echo -en "\n"
		printf "${PRINTF}" "Update System (Automatically):"		"<auto>"	"${SCRIPT} -a -u"
		printf "${PRINTF}" "Update System (Interactively):"		"<interactive>"	"${SCRIPT} -u"
		echo -en "\n"
		printf "${PRINTF}" "Information Lookup (Package Data):"		"<output>"	"${SCRIPT} [{chroot}] -l {package}"
		printf "${PRINTF}" "Information Lookup (Package Search):"	"<output>"	"${SCRIPT} [{chroot}] -l {search}"
		printf "${PRINTF}" "Information Lookup (Gentoo Bug URL):"	"<output>"	"${SCRIPT} [{chroot}] -l {bug_id}"
		echo -en "\n"
		printf "${PRINTF}" "Build Configuration (Internal Only):"	"<internal>"	"${SCRIPT} [{chroot}] -w"
		printf "${PRINTF}" "Build Examination (Review Failures):"	"<output>"	"${SCRIPT} [{chroot}] -p"
		echo -en "\n"
		printf "${PRINTF}" "Validation (Usage/Variables Only):"		"<output>"	"${SCRIPT} -q [{chroot}] [{options}]"
		printf "${PRINTF}" "Suppress Output (Internal Only)"		"<internal>"	"${SCRIPT} -g [{chroot}] [{options}]"
		echo -en "\n"
		echo -en "${NOTES}"
		echo -en ">>> CHROOT <<<"
		echo -en "${RESET}\n"
		echo -en "${STATE}"
		echo -en ">>> DEFAULTS: TARGET=\$BLDDIR _PKG=\$PKGBLD <<<"
		echo -en "${RESET}\n"
		printf "${PRINTF}" "Chroot Selection [-d] (\$PKGBLD/\$BLDDIR):"	"${PKGBLD}"	"${BLDDIR}"
		printf "${PRINTF}" "Chroot Selection [-x] (\$PKGOUT/\$OUTDIR):"	"${PKGOUT}"	"${OUTDIR}"
		printf "${PRINTF}" "Chroot Selection [-t] (\$PKGTOR/\$TORDIR):"	"${PKGTOR}"	"${TORDIR}"
		printf "${PRINTF}" "Chroot Selection [-m] (\$PKGMET/\$METDIR):"	"${PKGMET}"	"${METDIR}"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Build (Initial):"			"<auto>"	"${SCRIPT} [{chroot}] -0"
		printf "${PRINTF}" "Chroot Build (Update Only):"		"<auto>"	"${SCRIPT} [{chroot}] -/"
		printf "${PRINTF}" "Chroot Build (Complete Rebuild):"		"<auto>"	"${SCRIPT} [{chroot}] -1"
		printf "${PRINTF}" "Chroot Build (Configuration):"		"<interactive>"	"${SCRIPT} [{chroot}] -2"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Configuration (Overlay Helper):"	"<auto>"	"${SCRIPT} [{chroot}] -o {package}"
		printf "${PRINTF}" "Chroot Configuration (Internal Only):"	"<internal>"	"${SCRIPT} [{chroot}] -r"
		printf "${PRINTF}" "Chroot Shell (Bash):"			"<interactive>"	"${SCRIPT} [{chroot}] -s"
		printf "${PRINTF}" "Chroot Shell (Run Command):"		"<auto>"	"${SCRIPT} [{chroot}] -s {command}"
		printf "${PRINTF}" "Chroot Emerge Command (Automatically):"	"<auto>"	"${SCRIPT} [{chroot}] -a -s -e {command}"
		printf "${PRINTF}" "Chroot Emerge Command (Interactively):"	"<interactive>"	"${SCRIPT} [{chroot}] -s -e {command}"
		printf "${PRINTF}" "Chroot Emerge Tree:"			"<auto>"	"${SCRIPT} [{chroot}] -s -t"
		echo -en "\n"
		printf "${PRINTF}" "Chroot Unmount Cleanup:"			"<auto>"	"${SCRIPT} [{chroot}] -z"
	elif [[ ${1} == "starter" ]]; then
		function starter_var {
			declare COLOR="${HOWTO}"
			declare VAR="${1}"
			if [[ -z "${!VAR}" ]]; then
				COLOR="${STATE}"
			fi
			declare PRINTF=
			PRINTF+="${TITLE}%-15.15s${RESET} "
			PRINTF+="${COLOR}%s${RESET}\n"
			printf "${PRINTF}" "${VAR}:" "${!VAR:-(unset)}"
		}
		echo -en "${NOTES}"
		echo -en ">>> ARGUMENTS <<<"
		echo -en "${RESET}\n"
		starter_var "COMMAND_LINE"
		starter_var "DEBUG"
		starter_var "QUIET"
		echo -en "\n"
		declare BEG="true"
		for FILE in OPTIONS VARIABLES; do
			if ${BEG}; then BEG="false"; else echo -en "\n"; fi
			echo -en "${NOTES}"
			echo -en ">>> ${FILE} <<<"
			echo -en "${RESET}\n"
			declare END="true"
			${SED} -n "s/^[#]${FILE}[[](.+)[]]$/\1/gp" ${_SELF} | while read -r NEXT; do
				if ${END}; then END="false"; else echo -en "\n"; fi
				for FILE in ${NEXT}; do
					starter_var "${FILE}"
				done
			done
		done
	elif [[ ${1} == "environment" ]]; then
		echo -en "${NOTES}"
		echo -en "Clearing Environment Variables..."
		echo -en "${RESET}\n"
	elif [[ ${1} == "update" ]]; then
		echo -en "${NOTES}"
		echo -en "Preparing To Update All Data"
		for FILE in {1..10}; do
			echo -en "."
			sleep 1
		done
		echo -en "${RESET}\n"
	elif [[ ${1} == "mount" ]]; then
		echo -en "${NOTES}"
		echo -en "Mounting Chroot Directories..."
		echo -en "${RESET}\n"
	elif [[ ${1} == "umount" ]]; then
		echo -en "${NOTES}"
		echo -en "Unmounting Chroot Directories..."
		echo -en "${RESET}\n"
	else
		echo -en "${NOTES}"
		echo -en "Somebody Made A Mistake..."
		echo -en "${RESET}\n"
	fi
	return 0
}

########################################

function expect_wrapper {
	declare EXPECT_CMD="spawn -noecho ${@};"
	EXPECT_CMD+=" "; EXPECT_CMD+="set timeout -1;"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="expect"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase yes*/*no*	{send y\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase use-new*	{send u\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="default {}"
	EXPECT_CMD+=" "; EXPECT_CMD+="eof"
	EXPECT_CMD+=" "; EXPECT_CMD+=";"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="lassign [wait] pid spawnid os_error exit_status;"
	EXPECT_CMD+=" "; EXPECT_CMD+="if {(\$os_error == 0) && (\$exit_status == 0)} { exit 0; } else { exit 1; };"
	if [[ -n ${AUTO} ]] && {
		{ [[ -n "${TOOR}" ]] && [[ -x "${TARGET}/usr/bin/expect" ]]; } ||
		{ [[ -z "${TOOR}" ]] && [[ -x "/usr/bin/expect" ]]; }
	}; then
		${SAFE_ENV} expect -c "${EXPECT_CMD}"	|| return 1
	else
		${SAFE_ENV} "${@}"			|| return 1
	fi
	return 0
}

########################################

function mount_dev_dirs {
	declare DEV_DIRS=
	DEV_DIRS[0]="/dev"
	DEV_DIRS[1]="/dev/pts"
	DEV_DIRS[2]="/dev/shm"
	DEV_DIRS[3]="/proc"
	DEV_DIRS[4]="/sys"
	if [[ -z ${1} ]]; then
		print_info mount
		for FILE in ${DEV_DIRS[@]}; do
			if [[ -z "$(mount | ${GREP} "${FILE} on ${TARGET}${FILE}")" ]]; then
				mount --verbose --bind ${FILE} ${TARGET}${FILE}	|| return 1
			fi
		done
		print_info marker
	elif [[ ${1} == -u ]]; then
		shift
		print_info marker
		print_info umount
		if [[ -z "$(
			lsof |
			${GREP} "${TARGET}/" |
			${SED} "s/^.*[[:space:]]([^[:space:]]+)$/\1/g" |
			sort --unique
		)" ]]; then
			for FILE in $(eval echo "{$((${#DEV_DIRS[@]}-1))..0}"); do
				umount --verbose ${TARGET}${DEV_DIRS[${FILE}]}	#>>>|| return 1
			done
		fi
		mount | ${GREP} "${TARGET}/"					1>&2
		if [[ -n "$(mount | ${GREP} "${TARGET}/")" ]]; then		return 1; fi
	fi
	return 0
}

################################################################################

print_info marker;	print_info usage
print_info marker;	print_info starter
print_info marker;	print_info environment;	clear_environment
print_info marker

########################################

if [[ -n "${DEBUG}" ]]; then
	if [[ -n "${TOOR}" ]]; then
		set -x
		${SAFE_ENV} ${MYSELF} ${DEBUG}
	fi
	exit 0
fi

################################################################################

if [[ ${1} == -z ]]; then
	shift
	mount_dev_dirs -u	|| exit 1
	exit 0
fi

########################################

if [[ ${1} == -s ]]; then
	shift
	mount_dev_dirs							|| exit 1
	if [[ ${1} == -t ]]; then
		shift
		expect_wrapper emerge ${_ASK} \
			--pretend \
			--emptytree \
			--tree \
			--unordered-display \
			\@system \@world				|| exit 1
	elif [[ ${1} == -e ]]; then
		shift
		expect_wrapper emerge ${_ASK} "${@}"			|| exit 1
	else
		${SAFE_ENV} /usr/bin/env bash -o vi ${@:+-c "${@}"}	|| exit 1
	fi
	mount_dev_dirs -u						|| exit 1
	exit 0
fi

########################################

if [[ ${1} == -l ]]; then
	if [[ -n "${TOOR}" ]]; then
		${SAFE_ENV} ${MYSELF} ${QUIET} "${@}"
		exit 0
	fi
	shift
	if [[ -z ${1} ]]; then
		exit 0
	elif [[ ${1} == +([0-9]) ]]; then
		echo -en "https://bugs.gentoo.org/show_bug.cgi?id=${1}"
	else
		FILE="$(${LS} -d ${REPDIR}/kits/*/*/${1} 2>/dev/null)"
		NEXT="$(echo "${FILE}" | ${SED} "s|^${REPDIR}/kits/.+[/]([^/]+[/][^/]+)$|\1|g")"
		if [[ -z ${FILE} ]]; then
			${SAFE_ENV} emerge --search "${@}"
		else
			echo -en "https://packages.gentoo.org/packages/${NEXT}\n"
			echo -en "https://gentoobrowse.randomdan.homeip.net/package/${NEXT}#bugs\n"
			${LL} -d ${DSTDIR}/$(basename ${FILE})*
			${LL} -d ${PAKDIR}/${NEXT}*
			${LL} -d ${WRKDIR}/${NEXT}-[0-9]*/temp/build.log
			echo -en "${FILE}\n"
			${LL} ${FILE}
		fi
	fi
	exit 0
fi

########################################

if [[ ${1} == -o ]]; then
	if [[ -n "${TOOR}" ]]; then
		FILE="${SETDIR}/${FUNDIR}"
	else	FILE="${ETCDIR}"
	fi
	FILE="$(${LS} -d ${FILE}/${OVLDIR}/*/${2} | ${SED} "s|^${FILE}/${OVLDIR}/||g")"
	NEXT="$(dirname ${FILE})"
	if [[ -n "${TOOR}" ]]; then
		${MKDIR}	${TARGET}${ETCDIR}/${OVLDIR}/${NEXT}							|| exit 1
		${RSYNC_U}	${SETDIR}/${FUNDIR}/${OVLDIR}/${FILE}/		${TARGET}${ETCDIR}/${OVLDIR}/${FILE}	|| exit 1
		${SAFE_ENV} ${MYSELF} ${QUIET} "${@}"
		${RSYNC_U}	${TARGET}${ETCDIR}/${OVLDIR}/${FILE}/Manifest	${SETDIR}/${FUNDIR}/${OVLDIR}/${FILE}/	|| exit 1
		exit 0
	fi
	shift
	ebuild			${ETCDIR}/${OVLDIR}/${FILE}/*.ebuild digest						|| exit 1
	exit 0
fi

########################################

if [[ ${1} == -p ]]; then
	if [[ -n "${TOOR}" ]]; then
		${SAFE_ENV} ${MYSELF} ${QUIET} "${@}"
		exit 0
	fi
	shift
	${LL} -d ${WRKDIR}
	${LL} ${WRKDIR}
	FILE="$(find ${WRKDIR}/[a-z]* -mindepth 1 -maxdepth 1 2>/dev/null | sort --unique)"
	if [[ -n "${FILE}" ]]; then
		echo -en "\n"
		${LL} -d ${FILE}
		for NEXT in ${FILE}; do
			NEXT="$(basename ${NEXT} | ${SED} "s/[-][0-9][^/]+$//g")"
			echo -en "\n[${NEXT}]\n"
			${SAFE_ENV} ${_SELF} ${QUIET_OPT} -l ${NEXT}
		done
		echo -en "\n"					1>&2
		echo -en "FILELIST=\""				1>&2
		for NEXT in ${FILE}; do
			echo -en "${NEXT}/temp/build.log "
		done |
			${SED} "s/[ ]*$//g"			1>&2
		echo -en "\"\n"					1>&2
		exit 1
	fi
	exit 0
fi

################################################################################

if [[ ${1} == -[0/12] ]]; then
	date --iso=seconds >${TARGET}${GENDIR}.log 2>&1
fi

if [[ ${1} == -0 ]]; then shift; ${_SELF} ${TOOR} -n -a -b -k	-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit 0; fi
if [[ ${1} == -/ ]]; then shift; ${_SELF} ${TOOR} -a		-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit 0; fi
if [[ ${1} == -1 ]]; then shift; ${_SELF} ${TOOR} -a -b		-i 2>&1 | tee --append ${TARGET}${GENDIR}.log | prompt -c	; exit 0; fi
if [[ ${1} == -2 ]]; then shift; ${_SELF} ${TOOR} -c		-i								; exit 0; fi

########################################

if [[ ${1} == -r ]]; then
	shift
	${MKDIR}						${TARGET}${HOMELY}		|| exit 1
	if [[ -f ${SETDIR}/.bashrc ]]
	then ${RSYNC_U} --copy-links ${SETDIR}/.bashrc		${TARGET}${HOMELY}/		|| exit 1
	else ${RSYNC_U} --copy-links ${HOME}/.bashrc		${TARGET}${HOMELY}/		|| exit 1
	fi
	${MKDIR}						${TARGET}${ARCDIR}		|| exit 1
	if [[ -n "${COMMIT}" ]]; then echo -en "${COMMIT}"	>${TARGET}${ARCDIR}/_commit	|| exit 1; fi
	${RSYNC_U} ${SETDIR}/${FUNDIR}/				${TARGET}${ARCDIR}/${FUNDIR}	|| exit 1
	${RSYNC_U} ${SETDIR}/${LINDIR}/				${TARGET}${ARCDIR}/${LINDIR}	|| exit 1
	${RSYNC_U} ${SETDIR}/${FUNDIR}/[a-z_]*			${TARGET}${ETCDIR}/		|| exit 1
	${LN} ${ETCDIR}/${OVLDIR}/overlay.conf			${TARGET}${ETCDIR}/repos.conf/	|| exit 1
	chown -R root:root					${TARGET}${ETCDIR}		|| exit 1
	chmod -R 755						${TARGET}${ETCDIR}		|| exit 1
	exit 0
fi

########################################

if [[ ${1} == -i ]]; then
	shift
	if [[ ! -d ${TARGET}/boot ]]; then
#>>>		tar -pvvxJ -C ${TARGET} -f	$(ls -t ${SOURCE}/stage3-*i686*funtoo*.tar.xz		| head -n1) || exit 1
		tar -pvvxJ -C ${TARGET} -f	$(ls -t ${SOURCE}/stage3-*core2_64*funtoo*.tar.xz	| head -n1) || exit 1
		${MKDIR}			${TARGET}${ARCDIR}					|| exit 1
		${RSYNC_U} ${SOURCE}/*funtoo*	${TARGET}${ARCDIR}/					|| exit 1
	fi
	mount_dev_dirs											|| exit 1
#>>>	${SAFE_ENV}				${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -r		|| exit 1
						${_SELF} ${QUIET_OPT} ${TOOR} ${AUTO} -r		|| exit 1
	if [[ ! -d ${TARGET}${REPDIR} ]]; then
		FILE="$(basename ${REPDIR})"
		${MKDIR}			${TARGET}${REPDIR}{,.git}				|| exit 1
		${RSYNC_U} ${GITDIR}/		${TARGET}${REPDIR}.git					|| exit 1
		${SETDIR}/${FUNDIR}/funtoo.kits	${TARGET}${REPDIR} ${FUNTOO}				|| exit 1
		${SAFE_ENV}			${MYSELF} ${QUIET_OPT} ${AUTO} ${FUNTOO}		|| exit 1
	fi
	${SAFE_ENV}				${MYSELF} ${QUIET_OPT} ${TOOR} ${AUTO} -w		|| exit 1
	if ${_BLD}; then
		if [[ -n ${_NEW} ]]; then
			expect_wrapper		emerge ${_ASK} expect					|| exit 1
			${SAFE_ENV}		${MYSELF} ${QUIET_OPT} ${AUTO} -f			|| exit 1
			expect_wrapper		emerge ${_ASK} --deep --newuse --update \@system	|| exit 1
		else
			expect_wrapper		emerge ${_ASK} --emptytree \@system \@world		|| exit 1
		fi
	fi
	if ${_KRN}; then for FILE in ${KERNEL}; do
		${RM}				${TARGET}/usr/src/linux					|| exit 1
		${LN} linux-${FILE}-gentoo	${TARGET}/usr/src/linux					|| exit 1
		expect_wrapper			emerge ${_ASK} genkernel =gentoo-sources-${FILE}	|| exit 1
		declare GENKERNEL_OPTS="--loglevel=5 --bootloader=grub --symlink kernel"
		if [[ -z ${AUTO} ]]; then
			expect_wrapper		genkernel ${GENKERNEL_OPTS} kernel --menuconfig		|| exit 1
		else
			expect_wrapper		genkernel ${GENKERNEL_OPTS} kernel			\
				--kernel-config=${ARCDIR}/${LINDIR}/config-gentoo64-${FILE}		|| exit 1
		fi
#>>>		FILE="kernel-genkernel-x86-${FILE}-gentoo"						|| exit 1
		FILE="kernel-genkernel-x86_64-${FILE}-gentoo"						|| exit 1
		${RM}				${TARGET}/boot/_cur					|| exit 1
		${LN} ${FILE}			${TARGET}/boot/_cur					|| exit 1
		${RM}				${TARGET}/boot/_new					|| exit 1
		${LN} kernel			${TARGET}/boot/_new					|| exit 1
		${RM}				${TARGET}/boot/_old					|| exit 1
		${LN} kernel.old		${TARGET}/boot/_old					|| exit 1
		{ [[ -L				${TARGET}/boot/kernel.old ]] ||
		${LN} ${FILE}			${TARGET}/boot/kernel.old; }				|| exit 1
	done; fi
	declare KERNEL="$(cd ${TARGET}/boot; ls kernel-debian-sources-*		2>/dev/null | sort | tail -n1)"
	declare INITRD="$(cd ${TARGET}/boot; ls initramfs-debian-sources-*	2>/dev/null | sort | tail -n1)"
	if [[ -n ${KERNEL} ]]; then
		${RM}				${TARGET}/boot/_kernel					|| exit 1
		${LN} ${KERNEL}			${TARGET}/boot/_kernel					|| exit 1
	fi
	if [[ -n ${INITRD} ]]; then
		${RM}				${TARGET}/boot/_initrd					|| exit 1
		${LN} ${INITRD}			${TARGET}/boot/_initrd					|| exit 1
	fi
	if ${_CFG}; then
		cat >>${TARGET}/etc/passwd <<END_OF_FILE
---
root:x:0:0::/.g/_data/zactive/.home:/bin/bash
plastic:x:1000:1000::/.g/_data/zactive/.home:/bin/bash
user:x:1001:1001::/.g/_data/zactive/.home:/bin/bash
null:x:666:666::/tmp/.null:/bin/nologin
lfs-user:x:9999:9999::/.g/_data/_builds/_lfs/.lfs/lfs-user:/bin/bash
---
END_OF_FILE
		cat >>${TARGET}/etc/shadow <<END_OF_FILE
---
root::::::::
plastic::::::::
user:*:::::::
null:*:::::::
lfs-user:*:::::::
---
END_OF_FILE
		cat >>${TARGET}/etc/group <<END_OF_FILE
---
root:x:0:root,plastic
wheel:x:10:root,plastic,lfs-user
plastic:x:1000:root,plastic
user:x:1001:root,plastic,user
null:x:666:root,plastic,null
lfs-user:x:9999:root,plastic,lfs-user
---
audio:x:---:root,plastic,null
cdrom:x:---:root,plastic,null
video:x:---:root,plastic,null
games:x:---:root,plastic,null
---
END_OF_FILE
		cat >>${TARGET}/etc/gshadow <<END_OF_FILE
---
root:::root,plastic
wheel:::root,plastic,lfs-user
plastic:::root,plastic
user:::root,plastic,user
null:::root,plastic,null
lfs-user:::root,plastic,lfs-user
---
audio:::root,plastic,null
cdrom:::root,plastic,null
video:::root,plastic,null
games:::root,plastic,null
---
END_OF_FILE
		cat >>${TARGET}/etc/pam.d/su <<END_OF_FILE
---
auth sufficient pam_wheel.so use_uid trust
auth required pam_wheel.so use_uid
---
END_OF_FILE
		cat >>${TARGET}/etc/sudoers <<END_OF_FILE
---
Defaults exempt_group=wheel
%wheel ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: ALL
---
END_OF_FILE
		${EDITOR}			${TARGET}/etc/passwd	\
						${TARGET}/etc/shadow	\
						${TARGET}/etc/group	\
						${TARGET}/etc/gshadow	\
						${TARGET}/etc/pam.d/su	\
						${TARGET}/etc/sudoers
		for FILE in			root	\
						plastic
		do				echo -en "password: ${FILE}\n"
			until			${SAFE_ENV} passwd ${FILE}
			do			echo -en "retry: ${FILE}\n"
			done
		done
	fi
	if [[ -z ${_MET} ]]; then
		${SAFE_ENV}			${MYSELF} ${QUIET_OPT} ${AUTO} -f	|| exit 1
	fi
	${SAFE_ENV}				${MYSELF} ${QUIET_OPT} ${AUTO} -u	|| exit 1
	mount_dev_dirs -u								|| exit 1
	exit 0
fi

################################################################################

if [[ ${1} == -w ]]; then
	shift
	for FILE in \
		${ETCDIR}/make.conf	\
		${ETCDIR}/package.*
	do
		${SED} -i "s|^[#][{]${_MET}[}][ ](.+)$|\1|g" ${FILE}
		${SED} -i "s|^[#][{]${_NEW}[}][ ](.+)$|\1|g" ${FILE}
	done
	ego profile build stable	|| exit 1
	ego profile flavor desktop	|| exit 1
	ego profile show
	locale-gen
	gcc-config $(source ${ETCDIR}/make.conf; echo "${CHOST}")-$(equery list gcc | awk '{print $1;}' | cut -d- -f3 | sort -n | tail -n1)
	gcc-config --list-profiles
	java-config --set-system-vm $(equery list icedtea | awk '{print $1;}' | ${GREP} -v "^$" | cut -d/ -f2 | cut -d. -f1 | tail -n1)
	java-config --list-available-vms
	for FILE in \
		mesa:--auto		\
		opengl:xorg-x11		\
		python:python3.6	\
		unison:2.48		\
		vi:vim			\
		\
		$(for NEXT in ${KERNEL}; do
			echo "kernel:linux-${NEXT}-gentoo"
		done)
	do
		declare KEY="$(echo "${FILE}" | ${SED} "s/^(.+)[:](.+)$/\1/g")"
		declare VAL="$(echo "${FILE}" | ${SED} "s/^(.+)[:](.+)$/\2/g")"
		eselect ${KEY} set ${VAL}
		eselect ${KEY} list
	done
	cat /dev/null	>/var/lib/portage/world
	echo "@${_PKG}"	>/var/lib/portage/world_sets
	exit 0
fi

########################################

if [[ ${1} == -u ]]; then
	shift
	${SAFE_ENV} ${_SELF} ${QUIET_OPT} ${AUTO} -w				|| exit 1
	expect_wrapper emerge ${_ASK} --deep --newuse --update \@system \@world	|| exit 1
	${SAFE_ENV} ${_SELF} ${QUIET_OPT} ${AUTO} -p				|| exit 1
	expect_wrapper python-updater						|| exit 1
	expect_wrapper perl-cleaner --all					|| exit 1
	expect_wrapper haskell-updater --all					|| exit 1
	expect_wrapper emerge ${_ASK} \@module-rebuild				|| exit 1
	expect_wrapper emerge ${_ASK} \@preserved-rebuild			|| exit 1
	expect_wrapper emerge ${_ASK} --depclean				|| exit 1
	expect_wrapper revdep-rebuild --ignore					|| exit 1
	expect_wrapper emaint --fix all						|| exit 1
	expect_wrapper eclean --verbose distfiles				|| exit 1
	expect_wrapper eclean --verbose packages				|| exit 1
	expect_wrapper dispatch-conf						|| exit 1

########################################

elif [[ ${1} != -! ]]; then
	if [[ -z ${1} ]]; then
		print_info update
	fi
	if [[ ${1} != -f ]]; then
		declare GIT="$(which git)"
#>>>		expect_wrapper emerge --ask=n --verbose --sync				|| exit 1
		expect_wrapper ego sync							|| exit 1
		${ETCDIR}/funtoo.kits ${REPDIR} ${1}					|| exit 1
		for FILE in ${REPDIR}/kits/*kit; do
			echo -en "egencache: ${FILE}\n"
			expect_wrapper egencache --repo "$(basename ${FILE})"		\
				--update-use-local-desc					#>>>|| exit 1
		done
	fi
	if [[ -z ${1} ]] || [[ ${1} == -f ]]; then
		FILE="true"
		expect_wrapper emerge --ask=n --emptytree --fetch-all-uri		\
			\@system \@world						2>&1 | tee ${DSTDIR}.log
		if [[ ${PIPESTATUS[0]} != 0 ]]; then
			FILE="false"
		fi
		if ! ${FILE}; then
			echo -en "\n"							1>&2
			echo -en "FILELIST=\""						1>&2
			${SED} -n \
				-e "s/^.*Couldn[']t[ ]download[ ][']([^']+).*$/\1/gp"	\
				-e "s/^.*Fetched[ ]file[:][ ]([^ ]+).*$/\1/gp"		\
				-e "s/^.*and[ ]download[ ]([^ ]+).*$/\1/gp"		\
				${DSTDIR}.log						|
					sort --unique					|
					tr '\n' ' '					|
					${SED} "s/[ ]*$//g"				1>&2
			echo -en "\"\n"							1>&2
		fi
		for NEXT in								\
			$(find ${DSTDIR}/*checksum_failure*	2>/dev/null | sort)	\
			$(find ${DSTDIR}/.*.portage_lockfile	2>/dev/null | sort)	;
		do
			${RM} ${NEXT}							1>&2
			FILE="false"
		done
		${RM} ${DSTDIR}.log							1>&2
		if ! ${FILE}; then
			exit 1;
		fi
	fi
	if [[ -n ${1} ]]; then
		exit 0
	fi
fi

################################################################################

${SAFE_ENV} ${SETDIR}/${FUNDIR}/.emergent
#>>>if [[ -z ${_MET} ]]; then
#>>>	${SAFE_ENV} ${SETDIR}/${FUNDIR}/.hacks
#>>>fi

########################################

if [[ -z ${AUTO} ]] && [[ ${1} == -u ]]; then
	eselect news read new
	echo -en "\n"
	glsa-check --verbose --cve --test all
fi

########################################

echo -en "\n"
wc -l ${GENDIR}/_packages
wc -l ${GENDIR}/_packages.db

echo -en "\n"
diff ${DIFF_OPTS} ${GENDIR}/_packages.db ${GENDIR}/_packages |
	${GREP} "^[-+]"

echo -en "\n"
${LL} ${GENDIR}
if [[ -n "$(diff ${GENDIR}/+okay ${GENDIR}/+okay.okay 2>/dev/null)" ]]; then
	cat ${GENDIR}/+okay
fi

exit 0
################################################################################
# end of file
################################################################################

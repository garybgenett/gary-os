#!/usr/bin/env bash
source ${HOME}/.bashrc
################################################################################

declare SOURCE="/.g/_data/_target/iso"
declare BUILDS="/.g/_data/_builds/_gentoo"
declare GITDIR="/.g/_data/_build/funtoo/meta-repo.git"
declare METDIR="/.g/_data/_builds/_metro"

declare DSTDIR="usr/portage/distfiles"
declare PKGDIR="usr/portage/packages"

declare SETDIR="${HOME}/setup"
declare FUNDIR="${SETDIR}/gentoo"
declare LINDIR="${SETDIR}/linux"

declare TARGET="${BUILDS}"
declare TOOR=
declare _NEW=
declare _MET=
declare _PKG="packages"
if [[ ${1} == -t ]]; then
	shift
	TARGET="/.g/_toor"
	TOOR="-t"
fi
if [[ ${1} == -m ]]; then
	shift
	TARGET="/.g/_toor"
	TOOR="-m"
	_MET="MET"
	_PKG="metro"
fi
if [[ ${1} == -n ]]; then
	shift
	TOOR="${TOOR} -n"
	_NEW="NEW"
fi

########################################

declare FILE=
declare NEXT=

########################################

unset EMERGE_DEFAULT_OPTS

declare FUNTOO_VER="$(tail -n1 ${FUNDIR}/funtoo)"
declare KERNEL_VER="$(${SED} -n "s|^.+/gentoo-sources:(.+)$|\1|gp" ${FUNDIR}/sets/${_PKG})"

declare COMMIT=
for FILE in \
	.setup	\
	.static
do
	COMMIT="${COMMIT}${FILE}: $(
		cat /.g/_data/zactive/${FILE}.git/refs/heads/master 2>/dev/null
	)\n"
done

########################################

declare AUTO=
declare ASK="--ask=y"
if [[ ${1} == -a ]]; then
	shift
	AUTO="-a"
	ASK="--ask=n"
fi

declare BLD="false"
declare KRN="false"
declare CFG="false"
if [[ ${1} == -b ]]; then
	shift
	BLD="true"
fi
if [[ ${1} == -k ]]; then
	shift
	KRN="true"
fi
if [[ ${1} == -c ]]; then
	shift
	CFG="true"
fi

########################################

declare SAFE_ENV="prompt -z"
if [[ ${1} == -i ]] || [[ ${1} == -s ]]; then
	SAFE_ENV="prompt -z chroot ${TARGET}"
fi

################################################################################

function mount_dev_dirs {
	declare DEV_DIRS=
	DEV_DIRS[0]="/dev"
	DEV_DIRS[1]="/dev/pts"
	DEV_DIRS[2]="/dev/shm"
	DEV_DIRS[3]="/proc"
	DEV_DIRS[4]="/sys"
	if [[ -z ${1} ]]; then
		mount_dev_dirs -u
		for FILE in ${DEV_DIRS[@]}; do
			mount --verbose --bind ${FILE} ${TARGET}${FILE}
		done
	elif [[ ${1} == -u ]]; then
		shift
		for FILE in $(eval echo "{$((${#DEV_DIRS[@]}-1))..0}"); do
			umount --verbose ${TARGET}${DEV_DIRS[${FILE}]}
		done
	fi
	return 0
}

########################################

function expect_wrapper {
	declare EXPECT_CMD="spawn -noecho ${@};"
	EXPECT_CMD+=" "; EXPECT_CMD+="set timeout -1;"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="expect {"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase yes*/*no*	{send y\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="-nocase use-new*	{send u\\r; exp_continue;}"
	EXPECT_CMD+=" "; EXPECT_CMD+="default {}"
	EXPECT_CMD+=" "; EXPECT_CMD+="eof"
	EXPECT_CMD+=" "; EXPECT_CMD+="};"
	EXPECT_CMD+="";
	EXPECT_CMD+=" "; EXPECT_CMD+="lassign [wait] pid spawnid os_error exit_status;"
	EXPECT_CMD+=" "; EXPECT_CMD+="if {(\$os_error == 0) && (\$exit_status == 0)} { exit 0; } else { exit 1; };"
	if [[ -n ${AUTO} ]]; then
		${SAFE_ENV} expect -c "${EXPECT_CMD}"	|| return 1
	else
		${SAFE_ENV} "${@}"			|| return 1
	fi
	return 0
}

################################################################################

if [[ ${1} == -s ]]; then
	shift
	mount_dev_dirs
	if [[ ${1} == -t ]]; then
		shift
		${_SELF} ${TOOR} -s -e --pretend --emptytree --tree --unordered-display \@system \@world
	elif [[ ${1} == -e ]]; then
		shift
		expect_wrapper emerge ${ASK} "${@}"			|| exit 1
	else
		${SAFE_ENV} /usr/bin/env bash -o vi ${@:+-c "${@}"}	|| exit 1
	fi
	mount_dev_dirs -u
	exit 0
fi

########################################

if [[ ${1} == -l ]]; then
	shift
	[[ -z ${1} ]] && exit 1
	if [[ ${1} == *([0-9]) ]]; then
		echo -en "https://bugs.gentoo.org/show_bug.cgi?id=${1}"
	else
		FILE="$(ls -d /var/git/meta-repo/kits/*/*/${1})"
		NEXT="$(echo "${FILE}" | ${SED} "s|^/var/git/meta-repo/kits/.+[/]([^/]+[/][^/]+)$|\1|g")"
		if [[ -z ${FILE} ]]; then
			echo -en "\n"
			emerge --search ${1}
		else
			echo -en "https://packages.gentoo.org/packages/${NEXT}\n"
			echo -en "https://gentoobrowse.randomdan.homeip.net/package/${NEXT}#bugs\n"
			${LL} -d /${DSTDIR}/$(basename ${FILE})*	2>/dev/null
			${LL} -d /${PKGDIR}/${NEXT}*			2>/dev/null
			echo -en "\n"
			echo -en "${FILE}\n"
			${LL} ${FILE}
		fi
	fi
	exit 0
fi

################################################################################

if [[ ${1} == -0 ]]; then ${_SELF} ${TOOR} -n -a -b -k -i	2>&1 | tee ${TARGET}.log | prompt -c	; exit 0; fi
if [[ ${1} == -/ ]]; then ${_SELF} ${TOOR} -a -i		2>&1 | tee ${TARGET}.log | prompt -c	; exit 0; fi
if [[ ${1} == -1 ]]; then ${_SELF} ${TOOR} -a -b -i		2>&1 | tee ${TARGET}.log | prompt -c	; exit 0; fi
if [[ ${1} == -2 ]]; then ${_SELF} ${TOOR} -c -i							; exit 0; fi

########################################

if [[ ${1} == -i ]]; then
	if [[ ! -d ${TARGET}/boot ]]; then
#>>>		tar -pvvxJ -C ${TARGET} -f	$(ls -t ${SOURCE}/stage3-*i686*funtoo*.tar.xz		| head -n1) || exit 1
		tar -pvvxJ -C ${TARGET} -f	$(ls -t ${SOURCE}/stage3-*core2_64*funtoo*.tar.xz	| head -n1) || exit 1
		${RSYNC_U} ${SOURCE}/*funtoo*	${TARGET}/_build/					|| exit 1
	fi
	echo -en "${COMMIT}"			>${TARGET}/_build/_commit				|| exit 1
	${RSYNC_U} ${FUNDIR}/			${TARGET}/_build/_config				|| exit 1
	${RSYNC_U} ${LINDIR}/			${TARGET}/_build/_kernel				|| exit 1
	${MKDIR}				${TARGET}/.g/.home					|| exit 1
	${HOME}/scripts/_sync _home _build	${TARGET}/.g/.home					|| exit 1
	${RM}					${TARGET}/.g/.home/.ssh/id_*				|| exit 1
	mount_dev_dirs
	HOME=/.g/.home ${SAFE_ENV}		/.g/.home/scripts/_sync mount g null			#>>>|| exit 1
	if [[ ! -d ${TARGET}/var/git/meta-repo ]]; then
		${MKDIR}			${TARGET}/var/git/meta-repo{,.git}			|| exit 1
		${RSYNC_U} ${GITDIR}/		${TARGET}/var/git/meta-repo.git				|| exit 1
		${SAFE_ENV}			${_SELF} ${FUNTOO_VER}					|| exit 1
	fi
	${SAFE_ENV}				${_SELF} ${TOOR} ${AUTO} -w				|| exit 1
	if ${BLD}; then
		if [[ -n ${_NEW} ]]; then
#>>>			expect_wrapper		emerge ${ASK} expect					|| exit 1
			${SAFE_ENV}		emerge ${ASK} expect					|| exit 1
			${SAFE_ENV}		${_SELF} ${TOOR} ${AUTO} -f				|| exit 1
			expect_wrapper		emerge ${ASK} --deep --newuse --update \@system		|| exit 1
		else
			expect_wrapper		emerge ${ASK} --emptytree \@system \@world		|| exit 1
		fi
	fi
	if ${KRN}; then for FILE in ${KERNEL_VER}; do
		${RM}				${TARGET}/usr/src/linux					|| exit 1
		${LN} linux-${FILE}-gentoo	${TARGET}/usr/src/linux					|| exit 1
		expect_wrapper			emerge ${ASK} genkernel =gentoo-sources-${FILE}		|| exit 1
		declare GENKERNEL_OPTS="--loglevel=5 --bootloader=grub --symlink kernel"
		if [[ -z ${AUTO} ]]; then
			expect_wrapper		genkernel ${GENKERNEL_OPTS} kernel --menuconfig		|| exit 1
		else
			expect_wrapper		genkernel ${GENKERNEL_OPTS} kernel			\
						--kernel-config=${LINDIR}/config-gentoo64-${FILE}	|| exit 1
		fi
#>>>		FILE="kernel-genkernel-x86-${FILE}-gentoo"						|| exit 1
		FILE="kernel-genkernel-x86_64-${FILE}-gentoo"						|| exit 1
		${RM}				${TARGET}/boot/_cur					|| exit 1
		${LN} ${FILE}			${TARGET}/boot/_cur					|| exit 1
		${RM}				${TARGET}/boot/_new					|| exit 1
		${LN} kernel			${TARGET}/boot/_new					|| exit 1
		${RM}				${TARGET}/boot/_old					|| exit 1
		${LN} kernel.old		${TARGET}/boot/_old					|| exit 1
		{ [[ -L				${TARGET}/boot/kernel.old ]] ||
		${LN} ${FILE}			${TARGET}/boot/kernel.old; }				|| exit 1
	done; fi
	declare KERNEL="$(cd ${TARGET}/boot; ls kernel-debian-sources-*		2>/dev/null | sort | tail -n1)"
	declare INITRD="$(cd ${TARGET}/boot; ls initramfs-debian-sources-*	2>/dev/null | sort | tail -n1)"
	if [[ -n ${KERNEL} ]]; then
		${RM}				${TARGET}/boot/_kernel					|| exit 1
		${LN} ${KERNEL}			${TARGET}/boot/_kernel					|| exit 1
	fi
	if [[ -n ${INITRD} ]]; then
		${RM}				${TARGET}/boot/_initrd					|| exit 1
		${LN} ${INITRD}			${TARGET}/boot/_initrd					|| exit 1
	fi
	if ${CFG}; then
		cat >>${TARGET}/etc/passwd <<END_OF_FILE
---
root:x:0:0::/.g/_data/zactive/.home:/bin/bash
plastic:x:1000:1000::/.g/_data/zactive/.home:/bin/bash
user:x:1001:1001::/.g/_data/zactive/.home:/bin/bash
null:x:666:666::/tmp/.null:/bin/nologin
lfs-user:x:9999:9999::/.g/_data/_builds/_lfs/.lfs/lfs-user:/bin/bash
---
END_OF_FILE
		cat >>${TARGET}/etc/shadow <<END_OF_FILE
---
root::::::::
plastic::::::::
user:*:::::::
null:*:::::::
lfs-user:*:::::::
---
END_OF_FILE
		cat >>${TARGET}/etc/group <<END_OF_FILE
---
root:x:0:root,plastic
wheel:x:10:root,plastic,lfs-user
plastic:x:1000:root,plastic
user:x:1001:root,plastic,user
null:x:666:root,plastic,null
lfs-user:x:9999:root,plastic,lfs-user
---
audio:x:---:root,plastic,null
cdrom:x:---:root,plastic,null
video:x:---:root,plastic,null
games:x:---:root,plastic,null
---
END_OF_FILE
		cat >>${TARGET}/etc/gshadow <<END_OF_FILE
---
root:::root,plastic
wheel:::root,plastic,lfs-user
plastic:::root,plastic
user:::root,plastic,user
null:::root,plastic,null
lfs-user:::root,plastic,lfs-user
---
audio:::root,plastic,null
cdrom:::root,plastic,null
video:::root,plastic,null
games:::root,plastic,null
---
END_OF_FILE
		cat >>${TARGET}/etc/pam.d/su <<END_OF_FILE
---
auth sufficient pam_wheel.so use_uid trust
auth required pam_wheel.so use_uid
---
END_OF_FILE
		cat >>${TARGET}/etc/sudoers <<END_OF_FILE
---
Defaults exempt_group=wheel
%wheel ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: ALL
---
END_OF_FILE
		${EDITOR}			${TARGET}/etc/passwd	\
						${TARGET}/etc/shadow	\
						${TARGET}/etc/group	\
						${TARGET}/etc/gshadow	\
						${TARGET}/etc/pam.d/su	\
						${TARGET}/etc/sudoers
		for FILE in			root	\
						plastic
		do				echo -en "password: ${FILE}\n"
			until			${SAFE_ENV} passwd ${FILE}
			do			echo -en "retry: ${FILE}\n"
			done
		done
	fi
	${SAFE_ENV}				${_SELF} ${TOOR} ${AUTO} -u	|| exit 1
	if [[ -z ${_MET} ]]; then
		${SAFE_ENV}			${_SELF} ${TOOR} ${AUTO} -f	|| exit 1
	fi
	mount_dev_dirs -u
	exit 0
fi

################################################################################

if [[ ${1} == -w ]]; then
	${RSYNC_U/reporter} ${FUNDIR}/[a-z_]*		/etc/portage/
	${LN} /etc/portage/_overlay/overlay.conf	/etc/portage/repos.conf/
	chown -R root:root				/etc/portage
	chmod -R 755					/etc/portage
	for FILE in \
		/etc/portage/make.conf	\
		/etc/portage/package.*
	do
		${SED} -i "s|^[#][{]${_MET}[}][ ](.+)$|\1|g" ${FILE}
		${SED} -i "s|^[#][{]${_NEW}[}][ ](.+)$|\1|g" ${FILE}
	done
	${LL} /_gentoo
	cat /_gentoo/+okay
	ego profile build stable	|| exit 1
	ego profile flavor desktop	|| exit 1
	ego profile show
	locale-gen
	gcc-config ${CHOST}-$(equery list gcc | awk '{print $1;}' | cut -d- -f3 | sort -n | tail -n1)
	gcc-config --list-profiles
	java-config --set-system-vm $(equery list icedtea | awk '{print $1;}' | ${GREP} -v "^$" | cut -d/ -f2 | cut -d. -f1 | tail -n1)
	java-config --list-available-vms
	for FILE in \
		mesa:--auto		\
		opengl:xorg-x11		\
		python:python3.4	\
		unison:2.48		\
		vi:vim			\
		\
		$(for NEXT in ${KERNEL_VER}; do
			echo "kernel:linux-${NEXT}-gentoo"
		done)
	do
		declare KEY="$(echo "${FILE}" | ${SED} "s/^(.+)[:](.+)$/\1/g")"
		declare VAL="$(echo "${FILE}" | ${SED} "s/^(.+)[:](.+)$/\2/g")"
		eselect ${KEY} set ${VAL}
		eselect ${KEY} list
	done
	cat /dev/null	>/var/lib/portage/world
	echo "@${_PKG}"	>/var/lib/portage/world_sets
	exit 0
fi

########################################

if [[ ${1} == -u ]]; then
	${SAFE_ENV} ${_SELF} ${TOOR} ${AUTO} -w					|| exit 1
	expect_wrapper emerge ${ASK} --deep --newuse --update \@system \@world	|| exit 1
	expect_wrapper python-updater						|| exit 1
	expect_wrapper perl-cleaner --all					|| exit 1
	expect_wrapper haskell-updater --all					|| exit 1
	expect_wrapper emerge ${ASK} \@module-rebuild				|| exit 1
	expect_wrapper emerge ${ASK} \@preserved-rebuild			|| exit 1
	expect_wrapper emerge ${ASK} --depclean					|| exit 1
	expect_wrapper revdep-rebuild --ignore					|| exit 1
	expect_wrapper emaint --fix all						|| exit 1
	expect_wrapper eclean --verbose distfiles				|| exit 1
	expect_wrapper eclean --verbose packages				|| exit 1
	expect_wrapper dispatch-conf						|| exit 1

########################################

elif [[ ${1} != -! ]]; then
	if [[ ${1} != -f ]]; then
		declare GIT="$(which git)"
		if [[ -d /var/git/meta-repo.git ]] && [[ ! -d /var/git/meta-repo/.git ]]; then
			${MV} /var/git/meta-repo.git /var/git/meta-repo/.git
		fi
		if [[ -z ${1} ]]; then
#>>>			expect_wrapper emerge --ask=n --verbose --sync			|| exit 1
			expect_wrapper ego sync						|| exit 1
			(cd /var/git/meta-repo &&
				${GIT} pull &&
				${GIT} checkout --force master &&
				${GIT} submodule update --force --init --recursive --remote --rebase &&
				${GIT} submodule foreach --recursive "git reset --hard"
			)								|| exit 1
		else
			(cd /var/git/meta-repo &&
				${GIT} reset --hard ${1} &&
				${GIT} submodule update --force --init --recursive &&
				${GIT} submodule foreach --recursive "git reset --hard"
			)								|| exit 1
		fi
		if [[ -d /var/git/meta-repo/.git ]] && [[ ! -d /var/git/meta-repo.git ]]; then
			${MV} /var/git/meta-repo/.git /var/git/meta-repo.git
		fi
		for FILE in /var/git/meta-repo/kits/*kit; do
			echo -en "egencache: ${FILE}\n"
			expect_wrapper egencache --repo "$(basename ${FILE})"		\
				--update-use-local-desc					|| exit 1
		done
	fi
	if [[ -z ${1} ]] || [[ ${1} == -f ]]; then
		FILE="true"
		expect_wrapper emerge --ask=n --emptytree --fetch-all-uri		\
			\@system \@world						2>&1 | tee /${DSTDIR}.log
		if [[ ${PIPESTATUS[0]} != 0 ]]; then
			FILE="false"
		fi
		if ! ${FILE}; then
			echo -en "FILELIST=\"\n"					1>&2
			${SED} -n \
				-e "s/^.*Couldn[']t[ ]download[ ][']([^']+).*$/\1/gp"	\
				-e "s/^.*Please[ ]download[ ]([^ ]+).*$/\1/gp"		\
				/${DSTDIR}.log | sort --unique				1>&2
			echo -en "\"\n"							1>&2
			echo -en "for FILE in \${FILELIST}; do\n"			1>&2
			echo -en "${RSYNC_U} "						1>&2
			echo -en "${BUILDS}/${DSTDIR}/\${FILE} ${TARGET}/${DSTDIR}/\n"	1>&2
			echo -en "done\n"						1>&2
		fi
		for NEXT in $(find /${DSTDIR}/*checksum_failure* 2>/dev/null); do
			${RM} ${NEXT}							1>&2
			FILE="false"
		done
		if ! ${FILE}; then
			exit 1;
		fi
		${RM} /${DSTDIR}.log							1>&2
	fi
	if [[ -n ${1} ]]; then
		exit 0
	fi
fi

################################################################################

${SAFE_ENV} ${FUNDIR}/.emergent
if [[ -z ${_MET} ]]; then
	${SAFE_ENV} ${FUNDIR}/.hacks
fi

########################################

if [[ -z ${AUTO} ]] && [[ ${1} == -u ]]; then
	eselect news read new
	echo -en "\n"
	glsa-check --verbose --cve --test all
fi

########################################

echo -en "\n"
wc -l /_gentoo/_packages
wc -l /_gentoo/_packages.db

echo -en "\n"
diff ${DIFF_OPTS} /_gentoo/_packages.db /_gentoo/_packages |
	${GREP} "^[-+]"

echo -en "\n"
${LL} /_gentoo/+okay*

exit 0
################################################################################
# end of file
################################################################################
